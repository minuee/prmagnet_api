<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BRAND">

    <!--
        휴일 등록
        /brand/brand-holiday POST
    -->
    <insert id="INSERT.BRAND.HOLIDAY">        
        INSERT INTO TB_BRAND_HOLIDAY
        (
            BRAND_ID
            , HOLIDAY_YMD
            , HOLIDAY_UTC
            , HOLIDAY_TIMESTAMP
            , "year"
        )
        VALUES
        (
            #{brand_id}
            , TO_CHAR(TO_TIMESTAMP(#{holiday_utc}::BIGINT) AT TIME ZONE 'Asia/Seoul', 'YYYYMMDD')
            , #{holiday_utc}
            , TO_TIMESTAMP(#{holiday_utc}::BIGINT)
            , TO_CHAR(TO_TIMESTAMP(#{holiday_utc}::BIGINT) AT TIME ZONE 'Asia/Seoul', 'YYYY')::INTEGER
        )
        ON CONFLICT(BRAND_ID, HOLIDAY_YMD)
        DO UPDATE
        SET
            DEL_YN = 'N'
    </insert>

    <!--
        휴일 조회
        /brand/brand-holiday GET
    -->
    <select id="SELECT.BRAND.HOLIDAY">        
        SELECT 
            A.HOLIDAY_UTC
        FROM 
            TB_BRAND_HOLIDAY as A 
        WHERE 
            A.BRAND_ID = #{brand_id} AND A.DEL_YN = 'N'
            AND A.holiday_timestamp > (NOW() AT TIME ZONE 'Asia/Seoul')  
        ORDER BY A.HOLIDAY_UTC ASC
    </select>

    <!--
        쇼룸 공지사항 전송
        /brand/brand-holiday-delete PUT
    -->
    <delete id="DELETE.BRAND.HOLIDAY">        
        UPDATE 
            TB_BRAND_HOLIDAY
        SET 
            DEL_YN = 'Y'
        WHERE 
            BRAND_ID = #{brand_id} AND HOLIDAY_YMD = TO_CHAR(TO_TIMESTAMP(#{holiday_utc}::BIGINT) AT TIME ZONE 'Asia/Seoul', 'YYYYMMDD')
    </delete>

    <!--
         계절구분코드 조회입니다.
        /brand/notice POST
    -->
    <select id="SELECT.BRAND.SEASON.LIST">    
        SELECT 
            A.CD_ID
            , A.CD_NM
        FROM 
            TB_COMM_CD A
        WHERE 1=1
            AND (  A.BRAND_ID = '' OR  A.BRAND_ID =  #{brand_id} )
            AND A.CD_TYP_ID = 'CT00000008'
            AND A.DEL_YN = 'N'
        ORDER BY A.ORDER_VALUE, A.CD_ID
    </select>

     <!-- 
        계절구분코드 조회입니다.
        /cdn/sample/info GET
    -->
    <select id="SELECT.SEASON.CODE">
        SELECT 
            A.CD_ID
            , A.CD_NM
        FROM 
            TB_COMM_CD A
        WHERE 1=1
            AND A.BRAND_ID = #{brand_id}
            AND A.CD_TYP_ID = 'CT00000008'
            AND A.DEL_YN = 'N'
    </select>

    <insert id="INSERT.CUSTOM.SEASON">    
        INSERT INTO TB_COMM_CD(cd_typ_id, CD_ID, BRAND_ID, CD_NM, CD_SIMPLE_NM)
        SELECT
            'CT00000008'
            , COALESCE(
                (
                    SELECT LPAD((MAX(L.CD_ID)::INTEGER + 1)::TEXT, 6, '0')
                    FROM TB_COMM_CD L
                    WHERE L.BRAND_ID = #{brand_id} AND L.CD_TYP_ID = 'CT00000008'
                )
                , '000000'
            )
            , #{brand_id}
            , #{season_nm}
            , #{season_nm}
        RETURNING CD_ID
    </insert>

    <!--
        send out 공지사항 생성
        /brand/send-out/notice POST
    -->
    <update id="UPDATE.SENDOUT.NOTICE">        
        UPDATE TB_BRAND
        SET
            SEND_OUT_NOTICE = #{content}
        WHERE BRAND_ID = #{brand_id} AND DEL_YN='N'
    </update>

    <!--
        쇼룸 공지사항 전송
        /brand/notice POST
    -->
    <insert id="INSERT.NOTICE.NOTIFY">
        WITH INSERT_NOTIFY AS
        (
            INSERT INTO TB_SHOWROOM_NOTIFI
            (
                BRAND_ID
                , SEND_MAN_ID
                , RECV_MAN_SE_CD
                , RECV_MAN_ID
                , CONTENT
            )
            SELECT
                #{brand_id}
                , #{user_id}
                , T.RECV_CD
                , T.USER_ID
                , '['
                    || (SELECT BRAND_NM FROM TB_BRAND WHERE BRAND_ID = #{brand_id} LIMIT 1)
                    || '] '
                    || '디지털쇼룸에 새 공지사항이 등록되었습니다.'
            FROM
            (
                (
                    SELECT
                        A.USER_ID, 'RMS001' AS RECV_CD
                    FROM TB_MGZN_USER A
                    WHERE A.BRAND_NOTICE_NOTIFI_YN IS TRUE AND A.DEL_YN='N'
                )
                UNION ALL
                (
                    SELECT B.USER_ID,'RMS002' AS RECV_CD
                    FROM TB_STYLE_LIST_USER B
                    WHERE B.BRAND_NOTICE_NOTIFI_YN IS TRUE AND B.DEL_YN='N'
                )
            ) T
            RETURNING CONTENT, RECV_MAN_ID
        )
        SELECT 
            B.TOKEN_VALUE , A.CONTENT AS MESSAGE
        FROM 
            INSERT_NOTIFY A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_MAN_ID = B.USER_ID AND B.USE_YN
    </insert>

    <!--
        send out 공지사항 생성
        /brand/send-out/notice POST
    -->
    <select id="SELECT.SENDOUT.NOTICE">        
        SELECT
            SEND_OUT_NOTICE AS CONTENT
        FROM TB_BRAND
        WHERE BRAND_ID = #{brand_id} AND DEL_YN='N'
    </select>

    <!--
        메모 생성
        /brand/memo POST
    -->
    <insert id="INSERT.MEMO">
        INSERT INTO TB_MEMO
        (
            USER_ID
            , USER_SE_CD
            , MEMO_DT
            , MEMO_YMD
            , BRAND_ID
            , CONTENT
            , COLOR
            , SHOWROOM_NO
        )
        VALUES
        (
            #{user_id}
            , 'RMS003'
            , TO_TIMESTAMP(#{date}::BIGINT)
            , TO_CHAR(TO_TIMESTAMP(#{date}::BIGINT)::DATE, 'YYYYMMDD')
            , #{brand_id}
            , #{content}
            , #{color}
            , #{showroom_no}
        )
        ON CONFLICT(SHOWROOM_NO, MEMO_DT)
        DO UPDATE
        SET
            USER_ID = #{user_id}
            , CONTENT = #{content}
            , COLOR = #{color}
            , DEL_YN = 'N'
        RETURNING MEMO_NO
    </insert>

    <!--
        메모 수정
        /brand/memo/:memo_no PUT
    -->
    <insert id="UPDATE.MEMO">
        UPDATE TB_MEMO
        SET
            USER_ID = #{user_id}
            , MEMO_DT = TO_TIMESTAMP(#{date}::BIGINT)
            , MEMO_YMD = TO_CHAR(TO_TIMESTAMP(#{date}::INTEGER)::DATE AT TIME ZONE 'Asia/Seoul', 'YYYYMMDD')
            , BRAND_ID = #{brand_id}
            , CONTENT = #{content}
            , COLOR = #{color}
            , SHOWROOM_NO = #{showroom_no}
        WHERE MEMO_NO = #{memo_no} AND DEL_YN='N'
        RETURNING MEMO_NO
    </insert>

    <!--
        메모 삭제
        /brand/memo DELETE
    -->
    <delete id="DELETE.MEMO">
        UPDATE TB_MEMO SET DEL_YN = 'Y'
        WHERE MEMO_NO = #{memo_no} AND BRAND_ID = #{brand_id}
    </delete>

     <!--
        메모 삭제
        /brand/memo DELETE
    -->
    <select id="SELECT.MEMO">
        SELECT
            MEMO_NO, COLOR, CONTENT, MEMO_YMD, FLOOR(DATE_PART('epoch'::TEXT, A.MEMO_DT))::BIGINT AS MEMO_DT
        FROM TB_MEMO A
        WHERE 
            SHOWROOM_NO = #{showroom_no}
            AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.MEMO_DT))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
            AND DEL_YN = 'N'
    </select>

    <!--
        반납 스케줄 조회
        /brand/return-schedule GET
    -->
    <select id="SELECT.RETURN.LIST">
        SELECT
            FLOOR(DATE_PART('epoch'::TEXT, A.DATE))::BIGINT AS DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.DATE))::BIGINT AS RETURN_DATE
            , TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DATE))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'YYYY') AS YEAR
            , TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DATE))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'MM') AS MONTH
            , TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DATE))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'DD') AS DAY
            , JSONB_AGG(JSONB_BUILD_OBJECT(
                'req_no'
                , A.REQ_NO
                , 'req_user_type'
                , CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN 'MAGAZINE' ELSE 'STYLIST' END
                , 'req_user_nm'
                , CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN B.USER_NM ELSE D.USER_NM END
                , 'mgzn_nm'
                , C.MGZN_NM
                , 'mgzn_logo_adres'
                , C.mgzn_logo_url_adres
                , 'mgzn_color'
                , C.color
            )) AS EACH_LIST
            , COUNT(A.REQ_NO) AS EACH_COUNT
        FROM
            (
                SELECT
                    A.REQ_NO, A.REQ_USER_SE_CD, A.REQ_USER_ID, A.RETURN_PREARNGE_DT::DATE AS DATE
                FROM TB_REQ A
                WHERE 
                    A.BRAND_ID = #{brand_id}
                    AND A.RETURN_PREARNGE_DT >= TO_TIMESTAMP(#{start_date}::BIGINT)
                    AND A.RETURN_PREARNGE_DT &lt;= TO_TIMESTAMP(#{fin_date}::BIGINT)
                    AND A.DEL_YN = 'N'
                    AND A.REQ_STATUS_CD = 'RS0003'
            ) A LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_ID = B.USER_ID AND A.REQ_USER_SE_CD = 'RUS001' AND B.DEL_YN = 'N'
            LEFT JOIN TB_MGZN C ON B.MGZN_ID = C.MGZN_ID AND A.REQ_USER_SE_CD = 'RUS001' AND C.DEL_YN = 'N'
            LEFT JOIN TB_STYLE_LIST_USER D ON A.REQ_USER_ID = D.USER_ID AND A.REQ_USER_SE_CD = 'RUS002' AND D.DEL_YN = 'N'
        GROUP BY A.DATE
        ORDER BY A.DATE
    </select>

    <!--
        발송 스케줄 조회
        /brand/sendout-schedule GET
        /brand/return-schedule GET
        /magazine/pickup-schedule GET
        /magazine/sendout-schedule GET
        /stylist/pickup-schedule GET
        /stylist/sendout-schedule GET
    -->
    <select id="SELECT.SCHEDULE.LIST">
        SELECT
            FLOOR(DATE_PART('epoch'::TEXT, A.DATE))::BIGINT AS DATE
            , TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DATE))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'YYYY') AS YEAR
            , TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DATE))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'MM') AS MONTH
            , TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DATE))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'DD') AS DAY
            , JSONB_AGG(JSONB_BUILD_OBJECT(
                'req_no', A.REQ_NO
                , 'req_user_type', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN 'MAGAZINE' ELSE 'STYLIST' END
                , 'req_user_nm', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN B.USER_NM ELSE E.USER_NM END
                , 'req_user_position', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN C.CD_NM ELSE F.CD_NM END
                , 'contact_user_nm', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN G.USER_NM ELSE H.USER_NM END
                , 'mgzn_nm', D.MGZN_NM
                , 'mgzn_logo_adres', CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', D.MGZN_LOGO_URL_ADRES)
                , 'mgzn_color', D.COLOR
                , 'stylist_company_name', E.POSI_COMPY_NM
                , 'brand_nm', K.BRAND_NM
                , 'brand_user_nm', I.USER_NM
                , 'brand_user_position', J.CD_NM
                , 'brand_logo_adres', CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', K.BRAND_LOGO_URL_ADRES)
                , 'brand_color', K.COLOR
            ) ORDER BY A.REQ_NO) AS EACH_LIST
            , COUNT(A.REQ_NO) AS EACH_COUNT
        FROM
            (
            SELECT
                A.REQ_NO
                , A.REQ_USER_SE_CD
                , A.REQ_USER_ID
                <if test="type=='SENDOUT'">
                , (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE date
                </if>
                <if test="type=='RETURN'">
                , (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE date
                </if>
                , A.CONTACT_USER_ID
                , A.CNFIRM_BRAND_USER_NO
                , A.BRAND_ID
            FROM TB_REQ A
            WHERE 1=1
                <if test="req_no">
                AND A.REQ_NO = #{req_no}
                </if>
                <if test="brand_id">
                AND A.BRAND_ID = #{brand_id}
                </if>
                <if test="mgzn_id">
                AND A.REQ_USER_ID IN (SELECT USER_ID FROM TB_MGZN_USER WHERE MGZN_ID = #{mgzn_id})
                </if>
                <if test="stylist_id">
                AND A.REQ_USER_ID = #{stylist_id}
                </if>
                AND A.DEL_YN = 'N'
                <if test="type == 'SENDOUT' and date">
                AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005', 'RS0006')
                </if>
                <if test="type == 'RETURN' and date">
                AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005', 'RS0006')
                </if>
                <if test="type=='SENDOUT' and start_date and fin_date">
                AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))) AT TIME ZONE 'Asia/Seoul')::DATE >= (TO_TIMESTAMP(#{start_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))) AT TIME ZONE 'Asia/Seoul')::DATE &lt;= (TO_TIMESTAMP(#{fin_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005', 'RS0006')
                </if>
                <if test="type=='RETURN' and start_date and fin_date">
                AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))) AT TIME ZONE 'Asia/Seoul')::DATE >= (TO_TIMESTAMP(#{start_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))) AT TIME ZONE 'Asia/Seoul')::DATE &lt;= (TO_TIMESTAMP(#{fin_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005', 'RS0006')
                </if>
            ORDER BY A.REQ_NO ASC
            ) A
            INNER JOIN TB_BRAND K ON A.BRAND_ID = K.BRAND_ID
            LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_SE_CD = 'RUS001' AND A.REQ_USER_ID = B.USER_ID AND B.DEL_YN = 'N'
            LEFT JOIN TB_COMM_CD C ON C.CD_TYP_ID = 'CT00000002' AND B.mgzn_pos_cd = C.CD_ID
            LEFT JOIN TB_MGZN D ON A.REQ_USER_SE_CD = 'RUS001' AND B.MGZN_ID = D.MGZN_ID AND D.DEL_YN = 'N'
            LEFT JOIN TB_STYLE_LIST_USER E ON A.REQ_USER_SE_CD = 'RUS002' AND A.REQ_USER_ID = E.USER_ID AND E.DEL_YN = 'N'
            LEFT JOIN TB_COMM_CD F ON F.CD_TYP_ID = 'CT00000019' AND E.STYLE_LIST_POS_CD = F.CD_ID
            LEFT JOIN TB_MGZN_USER G ON A.REQ_USER_SE_CD = 'RUS001' AND A.CONTACT_USER_ID = G.USER_ID AND A.CONTACT_USER_ID IS NOT NULL AND G.DEL_YN = 'N'
            LEFT JOIN TB_STYLE_LIST_USER H ON A.REQ_USER_SE_CD = 'RUS002' AND A.CONTACT_USER_ID = H.USER_ID AND A.CONTACT_USER_ID IS NOT NULL AND H.DEL_YN = 'N'
            LEFT JOIN TB_BRAND_USER I ON A.CNFIRM_BRAND_USER_NO IS NOT NULL AND A.CNFIRM_BRAND_USER_NO = I.BRAND_USER_NO
            LEFT JOIN TB_COMM_CD J ON I.BRAND_POS_CD = J.CD_ID AND J.CD_TYP_ID = 'CT00000012'
        GROUP BY A.DATE
        ORDER BY A.DATE
    </select>

    <select id="SELECT.SCHEDULE.LIST.MOBILE">
        SELECT
            FLOOR(DATE_PART('epoch'::TEXT, AZ.DATE))::BIGINT AS DATE
            , TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, AZ.DATE))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'YYYY') AS YEAR
            , TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, AZ.DATE))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'MM') AS MONTH
            , TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, AZ.DATE))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'DD') AS day
            , JSONB_AGG(
                JSONB_BUILD_OBJECT(
                'showroom_list', AZ.EACH_LIST
                )
                ORDER BY
                AZ.showroom_no
            ) AS EACH_LIST
        FROM 
            (
                SELECT
                    JSONB_AGG(JSONB_BUILD_OBJECT(
                        'req_no', A.REQ_NO
                        ,'showroom_no',A.showroom_no
                        ,'req_user_type', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN 'MAGAZINE' ELSE 'STYLIST' END
                        ,'req_user_nm', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN B.USER_NM ELSE E.USER_NM END
                        ,'req_user_position', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN C.CD_NM ELSE F.CD_NM END
                        ,'contact_user_nm', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN G.USER_NM ELSE H.USER_NM END
                        ,'mgzn_nm', CASE WHEN A.target_id_type = 'RUS001' THEN D9.MGZN_NM WHEN A.target_id_type = 'RUS002' THEN D2.MGZN_NM ELSE '' END
                        ,'mgzn_logo_adres', CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', D9.MGZN_LOGO_URL_ADRES )
                        ,'mgzn_color', D9.COLOR
                        ,'stylist_company_name', E.POSI_COMPY_NM
                        ,'brand_nm', K.BRAND_NM                
                        ,'brand_logo_adres', CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', K.BRAND_LOGO_URL_ADRES)
                        ,'brand_color', K.COLOR
                        ,'target_user_nm', CASE WHEN A.target_id_type = 'RUS001' THEN G.USER_NM WHEN A.target_id_type = 'RUS002' THEN H.USER_NM ELSE I.USER_NM END
                        ,'target_user_position', CASE WHEN A.target_id_type = 'RUS001' THEN C3.CD_NM WHEN A.target_id_type = 'RUS002' THEN C4.CD_NM ELSE C2.CD_NM END
                        ,'target_id_type',A.target_id_type
                        ,'sendout_yn', A.sendout_yn
                        ,'pickup_yn', A.pickup_yn
                        ,'return_yn', A.return_yn
                    ) ORDER BY A.REQ_NO,A.showroom_no) AS EACH_LIST
                    ,A.showroom_no 
                    ,A.date
                    , COUNT(A.REQ_NO) AS EACH_COUNT
                FROM
                    (
                    SELECT
                        A.REQ_NO
                        , A.REQ_USER_SE_CD
                        , A.REQ_USER_ID
                        <if test="type=='SENDOUT'">
                        , (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.sendout_dt ))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE date
                        </if>
                        <if test="type=='RETURN'">
                        , (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.return_dt ))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE date
                        </if>
                        , A.CONTACT_USER_ID
                        , A.CNFIRM_BRAND_USER_NO
                        , A.BRAND_ID
                        , TR.showroom_no,TR.sendout_yn,TR.pickup_yn,TR.return_yn
                        <if test="type=='SENDOUT'">
                        ,TR.sendout_userid as target_id ,TR.sendout_userid_type as target_id_type
                        </if>
                        <if test="type=='RETURN'">
                        ,TR.return_userid as target_id ,TR.return_userid_type as target_id_type
                        </if>
                    FROM 
                        TB_NEW_REQ_SAMPLE AS TR 
                        INNER JOIN TB_REQ A ON TR.REQ_NO = A.REQ_NO
                    WHERE 1=1
                        AND TR.DEL_YN = 'N'
                        <if test="req_no">
                        AND TR.REQ_NO = #{req_no}
                        </if>
                        <if test="req_no_array">
                        AND TR.REQ_NO IN ( 
                            <foreach collection="req_no_array" item="rno" separator=",">
                                #{rno}
                            </foreach>
                        ) 
                        </if>
                        <if test="showroom_no">
                        AND TR.showroom_no IN ( 
                            <foreach collection="showroom_no" item="sno" separator=",">
                                #{sno}
                            </foreach>
                        ) 
                        </if>
                        <if test="brand_id">
                        AND A.BRAND_ID = #{brand_id}
                        </if>
                        <if test="type == 'RETURN' and brand_id">
                        AND TR.return_userid_type in ('RUS000','RUS001')
                        </if>
                         <if test="type == 'SENDOUT' and brand_id">
                        AND TR.sendout_userid_type in ('RUS000','RUS001')
                        </if>
                        <if test="mgzn_id">
                        AND ( A.req_user_id = #{user_id} OR  A.contact_user_id = #{user_id} )
                        </if>
                        <if test="stylist_id">
                        AND A.REQ_USER_ID = #{stylist_id}
                        </if>
                        AND A.DEL_YN = 'N'
                        <if test="type == 'SENDOUT' and date">
                        AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.sendout_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                        AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005','RS0006')
                        </if>
                        <if test="type == 'RETURN' and date">
                        AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.return_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                        AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005','RS0006')
                        </if>
                        <if test="type=='SENDOUT' and start_date and fin_date">
                        AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.sendout_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE >= (TO_TIMESTAMP(#{start_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                        AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.sendout_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE &lt;= (TO_TIMESTAMP(#{fin_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                        AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005','RS0006')
                        </if>
                        <if test="type=='RETURN' and start_date and fin_date">
                        AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.return_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE >= (TO_TIMESTAMP(#{start_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                        AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.return_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE &lt;= (TO_TIMESTAMP(#{fin_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                        AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005','RS0006')
                        </if>
                        ORDER BY A.REQ_NO ASC
                    ) A
                    INNER JOIN TB_BRAND K ON A.BRAND_ID = K.BRAND_ID
                    LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_SE_CD = 'RUS001' AND A.REQ_USER_ID = B.USER_ID AND B.DEL_YN = 'N'
                    LEFT JOIN TB_MGZN D9 ON B.MGZN_ID = D9.MGZN_ID AND D9.DEL_YN = 'N'
                    LEFT JOIN TB_COMM_CD C ON C.CD_TYP_ID = 'CT00000002' AND B.mgzn_pos_cd = C.CD_ID                    
                    LEFT JOIN TB_STYLE_LIST_USER E ON A.REQ_USER_SE_CD = 'RUS002' AND A.REQ_USER_ID = E.USER_ID AND E.DEL_YN = 'N'
                    LEFT JOIN TB_COMM_CD F ON F.CD_TYP_ID = 'CT00000019' AND E.STYLE_LIST_POS_CD = F.CD_ID
                    LEFT JOIN TB_MGZN_USER G ON A.target_id_type = 'RUS001' AND A.target_id = G.USER_ID 
                    LEFT JOIN TB_MGZN D1 ON G.MGZN_ID = D1.MGZN_ID AND D1.DEL_YN = 'N'
                    LEFT JOIN TB_STYLE_LIST_USER H ON A.target_id_type = 'RUS002' AND A.target_id = H.USER_ID
                    LEFT JOIN TB_MGZN D2 ON H.MGZN_ID = D2.MGZN_ID AND D2.DEL_YN = 'N'
                    LEFT JOIN TB_BRAND_USER I ON A.target_id = I .USER_ID
                    LEFT JOIN TB_COMM_CD C2 ON C2.CD_TYP_ID = 'CT00000012' AND I.brand_pos_cd = C2.CD_ID
                    LEFT JOIN TB_COMM_CD C3 ON C3.CD_TYP_ID = 'CT00000002' AND G.MGZN_POS_CD = C3.CD_ID
                    LEFT JOIN TB_COMM_CD C4 ON C4.CD_TYP_ID = 'CT00000019' AND H.STYLE_LIST_POS_CD = C4.CD_ID
                GROUP BY A.DATE,A.showroom_no 
                ORDER BY A.DATE,A.showroom_no 
            ) AZ 
            GROUP BY AZ.date 
            ORDER BY AZ.date 
    </select>

    <!--
        내 프로필 정보 수정
        /brand/my-profile PUT
    -->
    <update id="UPDATE.MY.PROFILE">
        UPDATE TB_BRAND_USER
        SET
            USER_NM = #{user_nm}
            , BRAND_POS_CD = #{brand_pos_cd}
            , ADRES = #{adres}
            , ADRES_DETAIL = #{adres_detail}
            , POST_NO = #{post_no}
            , PHONE_NO = #{phone_no}
            , TEAM_USER_ID = #{team_user_id}
            , IMG_URL_ADRES = #{img_url_adres}
        WHERE USER_ID = #{user_id} AND DEL_YN='N'
    </select>

    <!--
        쇼룸 생성
        /brand/showroom POST
    -->
    <insert id="INSERT.SHOWROOM">
        INSERT INTO TB_SHOWROOM
        (
            SHOWROOM_NM
            , BRAND_ID
            , BRAND_USER_NO
            , SEASON_YEAR
            , SEASON_SE_CD
            , MFRC_SAMPLE_YN
            , SHOW_YN
        )
        VALUES
        (
            #{showroom_nm}
            , ( SELECT L.BRAND_ID FROM TB_BRAND_USER L WHERE L.USER_ID = #{user_id} LIMIT 1 )
            , ( SELECT M.BRAND_USER_NO FROM TB_BRAND_USER M WHERE M.USER_ID = #{user_id} LIMIT 1 )
            , #{season_year}
            , #{season_cd_id}
            , #{mfrc_sample_yn}
            , #{show_yn}
        )
        RETURNING SHOWROOM_NO
    </insert>

    <!--
        쇼룸이 요청에 있는지 확인
        /brand/showroom PUT
    -->

    <select id="SELECT.SHOWROOM.IN.REQ">
        SELECT EXISTS
        (
            SELECT 1 FROM TB_REQ_SHOWROOM WHERE SHOWROOM_NO=#{showroom_no} AND DEL_YN='N'
        ) AS VALID_DELETE
    </select>

    <!--
        쇼룸이 룩북에 있는지 확인
        /brand/showroom PUT
    -->
    <select id="SELECT.SHOWROOM.IN.LOOKBOOK">       
        SELECT EXISTS
        (
            SELECT 1 FROM TB_LOOKBOOK_SHOWROOM WHERE SHOWROOM_NO=#{showroom_no} AND DEL_YN='N'
        ) AS VALID_DELETE
    </select>

    <!--
        쇼룸 삭제
        /brand/showroom PUT
    -->
    <delete id="DELETE.SHOWROOM">
        WITH DELETE_SHOWROOM AS
        (
            UPDATE TB_SHOWROOM  SET DEL_YN='Y' WHERE SHOWROOM_NO=#{showroom_no}
        )
        , DELETE_SHOWROOM_SAMPLE AS
        (
            UPDATE TB_SHOWROOM_SAMPLE
            SET DEL_YN='Y'
            WHERE SHOWROOM_NO=#{showroom_no}
            RETURNING SAMPLE_NO
        )
        , DELETE_SAMPLE AS
        (
            UPDATE TB_SAMPLE
            SET DEL_YN='Y'
            WHERE SAMPLE_NO IN (SELECT SAMPLE_NO FROM DELETE_SHOWROOM_SAMPLE)
        )
        UPDATE TB_SAMPLE_IMG
        SET DEL_YN='Y'
        WHERE  SAMPLE_NO IN (SELECT SAMPLE_NO FROM DELETE_SHOWROOM_SAMPLE)
    </delete>

    <!--
        샘플 생성
        /brand/showroom POST
    -->
    <insert id="INSERT.SAMPLE">
        WITH INSERT_SAMPLE AS
        (
            INSERT INTO TB_SAMPLE
            (
               SAMPLE_NM
                , SAMPLE_SEX_SE_CD
                , BUYING_LIST
                , COLOR_LIST
                , MTRQLT_SE_CD
                , SIZE_CD
                , SIZE_DIRECT_INPUT
                , SAMPLE_CATGRY_MIDDLE_CL_CD
                , SAMPLE_CATGRY_DIRECT_INPUT
                , WRHOUSNG_YN
                , ETC_MATTER
                , SKU
                , CAPTION_ENGLISH
                , CAPTION_KOREAN
                , BRAND_ID
                , BRAND_USER_NO
                , PRICE
                , STILL_LIFE_IMG_YN
                , SAMPLE_IMG_YN
                , SAMPLE_CATGRY_LRGE_CL_CD
            )
            VALUES
            (
                #{sample_nm}
                , #{gender_cd_id}
                , ARRAY[<foreach collection="buying_cd_id" item="ID" separator=",">
                        #{ID}
                    </foreach>]::BPCHAR[]
                , ARRAY[<foreach collection="color_cd_id" item="ID" separator=",">
                    #{ID}
                </foreach>]::BPCHAR[]
                , #{material_cd_id}
                , #{size_cd_id}
                , #{size_direct_input}
                , #{sample_catgry_middle_cl_cd}
                , #{sample_catgry_direct_input}
                , #{wrhousng_yn}
                , #{etc}
                , #{sku}
                , #{caption_english}
                , #{caption_korean}
                , (
                    SELECT L.BRAND_ID  FROM TB_BRAND_USER L WHERE L.USER_ID = #{user_id} LIMIT 1
                )
                , (
                    SELECT M.BRAND_USER_NO FROM TB_BRAND_USER M WHERE M.USER_ID = #{user_id} LIMIT 1
                )
                , #{price}
                , #{still_life_img_yn}
                , #{sample_img_yn}
                , #{sample_catgry_lrge_cl_cd}
            )
            RETURNING SAMPLE_NO
        )
        , INSERT_SHOWROOM_SAMPLE AS
        (
            INSERT INTO TB_SHOWROOM_SAMPLE
            (SHOWROOM_NO, SAMPLE_NO)
            VALUES
            (
                #{showroom_no}
                , (SELECT SAMPLE_NO FROM INSERT_SAMPLE LIMIT 1)
            )
        )
        INSERT INTO TB_SAMPLE_IMG
        (
            SAMPLE_NO
            , IMG_URL_ADRES
            , IMG_TYPE
            , MAIN_YN
            , SHOWROOM_MAIN_YN
        )
        SELECT
            (SELECT SAMPLE_NO FROM INSERT_SAMPLE LIMIT 1)
            , T.URL
            , T.IMG_TYPE
            , T.MAIN_YN
            , T.SHOWROOM_MAIN_YN
        FROM
        (
            VALUES ${img_list}
        ) T(URL, IMG_TYPE, MAIN_YN, SHOWROOM_MAIN_YN)
        RETURNING SAMPLE_NO
    </insert>

    <!--
        쇼룸 수정
        /brand/showroom/:showroom_no PUT
    -->
    <update id="UPDATE.SHOWROOM">
       WITH DELETE_SAMPLE AS
        (
            UPDATE TB_SAMPLE
            SET
                DEL_YN='Y'
            WHERE 1=1
                <if test="delete_sample_no_list.length != 0">
                AND SAMPLE_NO IN
                (
                    SELECT X.SAMPLE_NO
                    FROM TB_SHOWROOM_SAMPLE X
                    WHERE 1=1
                        AND X.SHOWROOM_NO=#{showroom_no}
                        AND X.DEL_YN='N'
                )
                AND SAMPLE_NO IN
                (
                    <foreach collection="delete_sample_no_list" item="ID" separator=",">
                        #{ID}
                    </foreach>
                )
                </if>
                <if test="delete_sample_no_list.length==0">
                    AND 1=2
                </if>
        )
        , REMOVE_IMG AS
        (
            UPDATE TB_SAMPLE_IMG
            SET
                DEL_YN = 'Y'
            WHERE 1=1
                <if test="delete_sample_no_list.length!=0">
                AND SAMPLE_NO IN
                (
                    SELECT Y.SAMPLE_NO
                    FROM TB_SHOWROOM_SAMPLE Y
                    WHERE 1=1
                        AND Y.SHOWROOM_NO=#{showroom_no}
                        AND Y.DEL_YN='N'
                )
                AND SAMPLE_NO IN
                (
                    <foreach collection="delete_sample_no_list" item="ID" separator=",">
                        #{ID}
                    </foreach>
                )
                </if>
                <if test="delete_sample_no_list.length==0">
                    AND 1=2
                </if>
        )
        , DELETE_SHOWROOM_SAMPLE AS
        (
            UPDATE TB_SHOWROOM_SAMPLE
            SET
                DEL_YN='Y'
            WHERE 1=1
                <if test="delete_sample_no_list.length!=0">
                AND SHOWROOM_NO=#{showroom_no}
                AND SAMPLE_NO IN
                (
                    <foreach collection="delete_sample_no_list" item="ID" separator=",">
                        #{ID}
                    </foreach>
                )
                </if>
                <if test="delete_sample_no_list.length==0">
                    AND 1=2
                </if>
        )
        UPDATE TB_SHOWROOM
        SET
            SHOWROOM_NM = #{showroom_nm}
            , SEASON_YEAR = #{season_year}
            , SEASON_SE_CD = #{season_cd_id}
            , MFRC_SAMPLE_YN = #{mfrc_sample_yn}
            , SHOW_YN = #{show_yn}
            , REPLACEMENT_SHOWROOM = #{replacement_showroom}
        WHERE 1=1
            AND SHOWROOM_NO = #{showroom_no}
            AND DEL_YN='N'
    </update>

    <!--
        쇼룸의 샘플 수정
        /brand/showroom/:showroom_no PUT
        , SAMPLE_COLOR_SE_CD = #{color_cd_id}
    -->
    <update id="UPDATE.SAMPLE">
        WITH UPDATE_SAMPLE AS
        (
            UPDATE TB_SAMPLE
            SET
                SAMPLE_NM = #{sample_nm}
                , SAMPLE_SEX_SE_CD = #{gender_cd_id}
                , BUYING_LIST = ARRAY[<foreach collection="buying_cd_id" item="ID" separator=",">
                    #{ID}
                </foreach>]::BPCHAR[]
                , COLOR_LIST = ARRAY[<foreach collection="color_cd_id" item="ID" separator=",">
                    #{ID}
                </foreach>]::BPCHAR[]                
                , MTRQLT_SE_CD = #{material_cd_id}
                , SIZE_CD = #{size_cd_id}
                , SIZE_DIRECT_INPUT = #{size_direct_input}
                , SAMPLE_CATGRY_MIDDLE_CL_CD = #{sample_catgry_middle_cl_cd}
                , SAMPLE_CATGRY_LRGE_CL_CD = #{sample_catgry_lrge_cl_cd}
                , SAMPLE_CATGRY_DIRECT_INPUT = #{sample_catgry_direct_input}
                , WRHOUSNG_YN = #{wrhousng_yn}
                , ETC_MATTER = #{etc}
                , SKU = #{sku}
                , CAPTION_ENGLISH = #{caption_english}
                , CAPTION_KOREAN = #{caption_korean}
                , SAMPLE_IMG_YN=#{sample_img_yn}
                , STILL_LIFE_IMG_YN=#{still_life_img_yn}
                , PRICE = #{price}                
            WHERE SAMPLE_NO = #{sample_no} AND DEL_YN='N'
            RETURNING SAMPLE_NO
        )
        , DELETE_INITIAL_IMG AS
        (
            UPDATE TB_SAMPLE_IMG SET DEL_YN='Y' WHERE SAMPLE_NO=#{sample_no}
        )
        INSERT INTO TB_SAMPLE_IMG
        (
            SAMPLE_NO
            , IMG_URL_ADRES
            , IMG_TYPE
            , MAIN_YN
            , SHOWROOM_MAIN_YN
        )
        SELECT
            (SELECT SAMPLE_NO FROM UPDATE_SAMPLE LIMIT 1)
            , T.URL
            , T.IMG_TYPE
            , T.MAIN_YN
            , T.SHOWROOM_MAIN_YN
        FROM
        (
            VALUES ${img_list}
        ) T(URL, IMG_TYPE, MAIN_YN, SHOWROOM_MAIN_YN)
        RETURNING SAMPLE_NO
    </insert>

    <!--
        쇼룸 조회
        /brand/showroom/:showroom_no GET
    -->
    <select id="SELECT.SHOWROOM">
        SELECT
            A.SHOWROOM_NM
            , A.SEASON_YEAR
            , A.SEASON_SE_CD AS SEASON_CD_ID
            , SEASON.CD_NM AS SEASON_TEXT
            , A.MFRC_SAMPLE_YN            
            , A.SHOW_YN
            , A.REPLACEMENT_SHOWROOM_NO
            , A.REPLACEMENT_SHOWROOM_NM
            , A.replacement_season_year
            , A.replacement_season_se_id
            , (
                SELECT
                    T.SHOWROOM_NO
                FROM
                (
                    SELECT
                        A.SHOWROOM_NO
                        , COUNT(B.*) AS REQ_COUNT
                    FROM
                    (
                        SELECT SHOWROOM_NO
                        FROM TB_SHOWROOM A
                        WHERE 1=1
                            AND BRAND_ID = #{brand_id}
                            AND SEASON_YEAR = (SELECT SEASON_YEAR FROM TB_SHOWROOM WHERE SHOWROOM_NO = #{showroom_no} LIMIT 1)
                            AND SEASON_SE_CD= (SELECT SEASON_SE_CD FROM TB_SHOWROOM WHERE SHOWROOM_NO = #{showroom_no} LIMIT 1)
                            <if test="share_uuid">
                            AND EXISTS
                            (
                                SELECT 1
                                FROM TB_LOOKBOOK_SHOWROOM B
                                WHERE 1=1
                                    AND B.DEL_YN = 'N'
                                    AND B.LOOKBOOK_NO =
                                    (
                                        SELECT LOOKBOOK_NO
                                        FROM TB_LOOKBOOK
                                        WHERE 1=1
                                            AND SHARE_UUID = #{share_uuid}
                                    )
                                    AND A.SHOWROOM_NO = B.SHOWROOM_NO
                            )
                            </if>
                            <if test="lookbook_no">
                            AND EXISTS
                            (
                                SELECT 1 FROM TB_LOOKBOOK_SHOWROOM B WHERE B.LOOKBOOK_NO = #{lookbook_no} AND A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
                            )
                            </if>
                            AND BRAND_ID = A.BRAND_ID
                            AND SEASON_YEAR = A.SEASON_YEAR
                            AND SEASON_SE_CD = A.SEASON_SE_CD
                            AND DEL_YN = 'N'
                    ) A
                    LEFT JOIN TB_REQ_SHOWROOM B ON A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
                    GROUP BY A.SHOWROOM_NO
                ) T
                WHERE 1=1
                    AND T.REQ_COUNT >= (SELECT COUNT(1) FROM TB_REQ_SHOWROOM WHERE SHOWROOM_NO = #{showroom_no} AND DEL_YN = 'N')
                    AND CASE
                        WHEN T.REQ_COUNT = (SELECT COUNT(1) FROM TB_REQ_SHOWROOM WHERE SHOWROOM_NO = #{showroom_no} AND DEL_YN = 'N')
                        THEN T.SHOWROOM_NO > #{showroom_no}
                        ELSE TRUE
                    END
                ORDER BY T.REQ_COUNT ASC, T.SHOWROOM_NO ASC
                LIMIT 1
            ) AS PREV_SHOWROOM_NO
            , (
                SELECT
                    T.SHOWROOM_NO
                FROM
                (
                    SELECT
                        A.SHOWROOM_NO
                        , COUNT(B.*) AS REQ_COUNT
                    FROM
                    (
                        SELECT SHOWROOM_NO
                        FROM TB_SHOWROOM A
                        WHERE 1=1
                            AND SEASON_YEAR = (SELECT SEASON_YEAR FROM TB_SHOWROOM WHERE SHOWROOM_NO = #{showroom_no} LIMIT 1)
                            AND SEASON_SE_CD = (SELECT SEASON_SE_CD FROM TB_SHOWROOM WHERE SHOWROOM_NO = #{showroom_no} LIMIT 1)
                            AND BRAND_ID = #{brand_id}
                            <if test="share_uuid">
                            AND EXISTS
                            (
                                SELECT 1
                                FROM TB_LOOKBOOK_SHOWROOM B
                                WHERE B.DEL_YN = 'N'
                                    AND B.LOOKBOOK_NO =
                                    (
                                        SELECT LOOKBOOK_NO 
                                        FROM TB_LOOKBOOK
                                        WHERE SHARE_UUID = #{share_uuid}
                                    )
                                    AND A.SHOWROOM_NO = B.SHOWROOM_NO
                            )
                            </if>
                            <if test="lookbook_no">
                            AND EXISTS
                            (
                                SELECT 1
                                FROM TB_LOOKBOOK_SHOWROOM B
                                WHERE B.DEL_YN = 'N' AND B.LOOKBOOK_NO = #{lookbook_no} AND A.SHOWROOM_NO = B.SHOWROOM_NO
                            )
                            </if>
                            AND BRAND_ID = A.BRAND_ID
                            AND SEASON_YEAR = A.SEASON_YEAR
                            AND SEASON_SE_CD = A.SEASON_SE_CD
                            AND DEL_YN = 'N'
                    ) A
                    LEFT JOIN TB_REQ_SHOWROOM B ON B.DEL_YN = 'N' AND A.SHOWROOM_NO = B.SHOWROOM_NO
                    GROUP BY A.SHOWROOM_NO
                ) T
                WHERE 1=1
                    AND T.REQ_COUNT &lt;= (SELECT COUNT(1) FROM TB_REQ_SHOWROOM WHERE SHOWROOM_NO = #{showroom_no} AND DEL_YN = 'N')
                    AND CASE
                        WHEN T.REQ_COUNT = (SELECT COUNT(1) FROM TB_REQ_SHOWROOM WHERE SHOWROOM_NO = #{showroom_no} AND DEL_YN = 'N')
                        THEN T.SHOWROOM_NO &lt; #{showroom_no}
                        ELSE TRUE
                    END
                ORDER BY T.REQ_COUNT DESC, T.SHOWROOM_NO DESC
                LIMIT 1
            ) AS NEXT_SHOWROOM_NO
        FROM
        (
            SELECT 
                TS.*,TS2.SHOWROOM_NO as REPLACEMENT_SHOWROOM_NO,TS2.SHOWROOM_NM as REPLACEMENT_SHOWROOM_NM
                ,TS2.season_year as replacement_season_year,B.cd_nm  as replacement_season_se_id
            FROM 
                TB_SHOWROOM AS TS 
                LEFT JOIN TB_SHOWROOM AS TS2 ON TS.REPLACEMENT_SHOWROOM = TS2.SHOWROOM_NO AND TS2.SHOW_YN = 'Y' AND TS2.DEL_YN = 'N' 
                LEFT JOIN TB_COMM_CD B ON TS2.season_se_cd = B.CD_ID AND B.CD_TYP_ID = 'CT00000008' AND ( B.BRAND_ID = '' OR  B.BRAND_ID = TS2.BRAND_ID ) AND B.DEL_YN = 'N'
            WHERE
                TS.SHOWROOM_NO = #{showroom_no} 
                <if test="is_all != 'true'">
                    AND TS.SHOW_YN = 'Y'
                </if>
        ) A
        LEFT JOIN TB_COMM_CD SEASON ON 
        SEASON.CD_ID = A.SEASON_SE_CD AND ( SEASON.BRAND_ID = '' OR SEASON.BRAND_ID = #{brand_id} )
        AND SEASON.DEL_YN = 'N'
        AND SEASON.CD_TYP_ID = 'CT00000008'
    </select>

    <!--
        샘플 조회
        /brand/showroom/:showroom_no GET
        , C.SAMPLE_COLOR_SE_CD AS COLOR_CD_ID
    -->
    <select id="SELECT.SAMPLE.LIST">
        SELECT
            C.SAMPLE_IMG_YN
            , C.STILL_LIFE_IMG_YN
            , (
                SELECT
                    JSONB_AGG(
                        JSONB_BUILD_OBJECT(
                            'url'
                            , IMG.IMG_URL_ADRES
                            , 'full_url'
                            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || IMG.IMG_URL_ADRES
                            , 'img_type'
                            , IMG.IMG_TYPE
                            , 'main_yn'
                            , IMG.MAIN_YN
                            , 'showroom_main_yn'
                            , IMG.SHOWROOM_MAIN_YN
                        )
                    )
                FROM TB_SAMPLE_IMG IMG
                WHERE 1=1
                    AND IMG.SAMPLE_NO = C.SAMPLE_NO
                    AND IMG.DEL_YN = 'N'
                    AND IMG.IMG_URL_ADRES IS NOT NULL
                    AND IMG.IMG_URL_ADRES!=''
            ) AS SAMPLE_IMAGE_LIST
            , C.SAMPLE_NM
            , C.SAMPLE_SEX_SE_CD AS GENDER_CD_ID
            , GENDER.CD_NM AS GENDER_TEXT
            , C.BUYING_LIST AS BUYING_CD_ID
            , (
                SELECT ARRAY_AGG(BUYING.CD_NM) FROM TB_COMM_CD BUYING WHERE BUYING.CD_TYP_ID = 'CT00000015' AND BUYING.CD_ID = ANY(C.BUYING_LIST) AND BUYING.DEL_YN = 'N'
            ) AS BUYING_TEXT
            , C.COLOR_LIST AS COLOR_CD_ID
            , (
                SELECT ARRAY_AGG(COLORING.CD_NM) FROM TB_COMM_CD COLORING WHERE COLORING.CD_TYP_ID = 'CT00000014' AND COLORING.CD_ID = ANY(C.COLOR_LIST) AND COLORING.DEL_YN = 'N'
            ) AS COLOR_TEXT            
            , C.MTRQLT_SE_CD AS MATERIAL_CD_ID
            , MATERIAL.CD_NM AS MATERIAL_TEXT
            , C.SIZE_CD AS SIZE_CD_ID
            , SIZE.SIZE_NM AS SIZE_TEXT
            , C.SIZE_DIRECT_INPUT
            , C.SAMPLE_CATGRY_MIDDLE_CL_CD
            , CATEGORY_MIDDLE.SAMPLE_CATGRY_MIDDLE_CL_NM AS CATEGORY_MIDDLE_TEXT
            , CASE WHEN C.SAMPLE_CATGRY_LRGE_CL_CD IS NOT NULL THEN C.SAMPLE_CATGRY_LRGE_CL_CD ELSE CATEGORY_LARGE.SAMPLE_CATGRY_LRGE_CL_CD END AS SAMPLE_CATGRY_LRGE_CL_CD
            , CATEGORY_LARGE.SAMPLE_CATGRY_LRGE_CL_NM AS CATEGORY_LARGE_TEXT
            , C.SAMPLE_CATGRY_DIRECT_INPUT
            , C.WRHOUSNG_YN AS IN_YN
            , C.ETC_MATTER AS ETC
            , C.SKU
            , C.CAPTION_ENGLISH
            , C.CAPTION_KOREAN
            , C.BRAND_ID
            , C.BRAND_USER_NO
            , C.PRICE
            , C.SAMPLE_NO
            , (CASE WHEN (TRS.req_status_cd = 'RS0003' or TRS.req_status_cd = 'RS0005' or TRS.req_status_cd = 'RS0006' ) THEN '대여중' ELSE '신청가능' END ) AS now_req_status_nm
            ,TRS.return_prearnge_dt,TRS.duty_recpt_dt
        FROM
        (
            SELECT A.SHOWROOM_NO FROM TB_SHOWROOM A WHERE A.SHOWROOM_NO = #{showroom_no} AND A.DEL_YN = 'N'   
        ) A
        INNER JOIN TB_SHOWROOM_SAMPLE B ON A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
        INNER JOIN TB_SAMPLE C ON B.SAMPLE_NO = C.SAMPLE_NO AND C.DEL_YN = 'N'
        INNER JOIN TB_COMM_CD GENDER ON GENDER.CD_TYP_ID = 'CT00000013' AND GENDER.CD_ID = C.sample_sex_se_cd AND GENDER.DEL_YN = 'N'
        LEFT JOIN TB_COMM_CD COLOR ON COLOR.CD_TYP_ID = 'CT00000014' AND COLOR.CD_ID = C.SAMPLE_COLOR_SE_CD AND COLOR.DEL_YN = 'N'
        LEFT JOIN TB_COMM_CD MATERIAL ON MATERIAL.CD_TYP_ID = 'CT00000009' AND MATERIAL.CD_ID = C.mtrqlt_se_cd AND MATERIAL.DEL_YN = 'N'
        LEFT JOIN TB_SAMPLE_CATGRY_MIDDL_CL CATEGORY_MIDDLE ON 1=1
            AND CATEGORY_MIDDLE.SAMPLE_CATGRY_MIDDLE_CL_CD = C.SAMPLE_CATGRY_MIDDLE_CL_CD
            AND CATEGORY_MIDDLE.DEL_YN = 'N'
        LEFT JOIN TB_SAMPLE_CATGRY_LRGE_CL CATEGORY_LARGE
        ON 1=1
            AND CASE
                WHEN C.SAMPLE_CATGRY_LRGE_CL_CD IS NOT NULL
                THEN CATEGORY_LARGE.SAMPLE_CATGRY_LRGE_CL_CD=C.SAMPLE_CATGRY_LRGE_CL_CD
                ELSE CATEGORY_LARGE.SAMPLE_CATGRY_LRGE_CL_CD = CATEGORY_MIDDLE.SAMPLE_CATGRY_LRGE_CL_CD
            END
            AND CATEGORY_LARGE.DEL_YN = 'N'
        LEFT JOIN TB_SIZE SIZE ON SIZE.SIZE_CD = C.SIZE_CD AND SIZE.DEL_YN = 'N'
        LEFT JOIN ( 
            SELECT 
                trs.showroom_no,trs.req_status_cd ,tr.return_prearnge_dt,tr.duty_recpt_dt
            FROM 
                tb_req_showroom as trs inner join tb_req as tr on trs.req_no = tr.req_no  
            WHERE 
                trs.showroom_no = #{showroom_no}  and trs.del_yn ='N' and tr.brand_cnfirm_dt is not null
                and tr.return_prearnge_dt &gt; (NOW() AT TIME ZONE 'Asia/Seoul') 
                and tr.duty_recpt_dt &lt; (NOW() AT TIME ZONE 'Asia/Seoul') 
            LIMIT 1
        ) as TRS on A.showroom_no = TRS.showroom_no 
    </select>
    <!--
        시즌 목록 조회
        /brand/showroom-list GET
    -->
    <select id="SELECT.SHOWROOM.SEASON.LIST">
        /* SELECT.SHOWROOM.SEASON.LIST*/
        SELECT
            A.SEASON_YEAR
            , A.SEASON_CD_ID
            , SEASON.CD_NM AS SEASON_TEXT
            , SEASON.CD_SIMPLE_NM AS SEASON_SIMPLE_TEXT
        FROM
        (
            SELECT DISTINCT
                A.SEASON_YEAR, A.SEASON_SE_CD AS SEASON_CD_ID
            FROM TB_SHOWROOM A
            WHERE 1=1
                <if test="brand_id && brand_id != 'all' ">
                    AND A.BRAND_ID = #{brand_id}
                </if>
                AND A.DEL_YN = 'N'
                <if test="is_magazine">
                    AND A.SHOW_YN = 'Y'
                </if>
                <if test="lookbook_no">
                AND EXISTS
                (
                    SELECT 1 FROM TB_LOOKBOOK_SHOWROOM B WHERE B.LOOKBOOK_NO = #{lookbook_no} AND A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
                )
                </if>
                AND EXISTS
                (
                    SELECT 1
                    FROM TB_SHOWROOM_SAMPLE C
                    WHERE 1=1
                        AND A.SHOWROOM_NO = C.SHOWROOM_NO
                        AND C.DEL_YN = 'N'
                        AND EXISTS
                        (
                            SELECT 1
                            FROM TB_SAMPLE D
                            WHERE 1=1
                                AND C.SAMPLE_NO = D.SAMPLE_NO
                                AND D.DEL_YN = 'N'
                                <if test="gender">
                                AND D.SAMPLE_SEX_SE_CD IN ${gender}
                                </if>
                                <if test="category">
                                AND D.SAMPLE_CATGRY_MIDDLE_CL_CD IN ${category}
                                </if>
                                <if test="filtercolor">
                                 AND exists (
                                    SELECT * FROM UNNEST(D.COLOR_LIST) 
                                    WHERE UNNEST = ANY(
                                        ARRAY[<foreach collection="filtercolor" item="ID" separator=",">
                                            #{ID}
                                        </foreach>]
                                    )
                                )
                                </if>
                                <if test="material">
                                AND D.MTRQLT_SE_CD IN ${material}
                                </if>
                                <if test="size">
                                AND ( D.SIZE_CD IN ${size} OR D.SIZE_DIRECT_INPUT IN ${size} )
                                </if>
                                <if test="wrhousng_yn != null">
                                AND D.WRHOUSNG_YN = #{wrhousng_yn}
                                </if>
                                <if test="still_life_img_yn != null">
                                AND D.STILL_LIFE_IMG_YN = #{still_life_img_yn}
                                </if>
                        )
                )
                <if test = "available_start_dt and available_end_dt && brand_id && brand_id != 'all'">
                AND NOT EXISTS
                (
                    SELECT 1
                    FROM TB_BRAND_HOLIDAY E
                    WHERE E.BRAND_ID = #{brand_id} AND E.holiday_utc BETWEEN #{available_start_dt}::BIGINT AND #{available_end_dt}::BIGINT AND E.DEL_YN = 'N'
                )
                </if>
        ) A
        LEFT JOIN TB_COMM_CD SEASON ON A.SEASON_CD_ID = SEASON.CD_ID
            <if test="brand_id && brand_id != 'all' ">
            AND ( SEASON.BRAND_ID = '' OR SEASON.BRAND_ID = #{brand_id} )
            </if>
            AND SEASON.CD_TYP_ID = 'CT00000008'
            AND SEASON.DEL_YN = 'N'
        ORDER BY
            A.SEASON_YEAR DESC
            , SEASON.ORDER_VALUE DESC
    </select>

    <!--
        sendout 상세조회
        /brand/sendout-detail/:req_no
        2021.11.24 노성남 제외
        AND
        ( TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
        AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005')
        AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.return_prearnge_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005')
    -->
    <select id="SELECT.SENDOUT.DETAIL">
        SELECT
            A.REQ_NO
            , I.MGZN_NM
            , H.POSI_COMPY_NM AS STYLIST_COMPY_NM
            , CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN 'MAGAZINE' WHEN A.REQ_USER_SE_CD = 'RUS002' THEN 'STYLIST' ELSE '' END AS USER_TYPE
            , CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN G.USER_NM WHEN A.REQ_USER_SE_CD = 'RUS002' THEN H.USER_NM ELSE '' END AS REQ_USER_NM
            , CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN J.USER_NM WHEN A.REQ_USER_SE_CD = 'RUS002' THEN K.USER_NM ELSE '' END AS CONTACT_USER_NM
            , CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN J.PHONE_NO WHEN A.REQ_USER_SE_CD = 'RUS002' THEN K.PHONE_NO ELSE '' END AS CONTACT_USER_PHONE
            , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT))::BIGINT AS LOANING_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_PREARNGE_BEGIN_DT))::BIGINT AS SHOOTING_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT))::BIGINT AS RETURNING_DATE
            , CONCAT(L.DLVY_ADRES_NM,' ',L.adres_detail) AS STUDIO
            , M.USER_NM AS FROM_USER_NM
            , M.PHONE_NO AS FROM_USER_PHONE
            , N.BRAND_NM
            , CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN G.USER_NM WHEN A.REQ_USER_SE_CD = 'RUS002' THEN H.USER_NM ELSE '' END AS TO_USER_NM
            , CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN G.PHONE_NO WHEN A.REQ_USER_SE_CD = 'RUS002' THEN H.PHONE_NO ELSE '' END AS TO_USER_PHONE
            , JSONB_AGG(JSONB_BUILD_OBJECT(
                'showroom_no'
                , C.SHOWROOM_NO
                , 'showroom_nm'
                , C.SHOWROOM_NM
                , 'sample_list'
                , (
                    SELECT
                        JSONB_AGG(JSONB_BUILD_OBJECT(
                            'sample_no'
                            , N.SAMPLE_NO
                            , 'price'
                            , N.PRICE
                            , 'category'
                            , P.SAMPLE_CATGRY_MIDDLE_CL_NM
                            , 'image_list'
                            , (
                                SELECT 
                                    ARRAY_AGG(CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', IMG_URL_ADRES))
                                FROM 
                                    TB_SAMPLE_IMG Q1
                                WHERE 
                                    Q1.SAMPLE_NO = N.SAMPLE_NO AND Q1.DEL_YN = 'N'
                            )
                            ,'send_user_info'
                            , CASE WHEN Q.sendout_userid_type = 'RUS001' THEN (
                                SELECT JSONB_AGG(JSONB_BUILD_OBJECT('sendout_id',Q.sendout_userid,'sendout_userid_type','RUS001','user_nm',XX.user_nm,'phone_no',XX.phone_no,'mgzn_nm', XX2.mgzn_nm,'position',C.CD_NM)) as user_info 
                                FROM tb_mgzn_user  AS XX INNER JOIN tb_mgzn as XX2 on XX.mgzn_id = XX2.mgzn_id
                                LEFT JOIN TB_COMM_CD C ON XX.MGZN_POS_CD=C.CD_ID AND C.CD_TYP_ID='CT00000002' AND C.DEL_YN='N'
                                WHERE XX.user_id = Q.sendout_userid LIMIT 1 
                            )   ELSE (
                                SELECT JSONB_AGG(JSONB_BUILD_OBJECT('sendout_id',Q.sendout_userid,'sendout_userid_type','RUS000','user_nm',XX.user_nm,'phone_no',XX.phone_no,'mgzn_nm', XX2.brand_nm,'position',C.CD_NM)) as user_info 
                                FROM tb_brand_user AS XX  INNER JOIN tb_brand as XX2 on XX.brand_id = XX2.brand_id
                                LEFT JOIN TB_COMM_CD C ON XX.BRAND_POS_CD=C.CD_ID AND C.CD_TYP_ID='CT00000012' AND C.DEL_YN='N'
                                WHERE XX.user_id = Q.sendout_userid LIMIT 1 
                            ) END
                            ,'use_user_info'
                            , CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN (
                                SELECT JSONB_AGG(JSONB_BUILD_OBJECT('use_id',Q.pickup_userid,'use_userid_type','RUS001','user_nm',XX.user_nm,'phone_no',XX.phone_no,'position',C.CD_NM)) as user_info 
                                FROM tb_mgzn_user  AS XX 
                                LEFT JOIN TB_COMM_CD C ON XX.MGZN_POS_CD=C.CD_ID AND C.CD_TYP_ID='CT00000002' AND C.DEL_YN='N'
                                WHERE XX.user_id = Q.pickup_userid LIMIT 1 
                            )  ELSE (
                                SELECT JSONB_AGG(JSONB_BUILD_OBJECT('use_id',Q.pickup_userid,'use_userid_type','RUS000','user_nm',XX.user_nm,'phone_no',XX.phone_no,'position',C.CD_NM)) as user_info FROM tb_brand_user AS XX  LEFT JOIN TB_COMM_CD C ON XX.BRAND_POS_CD=C.CD_ID AND C.CD_TYP_ID='CT00000012' AND C.DEL_YN='N' WHERE XX.user_id = Q.pickup_userid LIMIT 1 
                            ) END
                            ,'return_user_info'
                            , CASE WHEN Q.return_userid_type = 'RUS001' THEN (
                                SELECT JSONB_AGG(JSONB_BUILD_OBJECT('return_id',Q.return_userid,'return_userid_type','RUS001','user_nm',XX.user_nm,'phone_no',XX.phone_no,'mgzn_nm', XX2.mgzn_nm,'position',C.CD_NM)) as user_info 
                                FROM tb_mgzn_user  AS XX INNER JOIN tb_mgzn as XX2 on XX.mgzn_id = XX2.mgzn_id
                                LEFT JOIN TB_COMM_CD C ON XX.MGZN_POS_CD=C.CD_ID AND C.CD_TYP_ID='CT00000002' AND C.DEL_YN='N'
                                WHERE XX.user_id = Q.return_userid LIMIT 1 
                            )  ELSE (
                                SELECT JSONB_AGG(JSONB_BUILD_OBJECT('return_id',Q.return_userid,'return_userid_type','RUS000','user_nm',XX.user_nm,'phone_no',XX.phone_no,'mgzn_nm', XX2.brand_nm,'position',C.CD_NM)) as user_info 
                                FROM tb_brand_user AS XX  INNER JOIN tb_brand as XX2 on XX.brand_id = XX2.brand_id
                                LEFT JOIN TB_COMM_CD C ON XX.BRAND_POS_CD=C.CD_ID AND C.CD_TYP_ID='CT00000012' AND C.DEL_YN='N'
                                WHERE XX.user_id = Q.return_userid LIMIT 1 
                            ) END 
                            , 'sendout_yn',Q.sendout_yn
                            , 'pickup_yn',Q.pickup_yn
                            , 'return_yn',Q.return_yn
                            , 'returncheck_yn',Q.returncheck_yn
                            , 'sendout_dt',Q.sendout_dt
                            , 'pickup_dt',Q.pickup_dt
                            , 'return_dt',Q.return_dt
                            , 'returncheck_dt',Q.returncheck_dt                           
                        ))
                    FROM
                    (
                        SELECT 
                            N.SAMPLE_NO, N.PRICE, N.SAMPLE_CATGRY_MIDDLE_CL_CD
                        FROM    
                            TB_SAMPLE N
                        WHERE 
                            N.SAMPLE_NO IN ( SELECT SAMPLE_NO FROM TB_SHOWROOM_SAMPLE O WHERE O.SHOWROOM_NO = C.SHOWROOM_NO AND O.DEL_YN = 'N' )
                            AND N.DEL_YN = 'N'
                    ) N
                    INNER JOIN TB_NEW_REQ_SAMPLE Q ON  N.SAMPLE_NO = Q.SAMPLE_NO AND Q.REQ_NO = A.REQ_NO AND Q.DEL_YN = 'N'
                    LEFT JOIN TB_SAMPLE_CATGRY_MIDDL_CL P ON N.SAMPLE_CATGRY_MIDDLE_CL_CD = P.SAMPLE_CATGRY_MIDDLE_CL_CD
                    WHERE  
                        B.REQ_STATUS_CD='RS0003' 
                        <if test="showroom_no">
                        AND Q.showroom_no IN  (
                            <foreach collection="showroom_no" item="sno" separator=",">
                                #{sno}
                            </foreach>
                        )
                        </if>
                        <if test="req_no_array">
                        AND Q.req_no IN  (
                            <foreach collection="req_no_array" item="rno" separator=",">
                                #{rno}
                            </foreach>
                        )
                        </if>
                )
            ) ORDER BY A.REQ_NO,C.SHOWROOM_NO) AS SHOWROOM_LIST
        FROM
        (
            SELECT
                A.REQ_NO
                , A.REQ_USER_SE_CD
                , A.DUTY_RECPT_DT
                , A.PHOTOGRF_PREARNGE_BEGIN_DT
                , A.RETURN_PREARNGE_DT
                , A.REQ_USER_ID
                , A.CONTACT_USER_ID
                , A.CNFIRM_BRAND_USER_NO
                , A.BRAND_ID
                , A.DLVY_ADRES_NO
            FROM TB_REQ A
            WHERE 1=1
                <!--AND REQ_NO = #{req_no}-->
                <if test="brand_id">
                AND A.BRAND_ID = #{brand_id}
                </if>
                <if test="mgzn_id">
                AND ( A.req_user_id = #{user_id} OR  A.contact_user_id = #{user_id} )
                </if>
                <if test="stylist_id">
                AND A.REQ_USER_ID = #{stylist_id}
                </if>
                AND A.DEL_YN = 'N'
                <if test="req_no">
                AND A.REQ_NO = #{req_no}
                </if>
                <if test="req_no_array">
                AND A.REQ_NO IN  (
                    <foreach collection="req_no_array" item="rno" separator=",">
                        #{rno}
                    </foreach>
                )
                </if>
                <if test="type == 'SENDOUT' and date and mgzn_id">
                AND A.REQ_NO IN (
                    SELECT Q9.REQ_NO
                    FROM TB_NEW_REQ_SAMPLE AS Q9
                    WHERE 
                        Q9.DEL_YN = 'N'
                        AND ( TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, Q9.sendout_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                        <if test="req_no">
                        AND Q9.REQ_NO = #{req_no}
                        </if>                        
                        <if test="req_no_array">
                        AND Q9.req_no IN  (
                            <foreach collection="req_no_array" item="rno" separator=",">
                                #{rno}
                            </foreach>
                        )
                        </if>
                )                
                </if>
                <if test="type == 'RETURN' and date and mgzn_id">
                AND A.REQ_NO IN (
                    SELECT Q9.REQ_NO
                    FROM TB_NEW_REQ_SAMPLE AS Q9
                    WHERE 
                        Q9.DEL_YN = 'N'
                        AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, Q9.return_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                        <if test="req_no">
                        AND Q9.REQ_NO = #{req_no}
                        </if>                        
                        <if test="req_no_array">
                        AND Q9.req_no IN  (
                            <foreach collection="req_no_array" item="rno" separator=",">
                                #{rno}
                            </foreach>
                        )
                        </if>
                )
                </if>
                
        ) A
        INNER JOIN TB_REQ_SHOWROOM B ON A.REQ_NO = B.REQ_NO AND B.DEL_YN = 'N'
        INNER JOIN TB_SHOWROOM C ON B.SHOWROOM_NO = C.SHOWROOM_NO AND C.DEL_YN = 'N'
        INNER JOIN TB_BRAND N ON A.BRAND_ID = N.BRAND_ID AND N.DEL_YN='N'
        LEFT JOIN TB_MGZN_USER G ON A.REQ_USER_ID = G.USER_ID AND A.REQ_USER_SE_CD = 'RUS001'
        LEFT JOIN TB_STYLE_LIST_USER H ON A.REQ_USER_ID = H.USER_ID AND A.REQ_USER_SE_CD = 'RUS002'
        LEFT JOIN TB_MGZN I ON G.MGZN_ID = I.MGZN_ID AND I.DEL_YN='N'
        LEFT JOIN TB_MGZN_USER J ON A.CONTACT_USER_ID = J.USER_ID AND A.REQ_USER_SE_CD = 'RUS001' AND A.CONTACT_USER_ID IS NOT NULL
        LEFT JOIN TB_STYLE_LIST_USER K ON A.CONTACT_USER_ID = K.USER_ID AND A.REQ_USER_SE_CD = 'RUS002' AND A.CONTACT_USER_ID IS NOT NULL
        LEFT JOIN TB_DLVY_ADRES L ON A.DLVY_ADRES_NO = L.DLVY_ADRES_NO AND L.DEL_YN = 'N'
        LEFT JOIN TB_BRAND_USER M ON A.CNFIRM_BRAND_USER_NO = M.BRAND_USER_NO
        GROUP BY
            A.REQ_NO
            , A.REQ_USER_SE_CD
            , G.USER_NM
            , H.USER_NM
            , J.USER_NM
            , K.USER_NM
            , J.PHONE_NO
            , K.PHONE_NO
            , A.PHOTOGRF_PREARNGE_BEGIN_DT
            , A.DUTY_RECPT_DT
            , A.RETURN_PREARNGE_DT
            , L.DLVY_ADRES_NM
            , L.adres_detail
            , M.USER_NM
            , M.PHONE_NO
            , G.PHONE_NO
            , H.PHONE_NO
            , I.MGZN_NM
            , H.POSI_COMPY_NM
            , N.BRAND_NM
    </select>

    <!--
        쇼룸 목록 조회
        /brand/showroom-list GET
    -->
    <select id="SELECT.SHOWROOM.LIST.ORIG">
        SELECT
            T.SHOWROOM_NO
            , T.SHOWROOM_NM
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || (
                T.IMG_URL_ADRES
            ) AS IMAGE_URL
            , (CURRENT_TIMESTAMP - T.SHOWROOM_REG_DT) &lt; INTERVAL '24 hour' AS IS_NEW
            , T.REQ_COUNT
            , T.TOTAL_COUNT
            , TRUE = ALL(
                SELECT WRHOUSNG_YN
                FROM TB_SAMPLE SAMPLE
                WHERE SAMPLE.DEL_YN = 'N' AND SAMPLE.SAMPLE_NO IN ( SELECT SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.DEL_YN = 'N' AND SS.SHOWROOM_NO = T.SHOWROOM_NO )
            ) AS ALL_IN_YN
            , (
                SELECT ARRAY_AGG(SAMPLE_CATGRY_MIDDLE_CL_NM)
                FROM TB_SAMPLE_CATGRY_MIDDL_CL CAT
                WHERE 1=1
                    AND CAT.DEL_YN = 'N'
                    AND CAT.SAMPLE_CATGRY_MIDDLE_CL_CD IN
                    (
                        SELECT SAMPLE_CATGRY_MIDDLE_CL_CD
                        FROM TB_SAMPLE SAMPLE
                        WHERE SAMPLE.DEL_YN = 'N' AND SAMPLE.SAMPLE_NO IN ( SELECT SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.DEL_YN = 'N' AND SS.SHOWROOM_NO = T.SHOWROOM_NO )
                    )
            ) AS CATEGORY_LIST
        FROM
        (
            SELECT
                A.SHOWROOM_NO
                , A.SHOWROOM_NM
                , A.SHOWROOM_REG_DT
                , A.TOTAL_COUNT
                , COUNT(B.*) AS REQ_COUNT
                , D.IMG_URL_ADRES
            FROM
            (
                SELECT
                    A.SHOWROOM_NO
                    , A.SHOWROOM_NM
                    , A.SHOWROOM_REG_DT
                    , COUNT(1) OVER() AS TOTAL_COUNT
                FROM TB_SHOWROOM A
                WHERE 1=1
                    <if test="brand_id">
                    AND A.BRAND_ID = #{brand_id}
                    </if>
                    <if test="season_year">
                    AND A.SEASON_YEAR = #{season_year}
                    AND A.SEASON_SE_CD = #{season_cd_id}
                    </if>
                    AND A.DEL_YN = 'N'
                    <if test="lookbook_no">
                    AND EXISTS
                    (
                        SELECT 1 FROM TB_LOOKBOOK_SHOWROOM B WHERE B.DEL_YN = 'N' AND B.LOOKBOOK_NO = #{lookbook_no} AND A.SHOWROOM_NO = B.SHOWROOM_NO
                    )
                    </if>
                    <if test="share_uuid">
                    AND EXISTS
                    (
                        SELECT 1
                        FROM TB_LOOKBOOK_SHOWROOM B
                        WHERE B.DEL_YN = 'N' AND LOOKBOOK_NO = ( SELECT LOOKBOOK_NO FROM TB_LOOKBOOK WHERE SHARE_UUID = #{share_uuid} ) AND A.SHOWROOM_NO = B.SHOWROOM_NO
                    )
                    </if>
                    AND EXISTS
                    (
                        SELECT 1
                        FROM TB_SAMPLE SAM
                        WHERE 1=1
                            AND SAM.SAMPLE_NO IN (
                                SELECT SS.SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.SHOWROOM_NO = A.SHOWROOM_NO AND SS.DEL_YN = 'N'
                            )
                            AND SAM.DEL_YN = 'N'
                            <if test="gender_cd_id">
                            AND SAM.SAMPLE_SEX_SE_CD = #{gender_cd_id}
                            </if>
                            <if test="category">
                            AND SAM.SAMPLE_CATGRY_MIDDLE_CL_CD IN ${category}
                            </if>
                            <if test="filtercolor">
                                AND exists (
                                SELECT * FROM UNNEST(SAM.COLOR_LIST) 
                                WHERE UNNEST = ANY(
                                    ARRAY[<foreach collection="filtercolor" item="ID" separator=",">
                                        #{ID}
                                    </foreach>]
                                )
                            )
                            </if>
                            <if test="material">
                            AND SAM.MTRQLT_SE_CD IN ${material}
                            </if>
                            <if test="size">
                            AND SAM.SIZE_CD IN ${size}
                            </if>
                    )
                    <if test = "available_start_dt && available_end_dt">
                    AND NOT EXISTS
                    (
                        SELECT 1
                        FROM TB_REQ_SHOWROOM B
                        WHERE 1=1
                            AND A.SHOWROOM_NO = B.SHOWROOM_NO
                            AND B.DEL_YN = 'N'
                            AND EXISTS
                            (
                                SELECT 1
                                FROM TB_REQ C
                                WHERE 1=1
                                    AND B.REQ_NO = C.REQ_NO
                                    AND C.DEL_YN = 'N'
                                    AND TO_TIMESTAMP(#{available_start_dt}::BIGINT) BETWEEN C.PHOTOGRF_PREARNGE_BEGIN_DT AND C.PHOTOGRF_PREARNGE_END_DT
                                    AND TO_TIMESTAMP(#{available_end_dt}::BIGINT) BETWEEN C.PHOTOGRF_PREARNGE_BEGIN_DT AND C.PHOTOGRF_PREARNGE_END_DT
                            )
                    )
                    </if>
            ) A
            LEFT JOIN TB_REQ_SHOWROOM B ON A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
            INNER JOIN TB_SHOWROOM_SAMPLE C ON A.SHOWROOM_NO=C.SHOWROOM_NO AND C.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG D ON C.SAMPLE_NO=D.SAMPLE_NO AND D.SHOWROOM_MAIN_YN=true AND D.DEL_YN='N'
            GROUP BY A.SHOWROOM_NO, A.SHOWROOM_NM, A.SHOWROOM_REG_DT, A.TOTAL_COUNT, D.IMG_URL_ADRES
        ) T
        ORDER BY T.REQ_COUNT DESC, T.SHOWROOM_NO DESC
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!--
        쇼룸 목록 조회
        /brand/showroom-list GET
         <if test="color">
        AND SAM.SAMPLE_COLOR_SE_CD IN ${color}
        </if>
    -->
    <select id="SELECT.SHOWROOM.LIST.ORIG2">
        SELECT
            T.SHOWROOM_NO
            , T.SHOWROOM_NM
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || (
                T.IMG_URL_ADRES
            ) AS IMAGE_URL
            , (CURRENT_TIMESTAMP - T.SHOWROOM_REG_DT) &lt; INTERVAL '1 month' AS IS_NEW
            , T.REQ_COUNT
            , T.TOTAL_COUNT
            , TRUE = ALL(
                SELECT WRHOUSNG_YN
                FROM TB_SAMPLE SAMPLE
                WHERE 1=1
                    AND SAMPLE.DEL_YN = 'N'
                    AND SAMPLE.SAMPLE_NO IN ( SELECT SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.DEL_YN = 'N' AND SS.SHOWROOM_NO = T.SHOWROOM_NO )
            ) AS ALL_IN_YN
            , (
                SELECT ARRAY_AGG(SAMPLE_CATGRY_MIDDLE_CL_NM)
                FROM TB_SAMPLE_CATGRY_MIDDL_CL CAT
                WHERE 1=1
                    AND CAT.DEL_YN = 'N'
                    AND CAT.SAMPLE_CATGRY_MIDDLE_CL_CD IN
                    (
                        SELECT SAMPLE_CATGRY_MIDDLE_CL_CD
                        FROM TB_SAMPLE SAMPLE
                        WHERE SAMPLE.DEL_YN = 'N' AND SAMPLE.SAMPLE_NO IN ( SELECT SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.DEL_YN = 'N' AND SS.SHOWROOM_NO = T.SHOWROOM_NO )
                    )
            ) AS CATEGORY_LIST
        FROM
        (
            SELECT
                A.SHOWROOM_NO
                , A.SHOWROOM_NM
                , A.SHOWROOM_REG_DT
                , A.TOTAL_COUNT
                , COUNT(B.*) AS REQ_COUNT
                , D.IMG_URL_ADRES
            FROM
            (
                SELECT
                    *
                    , COUNT(1) OVER() AS TOTAL_COUNT
                FROM TB_SHOWROOM A
                WHERE 1=1
                    <if test="brand_id">
                    AND A.BRAND_ID = #{brand_id}
                    </if>
                    <if test="season_year">
                    AND A.SEASON_YEAR = #{season_year}
                    AND A.SEASON_SE_CD = #{season_cd_id}
                    </if>
                    AND A.DEL_YN = 'N'
                    <if test="lookbook_no">
                    AND EXISTS ( SELECT 1 FROM TB_LOOKBOOK_SHOWROOM B WHERE B.DEL_YN = 'N' AND B.LOOKBOOK_NO = #{lookbook_no} AND A.SHOWROOM_NO = B.SHOWROOM_NO )
                    </if>
                    <if test="share_uuid">
                    AND EXISTS
                    (
                        SELECT 1
                        FROM TB_LOOKBOOK_SHOWROOM B
                        WHERE 
                            B.DEL_YN = 'N' AND LOOKBOOK_NO = ( SELECT LOOKBOOK_NO FROM TB_LOOKBOOK WHERE SHARE_UUID = #{share_uuid} ) AND A.SHOWROOM_NO = B.SHOWROOM_NO
                    )
                    </if>
                    AND EXISTS
                    (
                        SELECT 1
                        FROM TB_SAMPLE SAM
                        WHERE 1=1
                            AND SAM.SAMPLE_NO IN ( SELECT SS.SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.SHOWROOM_NO = A.SHOWROOM_NO AND SS.DEL_YN = 'N' )
                            AND SAM.DEL_YN = 'N'
                            <if test="gender_cd_id">
                            AND SAM.SAMPLE_SEX_SE_CD = #{gender_cd_id}
                            </if>
                            <if test="category">
                            AND SAM.SAMPLE_CATGRY_MIDDLE_CL_CD IN ${category}
                            </if>
                            <if test="filtercolor">
                            AND exists (
                                SELECT * FROM UNNEST(SAM.COLOR_LIST) 
                                WHERE UNNEST = ANY(
                                    ARRAY[<foreach collection="filtercolor" item="ID" separator=",">
                                        #{ID}
                                    </foreach>]
                                )
                            )
                            </if>
                            <if test="material">
                            AND SAM.MTRQLT_SE_CD IN ${material}
                            </if>
                            <if test="size">
                            AND SAM.SIZE_CD IN ${size}
                            </if>
                            <if test="wrhousng_yn != null">
                            AND SAM.WRHOUSNG_YN = #{wrhousng_yn}
                            </if>
                            <if test="still_life_img_yn != null">
                            AND SAM.STILL_LIFE_IMG_YN = #{still_life_img_yn}
                            </if>
                    )
                    <if test = "available_start_dt && available_end_dt">
                    AND NOT EXISTS
                    (
                        SELECT 1
                        FROM TB_REQ_SHOWROOM B
                        WHERE 1=1
                            AND A.SHOWROOM_NO = B.SHOWROOM_NO
                            AND B.DEL_YN = 'N'
                            AND EXISTS
                            (
                                SELECT 1
                                FROM TB_REQ C
                                WHERE 1=1
                                    AND B.REQ_NO = C.REQ_NO
                                    AND C.DEL_YN = 'N'
                                    AND TO_TIMESTAMP(#{available_start_dt}::BIGINT) BETWEEN C.PHOTOGRF_PREARNGE_BEGIN_DT AND C.PHOTOGRF_PREARNGE_END_DT
                                    AND TO_TIMESTAMP(#{available_end_dt}::BIGINT) BETWEEN C.PHOTOGRF_PREARNGE_BEGIN_DT AND C.PHOTOGRF_PREARNGE_END_DT
                            )
                    )
                    </if>
            ) A
            LEFT JOIN TB_REQ_SHOWROOM B ON A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
            INNER JOIN TB_SHOWROOM_SAMPLE C ON A.SHOWROOM_NO=C.SHOWROOM_NO AND C.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG D ON C.SAMPLE_NO=D.SAMPLE_NO AND D.SHOWROOM_MAIN_YN=true AND D.DEL_YN='N'
            GROUP BY A.SHOWROOM_NO, A.SHOWROOM_NM, A.SHOWROOM_REG_DT, A.TOTAL_COUNT, D.IMG_URL_ADRES
        ) T
        ORDER BY T.REQ_COUNT DESC, T.SHOWROOM_NO DESC
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!--
        쇼룸 목록 조회
        /brand/showroom-list GET
    -->
    <select id="SELECT.SHOWROOM.LIST">
    /*SELECT.SHOWROOM.LIST */
        SELECT
            T.SHOWROOM_NO
            , T.SHOWROOM_NM
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || (
                T.IMG_URL_ADRES
            ) AS IMAGE_URL
            , (CURRENT_TIMESTAMP - T.SHOWROOM_REG_DT) &lt; INTERVAL '1 month' AS IS_NEW
            , T.mfrc_sample_yn
            , T.SHOW_YN
            , T.REQ_COUNT
            , T.TOTAL_COUNT
            , TRUE = ALL(
                SELECT WRHOUSNG_YN  FROM TB_SAMPLE SAMPLE WHERE SAMPLE.DEL_YN = 'N' AND SAMPLE.SAMPLE_NO IN ( SELECT SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.DEL_YN = 'N' AND SS.SHOWROOM_NO = T.SHOWROOM_NO )
            ) AS ALL_IN_YN
            , (
                SELECT ARRAY_AGG(SAMPLE_CATGRY_MIDDLE_CL_NM)
                FROM TB_SAMPLE_CATGRY_MIDDL_CL CAT
                WHERE 1=1
                    AND CAT.DEL_YN = 'N'
                    AND CAT.SAMPLE_CATGRY_MIDDLE_CL_CD IN
                    (
                        SELECT SAMPLE_CATGRY_MIDDLE_CL_CD
                        FROM TB_SAMPLE SAMPLE
                        WHERE SAMPLE.DEL_YN = 'N' AND SAMPLE.SAMPLE_NO IN ( SELECT SAMPLE_NO  FROM TB_SHOWROOM_SAMPLE SS WHERE SS.DEL_YN = 'N' AND SS.SHOWROOM_NO = T.SHOWROOM_NO )
                    )
            ) AS CATEGORY_LIST
        FROM
        (
            SELECT
                A.SHOWROOM_NO
                , A.SHOWROOM_NM
                , A.SHOWROOM_REG_DT
                , A.mfrc_sample_yn
                , A.SHOW_YN
                , A.TOTAL_COUNT
                , COUNT(B.*) AS REQ_COUNT
                , D.IMG_URL_ADRES
            FROM
            (
                SELECT
                    *
                    , COUNT(1) OVER() AS TOTAL_COUNT
                FROM TB_SHOWROOM A
                WHERE 1=1
                    <if test="brand_id">
                    AND A.BRAND_ID = #{brand_id}
                    </if>
                    <if test="season_year">
                    AND A.SEASON_YEAR = #{season_year}
                    AND A.SEASON_SE_CD = #{season_cd_id}
                    </if>
                    AND A.DEL_YN = 'N'
                    <if test="is_magazine">
                    AND A.SHOW_YN = 'Y'
                    </if>
                    <if test="lookbook_no">
                    AND EXISTS ( SELECT 1 FROM tb_lookbook_showroom B WHERE B.DEL_YN = 'N' AND B.LOOKBOOK_NO = #{lookbook_no} AND A.SHOWROOM_NO = B.SHOWROOM_NO )
                    </if>
                    <if test="share_uuid">
                    AND EXISTS
                    (
                        SELECT 1
                        FROM tb_lookbook_showroom B
                        WHERE 1=1
                            AND B.DEL_YN = 'N'
                            AND LOOKBOOK_NO = ( SELECT LOOKBOOK_NO FROM TB_LOOKBOOK WHERE SHARE_UUID = #{share_uuid} )
                            AND A.SHOWROOM_NO = B.SHOWROOM_NO
                    )
                    </if>
                    AND EXISTS
                    (
                        SELECT 1
                        FROM TB_SAMPLE SAM
                        WHERE 1=1
                            AND SAM.SAMPLE_NO IN ( SELECT SS.SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.SHOWROOM_NO = A.SHOWROOM_NO AND SS.DEL_YN = 'N' )
                            AND SAM.DEL_YN = 'N'
                            <if test="gender">
                            AND SAM.SAMPLE_SEX_SE_CD IN ${gender}
                            </if>
                            <if test="category">
                            AND SAM.SAMPLE_CATGRY_MIDDLE_CL_CD IN ${category}
                            </if>
                            <if test="filtercolor">
                            AND exists (
                                SELECT * FROM UNNEST(SAM.COLOR_LIST) 
                                WHERE UNNEST = ANY(
                                    ARRAY[<foreach collection="filtercolor" item="ID" separator=",">
                                        #{ID}
                                    </foreach>]
                                )
                            )
                            </if>
                            <if test="material">
                            AND SAM.MTRQLT_SE_CD IN ${material}
                            </if>
                            <if test="size">
                            AND
                            (
                            SAM.SIZE_CD IN ${size}
                            OR SAM.SIZE_DIRECT_INPUT IN ${size}
                            )
                            </if>
                            <if test="wrhousng_yn != null">
                            AND SAM.WRHOUSNG_YN = #{wrhousng_yn}
                            </if>
                            <if test="still_life_img_yn != null">
                            AND SAM.STILL_LIFE_IMG_YN = #{still_life_img_yn}
                            </if>
                    )
            ) A
            LEFT JOIN TB_REQ_SHOWROOM B  ON A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
            INNER JOIN TB_SHOWROOM_SAMPLE C ON A.SHOWROOM_NO=C.SHOWROOM_NO AND C.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG D ON C.SAMPLE_NO=D.SAMPLE_NO AND D.SHOWROOM_MAIN_YN=true AND D.DEL_YN='N'
            GROUP BY A.SHOWROOM_NO , A.SHOWROOM_NM, A.SHOWROOM_REG_DT, A.TOTAL_COUNT, D.IMG_URL_ADRES,A.mfrc_sample_yn,A.SHOW_YN
        ) T 
        INNER JOIN (
            SELECT 
                tss.showroom_no,max(ts.sample_no)  as sample_no
            FROM tb_sample ts INNER JOIN tb_showroom_sample tss ON ts.sample_no = tss.sample_no 
            WHERE ts.del_yn ='N'
            GROUP BY tss.showroom_no
        ) as OR1 ON T.showroom_no = OR1.showroom_no 
        INNER JOIN tb_sample as OR2 ON OR1.sample_no = OR2.sample_no
        INNER JOIN tb_sample_catgry_lrge_cl as OR3 ON OR2.sample_catgry_lrge_cl_cd = OR3.sample_catgry_lrge_cl_cd 
        LEFT JOIN tb_sample_catgry_middl_cl as OR4 ON OR2.sample_catgry_middle_cl_cd  = OR4.sample_catgry_lrge_cl_cd 
        ORDER BY OR3.order_value asc ,OR4.sample_catgry_middle_cl_nm ,T.REQ_COUNT DESC, T.SHOWROOM_NO DESC
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!--
        쇼룸 목록 조회
        /brand/showroom-list GET
    -->
    <select id="SELECT.SHOWROOM.LIST.ORIGIN">
        SELECT
            T.SHOWROOM_NO
            , T.SHOWROOM_NM
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || (
                T.IMG_URL_ADRES
            ) AS IMAGE_URL
            , (CURRENT_TIMESTAMP - T.SHOWROOM_REG_DT) &lt; INTERVAL '1 month' AS IS_NEW
            , T.REQ_COUNT
            , T.TOTAL_COUNT
            , TRUE = ALL(
                T.WRHOUSNG_ARRAY
            ) AS ALL_IN_YN
            , T.CATEGORY_LIST
        FROM
        (
            SELECT
                A.SHOWROOM_NO
                , A.SHOWROOM_NM
                , A.SHOWROOM_REG_DT
                , A.TOTAL_COUNT
                , A.REQ_COUNT
                , MAX(D.IMG_URL_ADRES) AS IMG_URL_ADRES
                , ARRAY_AGG(E.WRHOUSNG_YN) AS WRHOUSNG_ARRAY
                , ARRAY_AGG(F.SAMPLE_CATGRY_MIDDLE_CL_NM ORDER BY F.SAMPLE_CATGRY_MIDDLE_CL_NM collate "ko_KR.utf8") AS CATEGORY_LIST
            FROM
            (
            	SELECT
            		A.SHOWROOM_NO
                    , A.SHOWROOM_NM
                    , A.SHOWROOM_REG_DT
                    , COUNT(1) OVER() AS TOTAL_COUNT
                    , COUNT(b.*) AS REQ_COUNT
            	FROM
            	(
	                SELECT
	                    A.SHOWROOM_NO
	                    , A.SHOWROOM_NM
	                    , A.SHOWROOM_REG_DT
	                    , COUNT(1) OVER() AS TOTAL_COUNT
	                FROM TB_SHOWROOM A
	                WHERE 1=1
	                    <if test="brand_id">
                        AND A.BRAND_ID = #{brand_id}
                        </if>
                        <if test="season_year">
                        AND A.SEASON_YEAR = #{season_year}
                        AND A.SEASON_SE_CD = #{season_cd_id}
                        </if>
                        AND A.DEL_YN = 'N'
                        <if test="lookbook_no">
                        AND EXISTS
                        (
                            SELECT 1
                            FROM TB_LOOKBOOK_SHOWROOM B
                            WHERE 1=1
                                AND B.DEL_YN = 'N'
                                AND B.LOOKBOOK_NO = #{lookbook_no}
                                AND A.SHOWROOM_NO = B.SHOWROOM_NO
                        )
                        </if>
                        <if test="share_uuid">
                        AND EXISTS
                        (
                            SELECT 1
                            FROM TB_LOOKBOOK_SHOWROOM B
                            WHERE 1=1
                                AND B.DEL_YN = 'N'
                                AND LOOKBOOK_NO = (
                                    SELECT LOOKBOOK_NO
                                    FROM TB_LOOKBOOK
                                    WHERE 1=1
                                        AND SHARE_UUID = #{share_uuid}
                                )
                                AND A.SHOWROOM_NO = B.SHOWROOM_NO
                        )
                        </if>
	            ) A
	            INNER JOIN TB_REQ_SHOWROOM B ON A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
                GROUP BY A.SHOWROOM_NO,A.SHOWROOM_NM,A.SHOWROOM_REG_DT
            ) A
            INNER JOIN TB_SHOWROOM_SAMPLE C ON A.SHOWROOM_NO=C.SHOWROOM_NO AND C.DEL_YN='N'
            LEFT JOIN TB_SAMPLE_IMG D ON C.SAMPLE_NO=D.SAMPLE_NO AND D.SHOWROOM_MAIN_YN=true AND D.DEL_YN='N'
            INNER JOIN TB_SAMPLE E ON 1=1
            	AND C.SAMPLE_NO=E.SAMPLE_NO
            	AND E.DEL_YN='N'
                <if test="gender">
                AND E.SAMPLE_SEX_SE_CD IN ${gender}
                </if>
                <if test="category">
                AND E.SAMPLE_CATGRY_MIDDLE_CL_CD IN ${category}
                </if>
                <if test="filtercolor">
                AND exists (
                    SELECT * FROM UNNEST(E.COLOR_LIST) 
                    WHERE UNNEST = ANY(
                        ARRAY[<foreach collection="filtercolor" item="ID" separator=",">
                            #{ID}
                        </foreach>]
                    )
                )
                </if>
                <if test="material">
                AND E.MTRQLT_SE_CD IN ${material}
                </if>
                <if test="size">
                AND
                (
                    E.SIZE_CD IN ${size}
                    OR E.SIZE_DIRECT_INPUT IN ${size}
                )
                </if>
                <if test="wrhousng_yn != null">
                AND E.WRHOUSNG_YN = #{wrhousng_yn}
                </if>
                <if test="still_life_img_yn != null">
                AND E.STILL_LIFE_IMG_YN = #{still_life_img_yn}
                </if>
            INNER JOIN TB_SAMPLE_CATGRY_MIDDL_CL F ON E.SAMPLE_CATGRY_MIDDLE_CL_CD =F.SAMPLE_CATGRY_MIDDLE_CL_CD AND F.DEL_YN='N'
            GROUP BY A.SHOWROOM_NO , A.SHOWROOM_NM, A.SHOWROOM_REG_DT, A.TOTAL_COUNT, A.REQ_COUNT
        ) T
        GROUP BY T.SHOWROOM_NO, T.SHOWROOM_NM, T.SHOWROOM_REG_DT, T.REQ_COUNT, T.TOTAL_COUNT, T.WRHOUSNG_ARRAY, T.CATEGORY_LIST, T.IMG_URL_ADRES
        ORDER BY T.REQ_COUNT DESC, T.SHOWROOM_NO DESC
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!--
        보도자료 생성
        /brand/press POST
    -->
    <insert id="INSERT.PRESS">
        INSERT INTO TB_BRAND_PRESS
        (
            BRAND_ID
            , BRAND_USER_NO
            , MAIN_IMG_ADRES
            , YEAR
            , MONTH
            , PRESS_SUBJ
            , PRESS_CNTENT
            , WORD_FILE_ADRES
            , LINK
            , inquiry_charge
            , inquiry_email
            , inquiry_tel
            , show_yn
        )
        VALUES
        (
            #{brand_id}
            , #{brand_user_no}
            , #{main_img_adres}
            , #{monthly_year}
            , #{monthly_month}
            , #{title}
            , #{contents}
            , #{word_file_adres}
            , #{link}
            , #{inquiry_charge}
            , #{inquiry_email}
            , #{inquiry_tel}
            , #{show_yn}
        )
        RETURNING BRAND_PRESS_NO
    </insert>

    <!--
        보도자료 생성시 알림전송
        /brand/press POST
    -->
    <insert id="INSERT.PRESS.NOTIFY">
        INSERT INTO TB_PRESS_NOTIFI
        (
            BRAND_PRESS_NO
            , SEND_MAN_ID
            , RECV_MAN_SE_CD
            , RECV_MAN_ID
            , CONTENT
        )
        SELECT
            #{brand_press_no}
            , #{user_id}
            , T.RECV_CD
            , T.USER_ID
            , '새 보도자료가 등록되었습니다.'
        FROM
        (
            ( SELECT USER_ID, 'RMS001' AS RECV_CD FROM TB_MGZN_USER A WHERE A.DEL_YN='N' )
            UNION ALL
            ( SELECT USER_ID, 'RMS002' AS RECV_CD FROM TB_STYLE_LIST_USER A WHERE A.DEL_YN='N' )
        ) T
        RETURNING *
    </insert>

    <!--
        보도자료 생성
        /brand/press POST
    -->
    <insert id="INSERT.PRESS.IMAGE.OLD">
        INSERT INTO TB_BRAND_PRESS_IMG
        (
            BRAND_PRESS_NO
            , IMG_URL_ADRES
        )
        SELECT
            #{brand_press_no}
            , T.URL
        FROM
        (
            VALUES ${list}
        ) T(URL)
    </insert>
  <insert id="INSERT.PRESS.IMAGE">
        INSERT INTO TB_BRAND_PRESS_IMG
        (
            BRAND_PRESS_NO
            , IMG_URL_ADRES
        )
        VALUES
        <foreach collection="add_img_list" item="ID" separator=",">
            (
               #{brand_press_no}
               ,#{ID}
            )
        </foreach>
    </insert>
    <!--
        보도자료 조회
        /brand/press/:brand_press_no GET
    -->
    <select id="SELECT.PRESS">
        SELECT
            A.MAIN_IMG_ADRES
             , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || A.MAIN_IMG_ADRES AS MAIN_IMG_FULL_ADRES
            , A.YEAR AS MONTHLY_YEAR
            , A.MONTH AS MONTHLY_MONTH
            , A.PRESS_SUBJ AS TITLE
            , A.share_uuid
            , A.PRESS_CNTENT AS CONTENTS
            , A.WORD_FILE_ADRES
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || A.WORD_FILE_ADRES AS WORD_FILE_FULL_ADRES
            , A.LINK
            , A.inquiry_charge
            , A.inquiry_email
            , A.inquiry_tel
            , A.show_yn
            , ARRAY_REMOVE(ARRAY_AGG(B.IMG_URL_ADRES), NULL) AS ADD_IMG_LIST
            , ARRAY_REMOVE(ARRAY_AGG((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || B.IMG_URL_ADRES), NULL) AS ADD_FULL_IMG_LIST
        FROM
        (
            SELECT
                A.BRAND_PRESS_NO
                , A.MAIN_IMG_ADRES
                , A.YEAR
                , A.MONTH
                , A.PRESS_SUBJ
                , A.PRESS_CNTENT
                , A.WORD_FILE_ADRES
                , A.LINK
                , A.share_uuid
                , A.inquiry_charge
                , A.inquiry_email
                , A.inquiry_tel
                , A.show_yn
            FROM TB_BRAND_PRESS A
            WHERE 1=1
                <if test="brand_press_no">
                AND A.BRAND_PRESS_NO = #{brand_press_no}
                </if>
                <if test="share_uuid">
                AND A.SHARE_UUID = #{share_uuid}
                </if>
        ) A
        LEFT JOIN TB_BRAND_PRESS_IMG B ON A.BRAND_PRESS_NO = B.BRAND_PRESS_NO AND B.DEL_YN = 'N'
        GROUP BY A.MAIN_IMG_ADRES, A.YEAR, A.MONTH, A.PRESS_SUBJ, A.PRESS_CNTENT, A.WORD_FILE_ADRES, A.LINK, A.share_uuid, A.inquiry_charge, A.inquiry_email, A.inquiry_tel, A.show_yn
    </select>

    <!--
        보도자료 목록조회
        /brand/press-list GET
    -->
    <select id="SELECT.PRESS.SEASON.LIST">
        SELECT DISTINCT YEAR, MONTH
        FROM TB_BRAND_PRESS
        WHERE BRAND_ID = #{brand_id} AND DEL_YN = 'N'
        ORDER BY YEAR DESC, MONTH ASC
    </select>

    <!--
        보도자료 목록조회
        /brand/press-list GET
    -->
    <select id="SELECT.PRESS.LIST">
        SELECT
            T.BRAND_PRESS_NO
            , T.PRESS_SUBJ AS TITLE
            , T.PRESS_CNTENT AS CONTENTS
            , T.TOTAL_COUNT
            , T.MAIN_IMG_ADRES
            , T.SHOW_YN
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || T.WORD_FILE_ADRES AS WORD_FILE_FULL_ADRES
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || T.MAIN_IMG_ADRES AS MAIN_IMG_FULL_ADRES
        FROM
        (
            SELECT
                A.BRAND_PRESS_NO
                , A.PRESS_SUBJ
                , A.PRESS_CNTENT
                , A.MAIN_IMG_ADRES
                , A.WORD_FILE_ADRES
                , A.INPUT_DT
                , A.SHOW_YN
                , COUNT(1) OVER() AS TOTAL_COUNT
            FROM TB_BRAND_PRESS A
            WHERE A.BRAND_ID = #{brand_id} AND A.YEAR = #{year} AND A.MONTH = #{month} AND A.DEL_YN = 'N'
        ) T
        ORDER BY T.INPUT_DT DESC
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!--
        보도자료 수정
        /brand/press/:brand_press_no GET
        UPDATE TB_BRAND_PRESS_IMG
            SET
                DEL_YN = 'Y'
            WHERE BRAND_PRESS_NO = #{brand_press_no}
    -->
    <update id="UPDATE.PRESS">        
        WITH REMOVE_PRESS_IMG AS
        (
            DELETE FROM TB_BRAND_PRESS_IMG WHERE BRAND_PRESS_NO = #{brand_press_no}
        )
        UPDATE TB_BRAND_PRESS
        SET
            MAIN_IMG_ADRES = #{main_img_adres}
            , YEAR = #{monthly_year}
            , MONTH = #{monthly_month}
            , PRESS_SUBJ = #{title}
            , PRESS_CNTENT = #{contents}
            , WORD_FILE_ADRES = #{word_file_adres}
            , LINK = #{link}
            , inquiry_charge = #{inquiry_charge}
            , inquiry_email = #{inquiry_email}
            , inquiry_tel = #{inquiry_tel}
            , show_yn = #{show_yn}
        WHERE BRAND_PRESS_NO = #{brand_press_no}
    </update>

    <!--
        보도자료 수정 등 접근권한 체크
        /brand/press/:brand_press_no PUT
    -->
    <select id="CHECK.ACCESSABLE.PRESS">
        SELECT BRAND_ID = #{brand_id} AS ACCESSABLE FROM TB_BRAND_PRESS WHERE BRAND_PRESS_NO = #{brand_press_no}
    </select>

    <!--
        요청 수정 등 접근권한 체크
        /brand/press/:brand_press_no PUT
    -->
    <select id="CHECK.ACCESSABLE.REQ">
        SELECT 
            BRAND_ID = #{brand_id} AS ACCESSABLE,REQ_USER_SE_CD 
            ,(duty_recpt_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE as duty_recpt_dt
            ,(photogrf_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE as photogrf_dt
		    ,(return_prearnge_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE as return_prearnge_dt
        FROM 
            TB_REQ 
        WHERE REQ_NO = #{req_no}
    </select>

     <!--
        showroom이 픽업일자와 반납일자를 체크하여 검토
        /brand/press/:brand_press_no PUT
    -->
    <select id="CHECK.ACCESSABLE.ANOTHER.USER">
        SELECT BRAND_ID = #{brand_id} AS ACCESSABLE,REQ_USER_SE_CD FROM TB_REQ WHERE REQ_NO = #{req_no}
    </select>

    <!--
        보도자료 수정 등 접근권한 체크
        /brand/press/:brand_press_no PUT
    -->
    <delete id="DELETE.PRESS">
        UPDATE TB_BRAND_PRESS SET DEL_YN = 'Y' WHERE BRAND_PRESS_NO = #{brand_press_no}
    </delete>

    <!--
        보도자료 수정 등 접근권한 체크
        /brand/lookbook/:lookbook_no PUT
    -->
    <update id="CHECK.ACCESSABLE.LOOKBOOK">
        SELECT BRAND_ID = #{brand_id} AS ACCESSABLE FROM TB_LOOKBOOK WHERE LOOKBOOK_NO = #{lookbook_no}
    </update>

    <!--
        쇼룸 수정 등 접근권한 체크
        /brand/lookbook/:lookbook_no PUT
    -->
    <update id="CHECK.ACCESSABLE.SHOWROOM">
        SELECT BRAND_ID = #{brand_id} AS ACCESSABLE FROM TB_SHOWROOM WHERE SHOWROOM_NO = #{showroom_no}
    </update>

    <!--
        브랜드 공지사항 조회
        /brand/notice GET
    -->
    <select id="SELECT.NOTICE">        
        SELECT COALESCE((SELECT notice_cntent FROM TB_BRAND_ALL_NOTICE WHERE BRAND_ID = #{brand_id} AND DEL_YN = 'N'), '') AS NOTICE_CONTENTS
    </select>

    <!--
        브랜드 공지사항 수정
        /brand/notice POST
    -->
    <update id="UPDATE.NOTICE">
        WITH UPDATE_ALL_NOTICE AS
        (
            INSERT INTO TB_BRAND_ALL_NOTICE
            (
                BRAND_ID
                , BRAND_USER_NO
                , notice_subj
                , notice_cntent
            )
            VALUES
            (
                #{brand_id}
                , #{brand_user_no}
                , ''
                , #{notice_contents}
            )
            ON CONFLICT(BRAND_ID) DO
            UPDATE
            SET
                all_notice_reg_dt = CURRENT_TIMESTAMP
                , notice_subj = ''
                , notice_cntent = #{notice_contents}
        )
        , INSERT_NOTICE AS
        (
            INSERT INTO TB_BRAND_NOTICE
            (brand_id, brand_user_no, notice_subj, notice_cntent)
            VALUES
            (
                #{brand_id}
                , #{brand_user_no}
                , ''
                , #{notice_contents}
            )
            RETURNING BRAND_NOTICE_NO
        )
        , INSERT_NOTIFI AS
        (
            INSERT INTO TB_BRAND_NOTICE_NOTIFI
            (
                BRAND_NOTICE_NO
                , BRAND_ID
                , SEND_MAN_ID
                , SEND_MAN_USER_TYPE
                , RECV_MAN_SE_CD
                , RECV_MAN_ID
                , SUBJECT
                , CONTENTS
            )
            SELECT
                (SELECT BRAND_NOTICE_NO FROM INSERT_NOTICE LIMIT 1)
                , #{brand_id}
                , #{user_id}
                , 'BRAND'
                , T.SE_CD
                , T.USER_ID
                , '[디지털쇼룸] '
                    || (SELECT BRAND_NM FROM TB_BRAND WHERE BRAND_ID = #{brand_id} LIMIT 1)
                    || '의 디지털쇼룸에 새 공지사항이 등록되었습니다.'
                , (SELECT BRAND_NM FROM TB_BRAND WHERE BRAND_ID = #{brand_id} LIMIT 1)
                    || '의 디지털쇼룸에 새 공지사항이 등록되었습니다.'
            FROM
                (
                    SELECT USER_ID, 'US0001' AS SE_CD FROM TB_MGZN_USER WHERE DEL_YN = 'N'
                ) T
            RETURNING CONTENTS,RECV_MAN_ID
        )
        SELECT B.TOKEN_VALUE, A.CONTENTS AS MESSAGE
        FROM INSERT_NOTIFI A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_MAN_ID = B.USER_ID AND B.USE_YN
    </update>

    <!--
        문의번호 조회
        /brand/inquiry-number GET
    -->
    <select id="SELECT.INQUIRY.NUMBER">
        SELECT INQUIRY_NUMBER,showroom_inquiry_email,inquiry_charge FROM TB_BRAND WHERE BRAND_ID = #{brand_id} AND DEL_YN = 'N'
    </select>

    <!--
        문의번호 수정
        /brand/inquiry-number POST
    -->
    <update id="UPDATE.INQUIRY.NUMBER">
        UPDATE TB_BRAND SET INQUIRY_NUMBER = #{inquiry_number} WHERE BRAND_ID = #{brand_id} AND DEL_YN = 'N'
    </update>

    <!--
        쇼룸 문의정보 조회
        /brand/showroom-inquiry GET
    -->
    <select id="SELECT.SHOWROOM.INQUIRY">
        SELECT inquiry_charge,showroom_inquiry_contact, showroom_inquiry_email FROM TB_BRAND WHERE BRAND_ID = #{brand_id} AND DEL_YN = 'N'
    </select>

    <!--
        쇼룸 문의정보 수정
        /brand/showroom-inquiry POST
    -->
    <update id="UPDATE.SHOWROOM.INQUIRY">
        UPDATE TB_BRAND SET inquiry_charge = #{inquiry_charge}, showroom_inquiry_email = #{showroom_inquiry_email}, showroom_inquiry_contact = #{showroom_inquiry_contact}
        WHERE BRAND_ID = #{brand_id} AND DEL_YN = 'N'
    </update>
    <!--
        쇼룸 문의정보 수정
        /brand/showroom-allupdate PUT
    -->

    <update id="UPDATE.SHOWROOM.SHOW.ALLUPDATE">
        UPDATE 
            tb_showroom 
        SET 
            show_yn = #{show_yn}
            ,updt_dt = CURRENT_TIMESTAMP
            , updt_id = #{user_id}
        WHERE 
            BRAND_ID = #{brand_id} AND DEL_YN = 'N' AND season_year = #{season_year} AND season_se_cd = #{season_cd_id}
    </update>
    <!--
        룩북 생성
        /brand/lookbook POST
    -->
    <insert id="INSERT.LOOKBOOK">
        WITH INSERT_LOOKBOOK AS
        (
            INSERT INTO TB_LOOKBOOK
            (
                LOOKBOOK_NM
                , BRAND_ID
                , BRAND_USER_NO
                , season_se_cd
                , sex_se_cd
                , made_for_mgzn_id
                , made_for
            )
            VALUES
            (
                #{lookbook_nm}
                , #{brand_id}
                , #{brand_user_no}
                , #{season_cd_id}
                , #{gender_cd_id}
                , #{made_for_mgzn_id}
                , #{made_for}
            )
            RETURNING LOOKBOOK_NO
        )
        INSERT INTO tb_lookbook_showroom
        (LOOKBOOK_NO, SHOWROOM_NO)
        SELECT
            (SELECT LOOKBOOK_NO FROM INSERT_LOOKBOOK LIMIT 1)
            , T.SHOWROOM_NO
        FROM
        (
            VALUES ${list}
        ) T(SHOWROOM_NO)
        RETURNING *
    </insert>

    <!--
        룩북 수정
        /brand/lookbook/:lookbook_no PUT
    -->
    <update id="UPDATE.LOOKBOOK">
        <if test="remove">
        WITH REMOVE_SHOWROOM AS
        (
            UPDATE TB_LOOKBOOK_SHOWROOM
            SET
                DEL_YN = 'Y'
            WHERE 1=1
                AND SHOWROOM_NO IN ${list}
        )
        </if>
        UPDATE TB_LOOKBOOK
        SET
            LOOKBOOK_NM = #{lookbook_nm}
            , SEASON_SE_CD = #{season_cd_id}
            , SEX_SE_CD = #{gender_cd_id}
            , MADE_FOR_MGZN_ID = #{made_for_mgzn_id}
            , MADE_FOR = #{made_for}
        WHERE 1=1
            AND LOOKBOOK_NO = #{lookbook_no}
    </update>

    <!--
        룩북 수정
        /brand/lookbook/:lookbook_no DELETE
    -->
    <delete id="DELETE.LOOKBOOK">
        UPDATE TB_LOOKBOOK SET DEL_YN = 'Y' WHERE LOOKBOOK_NO = #{lookbook_no}
    </delete>

    <!--
        룩북 목록 조회
        /brand/lookbook-list GET
    -->
    <select id="SELECT.LOOKBOOK.LIST">
        SELECT
            T.LOOKBOOK_NO
            , T.LOOKBOOK_NM
            , T.DATE_CREATED
            , T.SEASON
            , T.GENDER
            , T.MADE_FOR
            , T.TOTAL_COUNT
        FROM
        (
            SELECT
                A.LOOKBOOK_NO
                , A.LOOKBOOK_NM
                , A.DATE_CREATED
                , A.SEASON
                , A.GENDER
                , A.MADE_FOR
                , COUNT(1) OVER() AS TOTAL_COUNT
            FROM
            (
                SELECT
                    A.LOOKBOOK_NO
                    , A.LOOKBOOK_NM
                    , FLOOR(DATE_PART('epoch'::TEXT, A.LOOKBOOK_REG_DT ))::BIGINT AS DATE_CREATED
                    , SEASON.CD_NM AS SEASON
                    , GENDER.CD_NM AS GENDER
                    , A.MADE_FOR
                FROM
                (
                    SELECT L.LOOKBOOK_NO, L.LOOKBOOK_NM, L.LOOKBOOK_REG_DT, L.MADE_FOR, L.SEASON_SE_CD, L.SEX_SE_CD, L.MADE_FOR_MGZN_ID
                    FROM TB_LOOKBOOK L
                    WHERE L.BRAND_ID = #{brand_id} AND L.DEL_YN = 'N'
                ) A
                LEFT JOIN TB_MGZN M ON A.MADE_FOR_MGZN_ID = M.MGZN_ID
                LEFT JOIN TB_COMM_CD SEASON ON SEASON.CD_TYP_ID = 'CT00000008'
                    AND ( SEASON.BRAND_ID = '' OR SEASON.BRAND_ID = #{brand_id} )
                    AND SEASON.CD_ID = A.SEASON_SE_CD
                    AND SEASON.DEL_YN = 'N'
                LEFT JOIN TB_COMM_CD GENDER ON GENDER.CD_TYP_ID = 'CT00000013' AND GENDER.CD_ID = A.SEX_SE_CD AND GENDER.DEL_YN = 'N'
            ) A
            WHERE 1=1
                <if test="search_text">
                AND
                (
                    A.MADE_FOR ILIKE '%' || #{search_text} ||'%'
                    OR
                    A.LOOKBOOK_NM ILIKE '%' || #{search_text} ||'%'
                )
                </if>
        ) T
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!--
        룩북 목록 조회
        /brand/lookbook-showroom-list/:lookbook_no GET
    -->
    <select id="SELECT.LOOKBOOK">        
        SELECT LOOKBOOK_NM, SEASON_SE_CD, SEX_SE_CD AS GENDER_CD_ID, MADE_FOR_MGZN_ID, MADE_FOR,share_uuid
        FROM TB_LOOKBOOK
        WHERE LOOKBOOK_NO = #{lookbook_no} AND DEL_YN = 'N'
    </select>

    <!--
        알림목록을 출력합니다
        /brand/alarm GET
    -->
    <select id="SELECT.ALARM.LIST">
        WITH CONFIRM_ALARM AS
        (
            UPDATE TB_REQ_HIST_NOTIFI
            SET
                RECV_CNFIRM_YN = TRUE
            WHERE RECV_USER_ID = #{user_id} AND RECV_CNFIRM_YN =false AND DEL_YN = 'N'
        )
        SELECT
            T.NOTICE_ID
            , T.NOTICE_TYPE
            , T.BRAND_ID
            , T.SEND_USER_ID
            , T.RECV_USER_ID
            , T.SEND_DT
            , T.SUBJ
            , T.CNTENT
            , T.BRAND_NM
            , T.USERNAME
            , T.REQ_HIST_NOTIFI_SE_CD
            , T.REQ_TYPE
            , T.RECV_CNFIRM_YN
            , T.REQ_NO
            , D2.date_info
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT
                A.NOTICE_NO AS NOTICE_ID
                , 'cms' AS NOTICE_TYPE
                , NULL AS BRAND_ID
                , A.SEND_MAN_ID AS SEND_USER_ID
                , A.RECV_MAN_ID AS RECV_USER_ID
                , FLOOR(DATE_PART('epoch' :: TEXT, A.SEND_DT)) :: BIGINT AS SEND_DT
                , B.TITLE AS SUBJ
                , A.content AS CNTENT
                , NULL AS BRAND_NM
                , 'cms' AS USERNAME
                , NULL AS REQ_HIST_NOTIFI_SE_CD
                , NULL AS REQ_TYPE
                , A.RECV_CNFIRM_YN
                , NULL AS REQ_NO                
            FROM
                (
                    SELECT
                        A.RECV_CNFIRM_YN,A.NOTICE_NOTIFI_NO, A.NOTICE_NO, A.SEND_MAN_ID, A.SEND_DT, A.RECV_MAN_ID, A."content"
                    FROM
                        TB_NOTICE_NOTIFI A
                    WHERE A.RECV_MAN_ID = #{user_id} AND A.DEL_YN = 'N'
                ) A
            INNER JOIN TB_NOTICE B ON A.NOTICE_NO = B.NOTICE_NO AND B.DEL_YN = 'N'
            UNION ALL
            SELECT
                C.REQ_HIST_NOTIFI_NO AS NOTICE_ID
                , NOTICE_TYPE
                , E.BRAND_ID
                , C.SEND_USER_ID
                , C.RECV_USER_ID
                , FLOOR(DATE_PART('epoch'::TEXT, C.SEND_DT ))::BIGINT AS SEND_DT
                , C.NOTIFI_SUBJ AS SUBJ
                , C.NOTIFI_CNTENT AS CNTENT
                , NULL AS BRAND_NM
                , CASE WHEN C.SEND_MAN_USER_TYPE='brand' THEN E.USER_NM WHEN C.SEND_MAN_USER_TYPE='magazine' THEN F.USER_NM WHEN C.SEND_MAN_USER_TYPE='stylist' THEN G.USER_NM END AS USERNAME
                , C.REQ_HIST_NOTIFI_SE_CD
                , H.CD_NM AS REQ_TYPE
                , C.RECV_CNFIRM_YN
                , I.REQ_NO
            FROM
            (
                SELECT
                    C.REQ_HIST_NOTIFI_NO
                    , C.REQ_HIST_NOTIFI_SE_CD
                    , C.SEND_USER_ID
                    , C.RECV_USER_ID
                    , C.SEND_DT
                    , C.NOTIFI_SUBJ
                    , C.NOTIFI_CNTENT
                    , C.SEND_MAN_USER_TYPE
                    , C.RECV_CNFIRM_YN
                    , C.REQ_HIST_NO
                    , C.NOTICE_TYPE
                FROM TB_REQ_HIST_NOTIFI C
                WHERE C.RECV_USER_ID=#{user_id} AND C.DEL_YN='N'
            ) C
            INNER JOIN TB_COMM_CD H ON H.CD_TYP_ID = 'CT00000005' AND H.CD_ID = C.REQ_HIST_NOTIFI_SE_CD AND H.DEL_YN='N'
            INNER JOIN TB_REQ_HIST I ON I.REQ_HIST_NO = C.REQ_HIST_NO AND I.DEL_YN='N'
            LEFT JOIN TB_BRAND_USER E ON E.USER_ID=C.SEND_USER_ID AND E.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER F ON F.USER_ID=C.SEND_USER_ID AND F.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER G ON G.USER_ID=C.SEND_USER_ID AND G.DEL_YN='N'            
        ) T LEFT JOIN (
            SELECT tr.req_no ,
                JSONB_AGG( 
                JSONB_BUILD_OBJECT(
                    'showroom_no',trs.showroom_no,
                    'shoting_date',extract(epoch from tr.PHOTOGRF_DT),
                    'pickup_date',extract(epoch from tr.duty_recpt_dt),
                    'return_date',extract(epoch from tr.return_prearnge_dt)
                )) as date_info
            FROM 
                tb_req as tr INNER JOIN tb_req_showroom trs ON tr.req_no = trs.req_no 
            WHERE tr.del_yn = 'N' AND tr.brand_id = #{brand_id}
            GROUP BY tr.req_no 
        ) as D2 ON T.REQ_NO = D2.REQ_NO
        ORDER BY T.SEND_DT DESC
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!--
        알림을 삭제합니다.
        /brand/alarm-delete DELETE
    -->
    <delete id="DELETE.ALARM">
        UPDATE TB_REQ_HIST_NOTIFI SET DEL_YN = 'Y' WHERE REQ_HIST_NOTIFI_NO = #{notice_id} AND RECV_USER_ID = #{user_id}
    </delete>

    <!--
        룩북 링크 공유용 UUID 조회
        /brand/lookbook/:lookbook_no/share-uuid GET
    -->
    <select id="SELECT.LOOKBOOK.SHARE.UUID">
        SELECT SHARE_UUID , BRAND_ID FROM TB_LOOKBOOK WHERE LOOKBOOK_NO = #{lookbook_no}
    </select>

    <!--
        룩북 링크 공유용 UUID 조회
        /brand/lookbook/:lookbook_no/share-uuid GET
    -->
    <select id="SELECT.FROM.SHARE.UUID">
        SELECT SHOWROOM_NO , BRAND_ID FROM TB_SHOWROOM WHERE SHARE_UUID = #{share_uuid}
    </select>

    <!--
        쇼룸 링크 공유용 UUID 조회
        /brand/showroom/:showroom_no/share-uuid
    -->
    <select id="SELECT.SHOWROOM.SHARE.UUID">
        SELECT SHARE_UUID FROM TB_SHOWROOM WHERE  SHOWROOM_NO = #{showroom_no}
    </select>

    <!--
        보도자료 공유
        /brand/press/:brand_press_no/share-uuid
    -->
    <select id="SELECT.PRESS.SHARE.UUID">
        SELECT SHARE_UUID FROM TB_BRAND_PRESS WHERE BRAND_PRESS_NO = #{brand_press_no}
    </select>

    <!--
        요청 확인
        /brand/request-check/:req_no POST
    -->
    <update id="CHECK.REQUEST">
        WITH
        INSERT_INSTORY AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            VALUES
            (
                #{req_no}
                , (
                    SELECT
                        L.REQ_STATUS_CD
                    FROM TB_REQ L
                    WHERE 1=1
                        AND L.REQ_NO = #{req_no}
                        AND L.DEL_YN='N'
                    LIMIT 1
                )
                , 'RS0002'
            )
        )
        UPDATE TB_REQ AS THIS
        SET
            REQ_STATUS_CD = CASE
                WHEN THIS.REQ_STATUS_CD IN ('RS0001')
                THEN 'RS0002'
            END
        WHERE 1=1
            AND REQ_NO = #{req_no}
            AND DEL_YN='N'
    </update>
    <!--
        요청 수락 - 매거진
        /brand/request-accept/:req_no POST
    -->
    <update id="ACCEPT.REQUEST.SUBACTION">
        WITH T1 AS  (
            UPDATE 
                tb_new_req_sample as TB_A
            SET
                sendout_dt  = #{pickup_date},
                sendout_userid = (CASE WHEN send.send_id is null then tb_brand.user_id else  send.send_id end),
                sendout_userid_type  = (CASE WHEN send.req_user_se_cd is null then 'RUS000' else  send.req_user_se_cd end),
                return_dt = #{return_date},
                return_userid  = (CASE WHEN ret.receive_id is null then tb_brand.user_id else  ret.receive_id end),   
                return_userid_type  = (CASE WHEN ret.receive_id is null then 'RUS000' else  ret.req_user_se_cd end)         
            FROM 
                (
                    SELECT 
                        1 as idx,tbu.user_id  
                    FROM 
                        tb_showroom as ts INNER JOIN tb_brand_user tbu  on ts.brand_user_no = tbu.brand_user_no 
                    WHERE 
                        ts.showroom_no = #{ID}
                    limit 1
                ) as tb_brand LEFT JOIN
                (
                    SELECT 
                        1 as idx,tr.req_user_id as send_id,tr.req_no as send_req_no,tr.req_user_se_cd  
                    FROM 
                        tb_req tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                    WHERE 
                        ts.showroom_no = #{ID} AND ts.del_yn = 'N' AND ts.req_status_cd IN ('RS0003','RS0005','RS0006')
                        AND (tr.return_prearnge_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE = #{pickup_date}
                    ORDER BY tr.req_dt desc limit 1
                ) as send  on tb_brand.idx = send.idx
                LEFT JOIN (
                    SELECT 
                        1 as idx,tr.req_user_id as receive_id,tr.req_no as return_req_no,tr.req_user_se_cd 
                    FROM 
                        tb_req tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                    WHERE 
                        ts.showroom_no = #{ID} AND ts.del_yn = 'N' AND ts.req_status_cd IN ('RS0003','RS0005','RS0006')
                        AND (tr.duty_recpt_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE = #{return_date}
                    ORDER BY tr.req_dt desc limit 1
                ) as ret on tb_brand.idx = ret.idx
            WHERE 
                TB_A.req_no = #{req_no} and TB_A.sample_no in (
                    SELECT 
                        tss.sample_no 
                    FROM 
                        tb_req as tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                        INNER JOIN tb_showroom_sample as tss on ts.showroom_no = tss.showroom_no 		
                    WHERE tr.req_no = #{req_no} AND ts.showroom_no = #{ID}
                ) 
            RETURNING 
                (CASE WHEN send.send_req_no IS NULL THEN '0' ELSE send.send_req_no END) as send_req_no
                ,(CASE WHEN send.send_id is null then tb_brand.user_id else  send.send_id end) as send_id
                ,(CASE WHEN send.req_user_se_cd is null then 'RUS000' else  send.req_user_se_cd end) as send_user_se_cd
                ,(CASE WHEN ret.return_req_no IS NULL THEN '0' ELSE ret.return_req_no END)  as return_req_no
                ,(CASE WHEN ret.receive_id is null then tb_brand.user_id else  ret.receive_id end) as receive_id
                ,(CASE WHEN ret.receive_id is null then 'RUS000' else  ret.req_user_se_cd end) as ret_user_se_cd
        )
        , T2 AS
        (
            UPDATE tb_new_req_sample as TB_A
            SET
                return_userid  = (SELECT receive_id FROM T1 LIMIT 1),
                return_userid_type  = (SELECT ret_user_se_cd FROM T1 LIMIT 1)
            WHERE
                TB_A.req_no = (SELECT send_req_no FROM T1 LIMIT 1) and TB_A.sample_no in (
                    SELECT 
                        tss.sample_no 
                    FROM 
                        tb_req as tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                        INNER JOIN tb_showroom_sample as tss on ts.showroom_no = tss.showroom_no 		
                    WHERE tr.req_no = (SELECT send_req_no FROM T1 LIMIT 1) AND ts.showroom_no = #{ID}
                )  
        )
        , T3 AS
        (
            UPDATE tb_new_req_sample as TB_A
            SET
                sendout_userid = (SELECT send_id FROM T1 LIMIT 1),
                sendout_userid_type  = (SELECT send_user_se_cd FROM T1 LIMIT 1)  
            WHERE
                TB_A.req_no = (SELECT return_req_no FROM T1 LIMIT 1) and TB_A.sample_no in (
                    SELECT 
                        tss.sample_no 
                    FROM 
                        tb_req as tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                        INNER JOIN tb_showroom_sample as tss on ts.showroom_no = tss.showroom_no 		
                    WHERE tr.req_no = (SELECT return_req_no FROM T1 LIMIT 1) AND ts.showroom_no = #{ID}
                )  
        )
        SELECT * FROM T1
    </update>


    <!--
        요청 수락 - 동일일자 처리 by nohsn 2021-11-19
        /brand/request-accept/:req_no POST
    -->
    <update id="ACCEPT.REQUEST.SUBACTION.SAMEDATE">
        /* ACCEPT.REQUEST.SUBACTION.SAMEDATE */
        WITH T1 AS  (
            UPDATE 
                tb_new_req_sample as TB_A
            SET
                sendout_dt  = old_data.sendout_dt,
                sendout_userid = old_data.sendout_userid,
                sendout_userid_type  = old_data.sendout_userid_type,
                return_dt = #{photogrf_dt},
                return_userid  = old_data.target_old_id,   
                return_userid_type  = 'RUS001'        
            FROM 
                (
                    SELECT 
                        1 as idx,tbu.user_id  
                    FROM 
                        tb_showroom as ts INNER JOIN tb_brand_user tbu  on ts.brand_user_no = tbu.brand_user_no 
                    WHERE 
                        ts.showroom_no = #{ID}
                    limit 1
                ) as tb_brand 
                LEFT JOIN (
                    SELECT 
                       1 as idx
                       ,ts.sendout_userid,ts.sendout_userid_type,ts.sendout_dt
                       ,ts.pickup_userid as target_old_id
                       ,ts.return_userid,ts.return_userid_type
                    FROM 
                       tb_new_req_sample ts 
                    WHERE 
                        ts.req_no = #{target_data.target_req_no} and ts.sample_no in (
                            SELECT 
                                tss.sample_no 
                            FROM 
                                tb_req as tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                                INNER JOIN tb_showroom_sample as tss on ts.showroom_no = tss.showroom_no 		
                            WHERE tr.req_no = #{target_data.target_req_no} AND ts.showroom_no = #{ID}
                        )
                    ORDER BY ts.reg_dt desc limit 1
                ) as old_data on tb_brand.idx = old_data.idx
            WHERE 
                TB_A.req_no = #{my_data.target_req_no} and TB_A.sample_no in (
                    SELECT 
                        tss.sample_no 
                    FROM 
                        tb_req as tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                        INNER JOIN tb_showroom_sample as tss on ts.showroom_no = tss.showroom_no 		
                    WHERE tr.req_no = #{my_data.target_req_no} AND ts.showroom_no = #{ID}
                ) 
            RETURNING 
                TB_A.pickup_userid
                ,TB_A.sendout_userid
                ,TB_A.sendout_userid_type
                ,old_data.target_old_id 
                ,(CASE WHEN old_data.sendout_userid is null then tb_brand.user_id else old_data.sendout_userid end) as send_id
                ,(CASE WHEN old_data.sendout_userid_type is null then 'RUS000' else old_data.sendout_userid_type end) as send_user_se_cd
                ,old_data.return_userid
                ,'RUS001' as ret_user_se_cd
        )
        , T2 AS <!-- 올드녀석을 후쉰위로 변경 -->
        (
            UPDATE tb_new_req_sample as TB_A
            SET
                sendout_dt  = #{photogrf_dt},
                sendout_userid = (SELECT pickup_userid FROM T1 LIMIT 1),
                sendout_userid_type = 'RUS001',
                return_dt = #{return_date},
                return_userid  = (SELECT return_userid FROM T1 LIMIT 1),
                return_userid_type  = (SELECT return_userid_type FROM T1 LIMIT 1) 
            WHERE                
                TB_A.req_no = #{target_data.target_req_no} and TB_A.sample_no in (
                    SELECT 
                        tss.sample_no 
                    FROM 
                        tb_req as tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                        INNER JOIN tb_showroom_sample as tss on ts.showroom_no = tss.showroom_no 		
                    WHERE tr.req_no = #{target_data.target_req_no} AND ts.showroom_no = #{ID}
                )
                
        )              
        , INSERT_NOTIFI AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS03'
                , '[일정변경] ' || B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')|| '에서 샘플일정이 조정되었습니다.'
                , 
                    B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 샘플의 변경된 일정을 확인하세요.'  
                , ( SELECT req_hist_no FROM tb_req_hist a WHERE a.req_no =  #{target_data.target_req_no} and a.modifi_bfe_req_status_cd = 'RS0001' and a.modifi_aft_req_status_cd = 'RS0003' LIMIT 1 )
                , #{user_id}                
                , (SELECT target_old_id FROM T1 LIMIT 1)
                , 'brand'
                , 'confirmchange'
            FROM
            ( SELECT A.PHOTOGRF_DT, A.BRAND_ID, A.REQ_USER_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
            INNER JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
            INNER JOIN TB_MGZN_USER C ON A.REQ_USER_ID=C.USER_ID AND C.DEL_YN='N'
            INNER JOIN TB_MGZN D ON C.MGZN_ID=D.MGZN_ID AND D.DEL_YN='N'
            INNER JOIN TB_MGZN_USER E ON D.MGZN_ID=E.MGZN_ID AND E.DEL_YN='N'
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )                
        SELECT
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE
        FROM 
            INSERT_NOTIFI A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN=true
    </update>

    <!--
        요청 수락 - 동일일자 처리 by nohsn 2021-11-19
        /brand/request-accept/:req_no POST
    -->
    <update id="ACCEPT.REQUEST.SUBACTION.SAMEDATE2">
        WITH T1 AS  (
            UPDATE 
                tb_new_req_sample as TB_A
            SET
                sendout_dt  = #{photogrf_dt}, 
                sendout_userid = old_data.pickup_userid,
                sendout_userid_type  = 'RUS001' ,
                return_dt = #{return_date},
                return_userid  = (CASE WHEN ret.receive_id is null then tb_brand.user_id else  ret.receive_id end),   
                return_userid_type  = (CASE WHEN ret.receive_id is null then 'RUS000' else  ret.req_user_se_cd end)    
            FROM 
                (
                    SELECT 
                        1 as idx,tbu.user_id  
                    FROM 
                        tb_showroom as ts INNER JOIN tb_brand_user tbu  on ts.brand_user_no = tbu.brand_user_no 
                    WHERE 
                        ts.showroom_no = #{ID}
                    limit 1
                ) as tb_brand 
                LEFT JOIN (
                    SELECT 
                       1 as idx
                       ,ts.sendout_userid,ts.sendout_userid_type,ts.sendout_dt
                       ,ts.pickup_userid
                       ,ts.return_userid,ts.return_userid_type
                    FROM 
                       tb_new_req_sample ts 
                    WHERE 
                        ts.req_no = #{target_data.target_req_no} and ts.sample_no in (
                            SELECT 
                                tss.sample_no 
                            FROM 
                                tb_req as tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                                INNER JOIN tb_showroom_sample as tss on ts.showroom_no = tss.showroom_no 		
                            WHERE tr.req_no = #{target_data.target_req_no} AND ts.showroom_no = #{ID}
                        )
                    ORDER BY ts.reg_dt desc limit 1
                ) as old_data on tb_brand.idx = old_data.idx
                LEFT JOIN (
                    SELECT 
                        1 as idx,tr.req_user_id as receive_id,tr.req_no as return_req_no,tr.req_user_se_cd 
                    FROM 
                        tb_req tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                    WHERE 
                        ts.showroom_no = #{ID} AND ts.del_yn = 'N' AND ts.req_status_cd IN ('RS0003','RS0005','RS0006')
                        AND (tr.duty_recpt_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE = #{return_date}
                    ORDER BY tr.req_dt desc limit 1
                ) as ret on tb_brand.idx = ret.idx
            WHERE 
                TB_A.req_no = #{my_data.target_req_no} and TB_A.sample_no in (
                    SELECT 
                        tss.sample_no 
                    FROM 
                        tb_req as tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                        INNER JOIN tb_showroom_sample as tss on ts.showroom_no = tss.showroom_no 		
                    WHERE tr.req_no = #{my_data.target_req_no} AND ts.showroom_no = #{ID}
                ) 
            RETURNING 
                TB_A.pickup_userid
        )
        , T2 AS <!-- 올드녀석을 일부정보를 수정 -->
        (
            UPDATE tb_new_req_sample as TB_A
            SET
                return_dt = #{photogrf_dt},
                return_userid  = (SELECT pickup_userid FROM T1 LIMIT 1) ,
                return_userid_type  = 'RUS001'
            WHERE                
                TB_A.req_no = #{target_data.target_req_no} and TB_A.sample_no in (
                    SELECT 
                        tss.sample_no 
                    FROM 
                        tb_req as tr INNER JOIN tb_req_showroom as ts on tr.req_no = ts.req_no 
                        INNER JOIN tb_showroom_sample as tss on ts.showroom_no = tss.showroom_no 		
                    WHERE tr.req_no = #{target_data.target_req_no} AND ts.showroom_no = #{ID}
                )
        )       
        , INSERT_NOTIFI AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS03'
                , '[일정변경] ' || B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')|| '에서 샘플일정이 조정되었습니다.'
                , 
                    B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 샘플의 변경된 일정을 확인하세요.'
                , ( SELECT req_hist_no FROM tb_req_hist a WHERE a.req_no =  #{target_data.target_req_no} and a.modifi_bfe_req_status_cd = 'RS0001' and a.modifi_aft_req_status_cd = 'RS0003' LIMIT 1 )
                , #{user_id}
                , (SELECT target_old_id FROM T1 LIMIT 1) 
                , 'brand'
                , 'confirmchange'
            FROM
            ( SELECT A.PHOTOGRF_DT, A.BRAND_ID, A.REQ_USER_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
            INNER JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
            INNER JOIN TB_MGZN_USER C ON A.REQ_USER_ID=C.USER_ID AND C.DEL_YN='N'
            INNER JOIN TB_MGZN D ON C.MGZN_ID=D.MGZN_ID AND D.DEL_YN='N'
            INNER JOIN TB_MGZN_USER E ON D.MGZN_ID=E.MGZN_ID AND E.DEL_YN='N'
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )                
        SELECT B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE FROM INSERT_NOTIFI A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN=true
    </update>

    <!--
        요청 수락 - 매거진
        /brand/request-accept/:req_no POST
    -->
    <update id="ACCEPT.REQUEST.MAGAZINE">
        WITH
        UPDATE_TB_REQ_SHOWROOM AS
        (
            UPDATE TB_REQ_SHOWROOM
            SET
                REQ_STATUS_CD='RS0003'
            WHERE 1=1
                AND REQ_NO=#{req_no}
                AND SHOWROOM_NO IN
                    (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                AND REQ_STATUS_CD IN ('RS0001', 'RS0002')
                AND DEL_YN='N'
            RETURNING 
            (      
                SELECT 
                    REQ_STATUS_CD  
                FROM 
                    TB_REQ_SHOWROOM 
                WHERE
                    REQ_NO = #{req_no}
                    AND SHOWROOM_NO NOT IN (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                    AND REQ_STATUS_CD IN ('RS0001', 'RS0002')
                    AND DEL_YN='N' 
                ORDER BY SHOWROOM_NO LIMIT 1
            )
        )
        , IS_FINISHED AS
        (
            SELECT NOT EXISTS ( SELECT 1 FROM UPDATE_TB_REQ_SHOWROOM A WHERE  A.REQ_STATUS_CD IN ('RS0001', 'RS0002') ) AS CHK
        )
        , CUR_STATUS AS
        (
            SELECT REQ_STATUS_CD FROM TB_REQ WHERE REQ_NO = #{req_no} AND DEL_YN='N'
        )
        , INSERT_INSTORY AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            VALUES
            (
                #{req_no}
                , (SELECT REQ_STATUS_CD FROM CUR_STATUS)
                , CASE WHEN (SELECT CHK FROM IS_FINISHED) THEN 'RS0003' ELSE (SELECT REQ_STATUS_CD FROM CUR_STATUS)END
            )
            RETURNING REQ_HIST_NO,REQ_NO
        )
        , INSERT_NOTIFI AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS03'
                , '[요청확인] ' || B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')|| '에서 샘플을 요청확인했습니다.'
                , CASE
                    WHEN #{is_msg}=false
                        THEN 
                            B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 샘플을 요청확인 완료했습니다.'
                    ELSE
                        #{msg}
                END
                ,
                (
                    SELECT
                        REQ_HIST_NO
                    FROM INSERT_INSTORY
                )
                , #{user_id}
                , E.USER_ID
                , 'brand'
                , 'confirm'
            FROM
            ( SELECT A.PHOTOGRF_DT, A.BRAND_ID, A.REQ_USER_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
            INNER JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
            INNER JOIN TB_MGZN_USER C ON A.REQ_USER_ID=C.USER_ID AND C.DEL_YN='N'
            INNER JOIN TB_MGZN D ON C.MGZN_ID=D.MGZN_ID AND D.DEL_YN='N'
            INNER JOIN TB_MGZN_USER E ON D.MGZN_ID=E.MGZN_ID AND E.DEL_YN='N'
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )        
        , UPDATE_TB_REQ AS
        (
            UPDATE TB_REQ AS THIS
            SET
                REQ_STATUS_CD = CASE
                    WHEN (SELECT CHK FROM IS_FINISHED)
                        THEN 'RS0003'
                    ELSE (SELECT REQ_STATUS_CD FROM CUR_STATUS)
                END
                , CNFIRM_BRAND_USER_NO = #{brand_user_no}
                , BRAND_USER_NO = #{brand_user_no}
                , BRAND_CNFIRM_DT=CURRENT_TIMESTAMP
            WHERE 1=1
                AND REQ_NO = #{req_no}
                AND DEL_YN='N'
        )
        SELECT B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE FROM  INSERT_NOTIFI A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN=true
    </update>

     <!--
        요청 수락 - 스타일리스트
        /brand/request-accept/:req_no POST
    -->
    <update id="ACCEPT.REQUEST.STYLIST">
        WITH
        UPDATE_TB_REQ_SHOWROOM AS
        (
            UPDATE TB_REQ_SHOWROOM
            SET
                REQ_STATUS_CD='RS0003'
            WHERE 1=1
                AND REQ_NO=#{req_no}
                AND SHOWROOM_NO IN
                    (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                AND REQ_STATUS_CD IN ('RS0001', 'RS0002')
                AND DEL_YN='N'
             RETURNING 
            (      
                SELECT 
                    REQ_STATUS_CD  
                FROM 
                    TB_REQ_SHOWROOM 
                WHERE
                    REQ_NO = #{req_no}
                    AND SHOWROOM_NO NOT IN (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                    AND REQ_STATUS_CD IN ('RS0001', 'RS0002')
                    AND DEL_YN='N' 
                ORDER BY SHOWROOM_NO LIMIT 1
            )
        )
        , IS_FINISHED AS
        (
            SELECT NOT EXISTS ( SELECT 1 FROM UPDATE_TB_REQ_SHOWROOM A WHERE  A.REQ_STATUS_CD IN ('RS0001', 'RS0002') ) AS CHK
        )
        , CUR_STATUS AS ( SELECT REQ_STATUS_CD FROM TB_REQ WHERE REQ_NO = #{req_no} AND DEL_YN='N')
        , INSERT_INSTORY AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            VALUES
            (
                #{req_no}
                , (SELECT REQ_STATUS_CD FROM CUR_STATUS)
                , CASE WHEN (SELECT CHK FROM IS_FINISHED) THEN 'RS0003' ELSE (SELECT REQ_STATUS_CD FROM CUR_STATUS) END
            )
            RETURNING REQ_HIST_NO,REQ_NO
        )
        , INSERT_NOTIFI AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS03'
                , '[요청확인] ' || B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')|| '에서 샘플을 요청확인했습니다.'
                , CASE
                    WHEN #{is_msg}=false
                        THEN 
                            B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 샘플을 요청확인 완료했습니다.'
                    ELSE
                        #{msg}
                END
                ,
                ( SELECT REQ_HIST_NO FROM INSERT_INSTORY )
                , #{user_id}
                , A.REQ_USER_ID
                , 'brand'
                , 'req'
            FROM
            (
                SELECT A.PHOTOGRF_DT, A.BRAND_ID, A.REQ_USER_ID
                FROM TB_REQ A
                WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , UPDATE_TB_REQ AS
        (
            UPDATE TB_REQ AS THIS
            SET
                REQ_STATUS_CD = CASE WHEN (SELECT CHK FROM IS_FINISHED) THEN 'RS0003' ELSE (SELECT REQ_STATUS_CD FROM CUR_STATUS) END
                , CNFIRM_BRAND_USER_NO = #{brand_user_no}
                , BRAND_USER_NO = #{brand_user_no}
                , BRAND_CNFIRM_DT=CURRENT_TIMESTAMP
            WHERE REQ_NO = #{req_no} AND DEL_YN='N'
        )
        SELECT
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE
        FROM 
            INSERT_NOTIFI A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN=true
    </update>

    <!--
        요청 거절 - 매거진
        /brand/request-refuse/:req_no POST
    -->
    <update id="REFUSE.REQUEST.MAGAZINE">
        WITH
        UPDATE_TB_REQ_SHOWROOM AS
        (
            UPDATE TB_REQ_SHOWROOM
            SET REQ_STATUS_CD='RS0004'
            WHERE 1=1
                AND REQ_NO=#{req_no}
                AND SHOWROOM_NO IN
                    (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                AND REQ_STATUS_CD IN ('RS0001', 'RS0002')
                AND DEL_YN='N'
            RETURNING REQ_STATUS_CD, REQ_NO, DEL_YN
        )
        , IS_COMPLETED AS
        (
            SELECT NOT EXISTS(
                SELECT
                    1
                FROM TB_REQ_SHOWROOM
                WHERE 1=1
                    AND REQ_NO=#{req_no}
                    AND SHOWROOM_NO NOT IN
                        (
                            <foreach collection="showroom_list" item="ID" separator=",">
                                #{ID}
                            </foreach>
                        )
                    AND REQ_STATUS_CD IN ('RS0001', 'RS0002')
                    AND DEL_YN='N'
            ) AS COMP
        )
        , IS_CONFIRMED AS
        (
            SELECT EXISTS(
                SELECT
                    1
                FROM TB_REQ_SHOWROOM
                WHERE 1=1
                    AND REQ_NO=#{req_no}
                    AND SHOWROOM_NO NOT IN
                        (
                            <foreach collection="showroom_list" item="ID" separator=",">
                                #{ID}
                            </foreach>
                        )
                    AND REQ_STATUS_CD ='RS0003'
                    AND DEL_YN='N'
            ) AS COMP
        )
        , NEW_REQ_STATUS AS
        (
            SELECT CASE
                WHEN (SELECT COMP FROM IS_COMPLETED)
                    THEN CASE WHEN (SELECT COMP FROM IS_CONFIRMED)
                        THEN 'RS0003'
                    ELSE 'RS0004'
                    END
                ELSE 'RS0002'
            END AS REQ_STATUS
        )
        , INSERT_INSTORY AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            VALUES
            (
                #{req_no}
                , ( SELECT REQ_STATUS_CD FROM TB_REQ WHERE REQ_NO = #{req_no} AND DEL_YN='N' )
                , (SELECT REQ_STATUS FROM NEW_REQ_STATUS)
            )
            RETURNING REQ_HIST_NO,REQ_NO
        )
        , INSERT_NOTIFI AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS04'
                , '[요청거절] '
                    || B.BRAND_NM
                    ||' '
                    || (
                        SELECT
                            USER_NM
                        FROM TB_BRAND_USER
                        WHERE 1=1
                            AND USER_ID=#{user_id}
                            AND DEL_YN='N'
                        )
                    || '에서 요청을 거절했습니다.'
                , CASE
                    WHEN #{is_msg}=false
                        THEN
                            B.BRAND_NM
                            ||' '
                            || (
                                SELECT USER_NM
                                FROM TB_BRAND_USER
                                WHERE 1=1
                                    AND USER_ID=#{user_id}
                                    AND DEL_YN='N'
                                )
                            ||'에서 '
                            ||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE
                            ||' 촬영 건 샘플요청을 거절했습니다.'
                    ELSE
                        #{msg}
                END
                , (SELECT REQ_HIST_NO FROM INSERT_INSTORY LIMIT 1)
                , #{user_id}
                , E.USER_ID
                ,'brand'
                , 'req'
            FROM
            (
                SELECT A.PHOTOGRF_DT, A.BRAND_ID, A.REQ_USER_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
            INNER JOIN TB_MGZN_USER C ON A.REQ_USER_ID=C.USER_ID AND C.DEL_YN='N'
            INNER JOIN TB_MGZN D ON C.MGZN_ID=D.MGZN_ID AND D.DEL_YN='N'
            INNER JOIN TB_MGZN_USER E ON D.MGZN_ID=E.MGZN_ID AND E.DEL_YN='N'
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , UPDATE_TB_REQ AS
        (
            UPDATE TB_REQ AS THIS
            SET
                REQ_STATUS_CD = (SELECT REQ_STATUS FROM NEW_REQ_STATUS)
            WHERE 1=1
                AND REQ_NO = #{req_no}
                AND DEL_YN='N'
        )
        SELECT
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE
        FROM INSERT_NOTIFI A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </update>

    <!--
        요청 거절 - 스타일리스트
        /brand/request-refuse/:req_no POST
    -->
    <update id="REFUSE.REQUEST.STYLIST">
        WITH
        UPDATE_TB_REQ_SHOWROOM AS
        (
            UPDATE TB_REQ_SHOWROOM
            SET REQ_STATUS_CD='RS0004'
            WHERE 1=1
                AND REQ_NO=#{req_no}
                AND SHOWROOM_NO IN
                    (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                AND REQ_STATUS_CD IN ('RS0001', 'RS0002')
                AND DEL_YN='N'
            RETURNING REQ_STATUS_CD, REQ_NO, DEL_YN
        )
        , IS_COMPLETED AS
        (
            SELECT NOT EXISTS(
                SELECT
                    1
                FROM TB_REQ_SHOWROOM
                WHERE 1=1
                    AND REQ_NO=#{req_no}
                    AND SHOWROOM_NO NOT IN
                        (
                            <foreach collection="showroom_list" item="ID" separator=",">
                                #{ID}
                            </foreach>
                        )
                    AND REQ_STATUS_CD IN ('RS0001', 'RS0002')
                    AND DEL_YN='N'
            ) AS COMP
        )
        , IS_CONFIRMED AS
        (
            SELECT EXISTS(
                SELECT
                    1
                FROM TB_REQ_SHOWROOM
                WHERE 1=1
                    AND REQ_NO=#{req_no}
                    AND SHOWROOM_NO NOT IN
                        (
                            <foreach collection="showroom_list" item="ID" separator=",">
                                #{ID}
                            </foreach>
                        )
                    AND REQ_STATUS_CD ='RS0003'
                    AND DEL_YN='N'
            ) AS COMP
        )
        , NEW_REQ_STATUS AS
        (
            SELECT CASE
                WHEN (SELECT COMP FROM IS_COMPLETED)
                    THEN CASE WHEN (SELECT COMP FROM IS_CONFIRMED)
                        THEN 'RS0003'
                    ELSE 'RS0004'
                    END
                ELSE 'RS0002'
            END AS REQ_STATUS
        )
        , INSERT_INSTORY AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            VALUES
            (
                #{req_no}
                , (
                    SELECT REQ_STATUS_CD
                    FROM TB_REQ
                    WHERE 1=1
                        AND REQ_NO = #{req_no}
                        AND DEL_YN='N'
                )
                , (SELECT REQ_STATUS FROM NEW_REQ_STATUS)
            )
            RETURNING REQ_HIST_NO,REQ_NO
        )
        , INSERT_NOTIFI AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS04'
                , '[요청거절] '
                    || B.BRAND_NM
                    ||' '
                    || (
                        SELECT
                            USER_NM
                        FROM TB_BRAND_USER
                        WHERE 1=1
                            AND USER_ID=#{user_id}
                            AND DEL_YN='N'
                        )
                    || '에서 요청을 거절했습니다.'
                , CASE
                    WHEN #{is_msg}=false
                        THEN
                            B.BRAND_NM
                            ||' '
                            || (
                                SELECT USER_NM
                                FROM TB_BRAND_USER
                                WHERE 1=1
                                    AND USER_ID=#{user_id}
                                    AND DEL_YN='N'
                                )
                            ||'에서 '
                            ||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE
                            ||' 촬영 건 샘플요청을 거절했습니다.'
                    ELSE
                        #{msg}
                END
                , (SELECT REQ_HIST_NO FROM INSERT_INSTORY LIMIT 1)
                , #{user_id}
                , A.REQ_USER_ID
                ,'brand'
                , 'req'
            FROM
            (
                SELECT
                    A.PHOTOGRF_DT
                    , A.BRAND_ID
                    , A.REQ_USER_ID
                FROM TB_REQ A
                WHERE 1=1
                    AND A.REQ_NO=#{req_no}
                    AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_BRAND B
            ON 1=1
                AND A.BRAND_ID=B.BRAND_ID
                AND B.DEL_YN='N'
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , UPDATE_TB_REQ AS
        (
            UPDATE TB_REQ AS THIS
            SET
                REQ_STATUS_CD = (SELECT REQ_STATUS FROM NEW_REQ_STATUS)
            WHERE 1=1
                AND REQ_NO = #{req_no}
                AND DEL_YN='N'
        )
        SELECT
            B.TOKEN_VALUE
            , A.NOTIFI_SUBJ AS MESSAGE
        FROM INSERT_NOTIFI A
        JOIN TB_FCM_PUSH_TOKEN B
        ON 1=1
            AND A.RECV_USER_ID = B.USER_ID
            AND B.USE_YN
    </update>

    <!--
        내 정보 조회
        /brand/my-info GET
    -->
    <select id="SELECT.MY.INFO">
        /* SELECT.MY.INFO */
        SELECT
            A.USER_NM AS BRAND_USER_NM
            , A.BRAND_ID
            , A.BRAND_POS_CD AS USER_POSITION_ID
            , A.PHONE_NO
            , A.EMAIL_ADRES
            , A.POST_NO
            , A.ADRES
            , A.ADRES_DETAIL
            , A.IMG_URL_ADRES
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || A.IMG_URL_ADRES AS IMG_FULL_PATH
            , A.TEAM_USER_ID AS TEAMMATE_ID
            , B.BRAND_NM
            , B.COMPY_NM AS COMPANY_NM
            , C.CD_NM AS USER_POSITION
            , D.USER_NM AS TEAMMATE_NM
            , EXISTS
            ( SELECT 1 FROM TB_REQ_HIST_NOTIFI L WHERE L.RECV_USER_ID=#{user_id} AND L.RECV_CNFIRM_YN IS FALSE AND L.DEL_YN='N' ) AS UNREAD_NOTIFICATIONS
            , E.SUBSCR_NO
            -- , E.SUBSCR_SE_CD AS SUBSCR_TYPE
            , CASE
                WHEN E.SUBSCR_SE_CD = 'SBS001'
                THEN 'TRIAL'
                WHEN E.SUBSCR_SE_CD = 'SBS002'
                THEN 'MONTH'
                WHEN E.SUBSCR_SE_CD = 'SBS003'
                THEN 'YEAR'
            END AS SUBSCR_TYPE
            , CASE
                WHEN E.NEXT_SUBSCR_SE_CD = 'SBS001'
                THEN 'TRIAL'
                WHEN E.NEXT_SUBSCR_SE_CD = 'SBS002'
                THEN 'MONTH'
                WHEN E.NEXT_SUBSCR_SE_CD = 'SBS003'
                THEN 'YEAR'
            END AS NEXT_SUBSCR_TYPE
            , E.SUBSCR_CHRGE_AMT
            , (
                SELECT CD_NM
                FROM TB_COMM_CD
                WHERE 1=1
                    AND TB_COMM_CD.CD_TYP_ID = 'CT00000004'
                    AND TB_COMM_CD.CD_ID = E.SUBSCR_STATUS_CD
                    AND DEL_YN='N'
                LIMIT 1
            ) AS SUBSCR_STATUS
            , E.SETTLE_COMPLET_YN AS PAYMENT_COMPLETE
            , E.CANC_YN AS SUBSCRIPTION_CANCELED
            , E.REFUND_COMPLET_YN
            , E.END_YN AS SUBSCRIPTION_ENDED
            , E.SUBSCR_NO IS NOT NULL AS SUBSCR_YN <!--구독된 상태인지-->
            , B.TRIAL_AVAILABLE_YN AS TRIAL_SUBSCR_AVAILABLE <!-- 체험판 구독 가능한지 -->
            , FLOOR(DATE_PART('epoch'::TEXT, E.SUBSCR_BEGIN_DE))::BIGINT AS SUBSCR_BEGIN_DT <!--구독 시작일-->
            , FLOOR(DATE_PART('epoch'::TEXT, E.SUBSCR_END_DE))::BIGINT AS SUBSCR_END_DT <!--구독 만료일-->
            , A.REQ_NOTIFI_RECV_YN
            , A.NOTICE_NOTIFI_RECV_YN
            , FLOOR(DATE_PART('epoch'::TEXT, A.NOT_DISTURB_BEGIN_DT))::BIGINT AS NOT_DISTURB_BEGIN_DT
            , FLOOR(DATE_PART('epoch'::TEXT, A.NOT_DISTURB_END_DT))::BIGINT AS NOT_DISTURB_END_DT
            , A.NOT_DISTURB_MODE_YN
            , A.SAMPLE_NOT_RECV_NOTIFI_YN
        FROM
        (
            SELECT
                A.USER_ID
                , A.USER_NM
                , A.BRAND_ID
                , A.BRAND_POS_CD
                , A.PHONE_NO
                , A.EMAIL_ADRES
                , A.POST_NO
                , A.ADRES
                , A.ADRES_DETAIL
                , A.IMG_URL_ADRES
                , A.TEAM_USER_ID
                , A.REQ_NOTIFI_RECV_YN
                , A.NOTICE_NOTIFI_RECV_YN
                , A.NOT_DISTURB_MODE_YN
                , A.SAMPLE_NOT_RECV_NOTIFI_YN
                , A.NOT_DISTURB_BEGIN_DT
                , A.NOT_DISTURB_END_DT
            FROM TB_BRAND_USER A
            WHERE 1=1
                AND A.USER_ID = #{user_id}
        ) A
        INNER JOIN TB_BRAND B ON A.BRAND_ID = B.BRAND_ID AND B.DEL_YN='N'
        LEFT JOIN TB_COMM_CD C ON C.CD_TYP_ID = 'CT00000012' AND A.BRAND_POS_CD=C.CD_ID AND C.DEL_YN='N'
        LEFT JOIN TB_BRAND_USER D ON A.TEAM_USER_ID=D.USER_ID AND D.DEL_YN='N'
        LEFT JOIN TB_SUBSCR E ON A.BRAND_ID = E.BRAND_ID AND E.END_YN IS FALSE AND E.SUBSCR_STATUS_CD = 'SBST02'
    </select>

    <!--
        홈 조회
        /brand/home GET
    -->
    <select id="SELECT.HOME.001">
        SELECT
            A.REQ_NO
            , FLOOR(DATE_PART('epoch'::TEXT, A.REQ_DT ))::BIGINT AS BRAND_CNFIRM_DT
            , FLOOR(DATE_PART('epoch'::TEXT, A.REQ_DT ))::BIGINT AS REQ_DT
            , A.TOTAL_COUNT
            , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN C.MGZN_NM ELSE NULL END AS MGZN_NM
            , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', C.MGZN_LOGO_URL_ADRES)  AS MGZN_LOGO_URL_ADRES
            , D.USER_NM AS EDITOR_NM
            , (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=D.MGZN_POS_CD LIMIT 1) AS EDITOR_POSI
            , A.MODEL_LIST
            , A.CELEB_LIST
        FROM
            (
                SELECT
                    A.REQ_NO
                    , A.REQ_USER_ID
                    , A.REQ_DT
                    , A.MODEL_LIST
                    , A.CELEB_LIST
                    , A.CONTACT_USER_ID
                    , A.REQ_USER_SE_CD
                    , A.brand_cnfirm_dt
                    , COUNT(1) OVER() AS TOTAL_COUNT
                FROM TB_REQ A
                WHERE 1=1
                    AND A.DEL_YN='N'
                    AND (A.REQ_STATUS_CD='RS0001' OR A.REQ_STATUS_CD='RS0002')
                    AND A.BRAND_ID=#{brand_id}
            ) A
            LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
            LEFT JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER D ON A.CONTACT_USER_ID=D.USER_ID AND D.DEL_YN='N'        
        ORDER BY A.brand_cnfirm_dt DESC
    </select>

    <!--
        사용자 홈페이지
        /home GET
    -->

    <select id="SELECT.HOME.002">
        SELECT
            A.REQ_NO
            , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS DATE
            , C.MGZN_NM
            , A.TOTAL_COUNT
            , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', C.MGZN_LOGO_URL_ADRES) AS MGZN_LOGO_URL_ADRES
            , D.USER_NM AS EDITOR_NM
            , (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=D.MGZN_POS_CD LIMIT 1) AS EDITOR_POSI
            , A.MODEL_LIST
            , A.CELEB_LIST
        FROM
        (
            SELECT
                A.REQ_NO
                , A.DUTY_RECPT_DT
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.REQ_USER_ID
                , A.CONTACT_USER_ID
                , COUNT(1) OVER() AS TOTAL_COUNT
            FROM TB_REQ A
            WHERE 1=1
                AND A.BRAND_ID = #{brand_id}
                AND A.DEL_YN='N'
                AND A.REQ_STATUS_CD = 'RS0003'
                AND TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'DD') = TO_CHAR(TO_TIMESTAMP(#{date}::BIGINT)AT TIME ZONE 'Asia/Seoul', 'DD' )
        ) A
        LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
        LEFT JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
        LEFT JOIN TB_MGZN_USER D ON A.CONTACT_USER_ID=D.USER_ID AND D.DEL_YN='N'
    </select>

    <!--
        사용자 홈페이지
        /home GET
    -->

    <select id="SELECT.HOME.003">
        SELECT
            TO_CHAR(A, 'YYYY') AS YEAR , TO_CHAR(A, 'MM') AS MONTH, COUNT(req_no) AS COUNT
        FROM 
            GENERATE_SERIES(NOW() - INTERVAL '1 year', NOW(), '1 month') AS A
            LEFT JOIN TB_REQ B ON TO_CHAR(A, 'YYYY') = TO_CHAR(B.INPUT_DT, 'YYYY') and TO_CHAR(A, 'MM') = TO_CHAR(B.INPUT_DT, 'MM') AND B.BRAND_ID=#{brand_id} AND B.DEL_YN='N'
        WHERE TO_CHAR(A,'YYYYMM')>=TO_CHAR((SELECT INPUT_DT FROM TB_BRAND WHERE BRAND_ID=#{brand_id} AND DEL_YN='N' ORDER BY INPUT_DT ASC LIMIT 1),'YYYYMM')
        GROUP BY YEAR,MONTH
        ORDER by YEAR,MONTH
    </select>

    <!--
        사용자 홈페이지
        /home GET
    -->

    <select id="SELECT.HOME.004">
        SELECT
            TO_CHAR(A, 'YYYY') AS YEAR, TO_CHAR(A, 'MM') AS MONTH, COUNT(B.REQ_NO)
        FROM 
            GENERATE_SERIES(NOW() - INTERVAL '1 year', NOW(), '1 month') AS A
            LEFT JOIN TB_REQ B ON TO_CHAR(A, 'YYYY') = TO_CHAR(B.DUTY_RECPT_DT, 'YYYY') AND TO_CHAR(A, 'MM') = TO_CHAR(B.DUTY_RECPT_DT, 'MM') AND B.BRAND_ID=#{brand_id}
            AND B.DEL_YN='N' AND ( B.REQ_STATUS_CD='RS0005' OR B.REQ_STATUS_CD='RS0006' )
        WHERE TO_CHAR(A,'YYYYMM')>=TO_CHAR((SELECT INPUT_DT FROM TB_BRAND WHERE BRAND_ID=#{brand_id} AND DEL_YN='N' ORDER BY INPUT_DT ASC LIMIT 1),'YYYYMM')
        GROUP BY YEAR,MONTH
        ORDER BY YEAR,MONTH
    </select>

    <!--
        매거진별 샘플요청기록
        /home GET
    -->

    <select id="SELECT.HOME.005">
        SELECT
            C.MGZN_NM,B.MGZN_ID,COUNT(B.MGZN_ID)
        FROM 
            (
                SELECT A.REQ_USER_ID FROM TB_REQ A WHERE A.BRAND_ID=#{brand_id} AND A.DEL_YN='N' AND interval '1 year'>now()-A.RETURN_PREARNGE_DT
            ) A
            INNER JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
            INNER JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
        GROUP BY C.MGZN_NM,B.MGZN_ID
        ORDER BY C.MGZN_NM
    </select>

    <!--
        새로운 요청 전체조회
        /home/new-request GET
    -->

    <select id="SELECT.HOME.LIST.001">
        SELECT
            T.REQ_NO
            , T.BRAND_CNFIRM_DT
            , T.REQ_DT
            , T.MGZN_NM
            , T.MGZN_LOGO_URL_ADRES
            , T.EDITOR_NM
            , T.EDITOR_POSI
            , T.MODEL_LIST
            , T.CELEB_LIST
            , T.TOTAL_COUNT
        FROM
        (
            SELECT
                A.REQ_NO
                , FLOOR(DATE_PART('epoch'::TEXT, A.REQ_DT ))::BIGINT AS BRAND_CNFIRM_DT
                , FLOOR(DATE_PART('epoch'::TEXT, A.REQ_DT ))::BIGINT AS REQ_DT
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN C.MGZN_NM ELSE D.POSI_COMPY_NM END AS MGZN_NM
                , CONCAT
                (
                    (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                    , C.MGZN_LOGO_URL_ADRES
                ) AS MGZN_LOGO_URL_ADRES
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN B.USER_NM ELSE D.USER_NM END AS EDITOR_NM
                , CASE
                    WHEN A.REQ_USER_SE_CD='RUS001' THEN (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=B.MGZN_POS_CD LIMIT 1)
                    ELSE (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=D.STYLE_LIST_POS_CD LIMIT 1)
                END AS EDITOR_POSI
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.TOTAL_COUNT
            FROM
            (
                SELECT
                    A.REQ_NO
                    , A.REQ_DT
                    , A.MODEL_LIST
                    , A.CELEB_LIST
                    , A.REQ_USER_ID
                    , A.CONTACT_USER_ID
                    , A.REQ_USER_SE_CD
                    , COUNT(1) OVER() AS TOTAL_COUNT
                FROM TB_REQ A
                WHERE 1=1
                    AND A.BRAND_ID=#{brand_id}
                    AND (A.REQ_STATUS_CD='RS0001' OR A.REQ_STATUS_CD='RS0002')
                    AND A.DEL_YN='N'
            ) A
            LEFT JOIN TB_MGZN_USER B ON A.CONTACT_USER_ID=B.USER_ID AND A.REQ_USER_SE_CD='RUS001' AND B.DEL_YN='N'
            LEFT JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER D ON A.REQ_USER_ID=D.USER_ID AND A.REQ_USER_SE_CD='RUS002' AND D.DEL_YN='N'
            ORDER BY A.REQ_DT DESC
        ) T
        <if test="limit">
            OFFSET ${offset}
            LIMIT ${limit}
        </if>
    </select>

    <!--
        오늘의 요청 전체조회
        /home/today-request GET
    -->

    <select id="SELECT.HOME.LIST.002">
        /* SELECT.HOME.LIST.002 */
        SELECT
            T.REQ_NO
            , T.DATE
            , T.MGZN_NM
            , T.MGZN_LOGO_URL_ADRES
            , T.EDITOR_NM
            , T.EDITOR_POSI
            , T.MODEL_LIST
            , T.CELEB_LIST
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT
                A.REQ_NO
                , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS DATE
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN C.MGZN_NM ELSE D.POSI_COMPY_NM END AS MGZN_NM
                , CONCAT
                (
                    (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                    , C.MGZN_LOGO_URL_ADRES
                ) AS MGZN_LOGO_URL_ADRES
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN B.USER_NM ELSE D.USER_NM END AS EDITOR_NM
                , CASE
                    WHEN A.REQ_USER_SE_CD='RUS001' THEN (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=B.MGZN_POS_CD LIMIT 1)
                    ELSE (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=D.STYLE_LIST_POS_CD LIMIT 1)
                END AS EDITOR_POSI
                , A.MODEL_LIST
                , A.CELEB_LIST
            FROM 
            (
                SELECT
                    A.REQ_NO
                    , A.REQ_DT
                    , A.MODEL_LIST
                    , A.CELEB_LIST
                    , A.REQ_USER_ID
                    , A.CONTACT_USER_ID
                    , A.REQ_USER_SE_CD
                    , A.DUTY_RECPT_DT
                FROM TB_REQ A
                WHERE 1=1
                    AND A.BRAND_ID=#{brand_id}
                    AND A.REQ_STATUS_CD='RS0003'
                    AND TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'DD') = TO_CHAR(TO_TIMESTAMP(#{date}::BIGINT)AT TIME ZONE 'Asia/Seoul', 'DD' )
                    AND A.DEL_YN='N'
            ) A
            LEFT JOIN TB_MGZN_USER B ON A.CONTACT_USER_ID=B.USER_ID AND A.REQ_USER_SE_CD='RUS001' AND B.DEL_YN='N'
            LEFT JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER D ON A.REQ_USER_ID=D.USER_ID AND A.REQ_USER_SE_CD='RUS002' AND D.DEL_YN='N'
        ) T
        <if test="limit">
            OFFSET ${offset}
            LIMIT ${limit}
        </if>
    </select>

    <!--
        샘플요청의 상세정보 조회
        /brand/request-detailed/:req_no
    -->

    <select id="SELECT.REQUEST.DETAILED.001">
        SELECT
            CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN B.USER_NM ELSE F.USER_NM END AS REQ_MGZN_USERNAME
            , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN C.MGZN_NM ELSE F.POSI_COMPY_NM END AS MGZN_NM
            , CONCAT
                    (
                        (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                        , C.MGZN_LOGO_URL_ADRES
                    ) AS MGZN_LOGO_URL_ADRES
            , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN D.USER_NM  ELSE F.USER_NM END AS CONTACT_MGZN_USERNAME
            , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN D.PHONE_NO  ELSE F.PHONE_NO
            END AS CONTACT_MGZN_PHONE_NO
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_PREARNGE_BEGIN_DT ))::BIGINT AS SHOOTING_START_TIME
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_PREARNGE_END_DT ))::BIGINT AS SHOOTING_END_TIME
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT AS SHOOTING_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS PICKUP_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS RETURNING_DATE
            , E.DLVY_ADRES_NM
            , E.POST_NO
            , A.DLVY_ATENT_MATTER
            , A.PHOTOGRF_CONCEPT
            , A.PHOTOGRF_MODL_NM
            , G.CD_NM AS MODL_TYPE
            , A.PCHRG_PICALBM_YN AS IS_IT_YUKAHWABO
            , A.PCHRG_PICALBM_CNTENT AS YUKAHWABO_CONTENT
            , A.TODAY_CONNECT_HOPE_POSBL_YN AS TODAY_CONNECT
            , A.PAGE_CNT
            , A.ETC_BRAND_INFO
            , A.ADD_REQ_CNTENT AS MESSAGE
        FROM
        (
            SELECT
                A.REQ_USER_ID
                , A.CONTACT_USER_ID
                , A.PHOTOGRF_MODL_SE_CD
                , A.DLVY_ATENT_MATTER
                , A.PHOTOGRF_CONCEPT
                , A.PHOTOGRF_MODL_NM
                , A.PCHRG_PICALBM_YN
                , A.PCHRG_PICALBM_CNTENT
                , A.TODAY_CONNECT_HOPE_POSBL_YN
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.ADD_REQ_CNTENT
                , A.REQ_USER_SE_CD
                , A.DLVY_ADRES_NO
                , A.PHOTOGRF_PREARNGE_BEGIN_DT
                , A.PHOTOGRF_PREARNGE_END_DT
                , A.PHOTOGRF_DT
                , A.DUTY_RECPT_DT
                , A.RETURN_PREARNGE_DT
            FROM TB_REQ A
            WHERE A.REQ_NO=#{req_no} AND A.BRAND_ID=#{brand_id} AND A.DEL_YN='N'
        ) A
        INNER JOIN TB_COMM_CD G ON A.PHOTOGRF_MODL_SE_CD=G.CD_ID AND G.CD_TYP_ID='CT00000001'
        LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND A.REQ_USER_SE_CD='RUS001' AND B.DEL_YN='N'
        LEFT JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
        LEFT JOIN TB_MGZN_USER D ON A.CONTACT_USER_ID=D.USER_ID AND D.DEL_YN='N'
        LEFT JOIN TB_DLVY_ADRES E ON A.DLVY_ADRES_NO=E.DLVY_ADRES_NO AND E.DEL_YN='N'
        LEFT JOIN TB_STYLE_LIST_USER F ON A.REQ_USER_ID=B.USER_ID AND A.REQ_USER_SE_CD='RUS002' AND F.DEL_YN='N'
    </select>

    <select id="SELECT.REQUEST.DETAILED.002">
        SELECT
            A.SHOWROOM_NO
            , CASE WHEN A.REQ_STATUS_CD='RS0003' THEN 'confirmed' WHEN A.REQ_STATUS_CD='RS0004' THEN 'cancelled' ELSE 'pending' END AS SHOWROOM_STATUS
            , B.SHOWROOM_NM
            , CONCAT
            (
                (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                , G.IMG_URL_ADRES
            ) AS IMAGE_URL
            , CASE 
                WHEN C.REQ_USER_SE_CD='RUS001' THEN ARRAY_AGG
                    (
                        DISTINCT ARRAY
                        [
                            D.USER_NM
                            , E.MGZN_NM
                            , CONCAT
                            (
                                (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                                , E.MGZN_LOGO_URL_ADRES
                            )
                        ]
                    )
                ELSE ARRAY_AGG
                    (
                        DISTINCT ARRAY
                        [
                            H.USER_NM
                            , H.POSI_COMPY_NM
                            , CONCAT
                            (
                                (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                                , NULL
                            )
                        ]
                    )
            END AS USER_INFO
        FROM
        (
            SELECT A.SHOWROOM_NO, A.REQ_NO, A.REQ_STATUS_CD
            FROM TB_REQ_SHOWROOM A
            WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N'
        ) A
        INNER JOIN TB_SHOWROOM B ON A.SHOWROOM_NO=B.SHOWROOM_NO AND B.DEL_YN='N'
        INNER JOIN TB_REQ C ON A.REQ_NO=C.REQ_NO AND C.DEL_YN='N' AND (C.REQ_STATUS_CD='RS0001' OR C.REQ_STATUS_CD='RS0002')
        INNER JOIN TB_SHOWROOM_SAMPLE F ON A.SHOWROOM_NO=F.SHOWROOM_NO AND F.DEL_YN='N'
        INNER JOIN TB_SAMPLE_IMG G ON F.SAMPLE_NO=G.SAMPLE_NO AND G.DEL_YN='N' AND G.SHOWROOM_MAIN_YN=true
        LEFT JOIN TB_MGZN_USER D ON C.REQ_USER_ID=D.USER_ID AND C.REQ_USER_SE_CD='RUS001' AND D.DEL_YN='N'
        LEFT JOIN TB_MGZN E ON D.MGZN_ID=E.MGZN_ID AND E.DEL_YN='N'
        LEFT JOIN TB_STYLE_LIST_USER H ON C.REQ_USER_ID=H.USER_ID AND C.REQ_USER_SE_CD='RUS002' AND H.DEL_YN='N'
        GROUP BY A.SHOWROOM_NO,B.SHOWROOM_NM, IMAGE_URL
    </select>

    <!--
        스케줄 계절리스트 출력
        /brand/my-schedule-date
    -->
    <select id="SELECT.SCHEDULE.SEASON.LIST">
        SELECT
            A.SEASON_YEAR
            , A.SEASON_CD_ID
            , SEASON.CD_NM AS SEASON_TEXT
            , SEASON.CD_SIMPLE_NM AS SEASON_SIMPLE_TEXT
        FROM
        (
            SELECT DISTINCT A.SEASON_YEAR , A.SEASON_SE_CD AS SEASON_CD_ID FROM TB_SHOWROOM A WHERE A.DEL_YN = 'N' AND A.BRAND_ID = #{brand_id}
        ) A
        LEFT JOIN TB_COMM_CD SEASON ON A.SEASON_CD_ID = SEASON.CD_ID AND ( SEASON.BRAND_ID = '' OR SEASON.BRAND_ID = #{brand_id} ) AND SEASON.CD_TYP_ID = 'CT00000008' AND SEASON.DEL_YN = 'N'
        ORDER BY A.SEASON_YEAR DESC , SEASON.ORDER_VALUE DESC
    </select>

    <!--
        스케줄을 출력합니다 (날짜 분류)
        /brand/my-schedule
    -->
    <select id="SELECT.SCHEDULE.DATE">
        SELECT
            T.SHOWROOM_NO, T.SEASON_YEAR, T.SEASON_SE_CD, T.SHOWROOM_NM, T.IMAGE_LIST, T.REQ_LIST, T.REQ_WAIT_LIST, T.SHOWROOM_MEMO_LIST, T.MEMO_LIST
        FROM
        (
            SELECT
                C.SHOWROOM_NO, C.SEASON_YEAR, C.SEASON_SE_CD, C.SHOWROOM_NM
                ,CONCAT(( SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1), '/', F.IMG_URL_ADRES ) AS IMAGE_LIST
                ,COALESCE(JSONB_AGG( DISTINCT JSONB_BUILD_OBJECT(
                    'req_no', G.REQ_NO
                    ,'company_type', 'MAGAZINE'
                    ,'company_name', J.MGZN_NM 
                    ,'start_dt', FLOOR(DATE_PART('epoch'::TEXT, G.photogrf_dt))::BIGINT
                    ,'end_dt', FLOOR(DATE_PART('epoch'::TEXT, G.photogrf_dt))::BIGINT
                    ,'req_user_nm', I.USER_NM
                    ,'contact_user_nm', L.USER_NM
                    ,'mgzn_logo_adres', (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1) || '/' || J.MGZN_LOGO_URL_ADRES
                    ,'mgzn_color', J.COLOR
                    ,'address', K.DLVY_ADRES_NM
                    ,'contact_user_phone', L.PHONE_NO
                    ,'loc_yn', G.LOC_YN
                    ,'pchrg_picalbm_yn', G.PCHRG_PICALBM_YN
                    ,'req_dt', FLOOR(DATE_PART('epoch'::TEXT, G.REQ_DT))::BIGINT
                    ,'own_paid_pictorial_yn', G.OWN_PAID_PICTORIAL_YN
                    ,'other_paid_pictorial_yn', G.OTHER_PAID_PICTORIAL_YN
                ) ) FILTER(WHERE G.REQ_STATUS_CD IN ('RS0003', 'RS0005', 'RS0006')), null) AS REQ_LIST
                , JSONB_AGG
                (
                    JSONB_BUILD_OBJECT
                    (
                        'req_no', G.REQ_NO
                        ,'company_type', 'MAGAZINE'
                        ,'company_name', J.MGZN_NM
                        <!-- ,'start_dt', FLOOR(DATE_PART('epoch'::TEXT, G.DUTY_RECPT_DT))::BIGINT
                        ,'end_dt', FLOOR(DATE_PART('epoch'::TEXT, G.RETURN_PREARNGE_DT))::BIGINT -->
                        ,'start_dt', FLOOR(DATE_PART('epoch'::TEXT, G.photogrf_dt))::BIGINT
                        ,'end_dt', FLOOR(DATE_PART('epoch'::TEXT, G.photogrf_dt))::BIGINT
                        ,'photogrf_dt',(G.photogrf_prearnge_begin_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst'):: DATE
                        ,'req_user_nm', I.USER_NM
                        ,'contact_user_nm', L.USER_NM
                        ,'mgzn_logo_adres', (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1) || '/' || J.MGZN_LOGO_URL_ADRES
                        ,'mgzn_color', J.COLOR
                        ,'address', K.DLVY_ADRES_NM
                        ,'contact_user_phone', L.PHONE_NO
                        ,'loc_yn', G.LOC_YN
                        ,'pchrg_picalbm_yn', G.PCHRG_PICALBM_YN
                        ,'req_dt', FLOOR(DATE_PART('epoch'::TEXT, G.REQ_DT))::BIGINT
                        ,'own_paid_pictorial_yn', G.OWN_PAID_PICTORIAL_YN
                        ,'other_paid_pictorial_yn', G.OTHER_PAID_PICTORIAL_YN
                    ) 
                    ORDER BY G.REQ_DT
                ) FILTER(WHERE G.REQ_STATUS_CD = 'RS0001') AS REQ_WAIT_LIST
                , (
                    SELECT JSONB_AGG(JSONB_BUILD_OBJECT(
                        'memo_no', MEMO_NO
                        ,'color', COLOR
                        ,'content', CONTENT
                    ))
                    FROM TB_MEMO D
                    WHERE D.SHOWROOM_NO = C.SHOWROOM_NO AND D.BRAND_ID = #{brand_id} AND D.DEL_YN='N' AND D.MEMO_DT IS NULL
                ) AS SHOWROOM_MEMO_LIST
                , (
                    SELECT JSONB_AGG(JSONB_BUILD_OBJECT(
                        'memo_no', MEMO_NO
                        ,'color', COLOR
                        ,'content', CONTENT
                        ,'memo_dt', FLOOR(DATE_PART('epoch'::TEXT, MEMO_DT))::BIGINT
                    ))
                    FROM TB_MEMO D
                    WHERE 1=1
                        AND D.SHOWROOM_NO = C.SHOWROOM_NO
                        AND D.BRAND_ID = #{brand_id}
                        AND D.DEL_YN='N'
                        AND D.MEMO_DT IS NOT NULL
                        AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, D.MEMO_DT))) AT TIME ZONE 'Asia/Seoul')::DATE BETWEEN
                            (TO_TIMESTAMP(#{min_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                            AND
                            (TO_TIMESTAMP(#{max_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                ) AS MEMO_LIST
            FROM
            (
                SELECT
                    C.SHOWROOM_NO, C.SEASON_YEAR, C.SEASON_SE_CD, C.SHOWROOM_NM
                FROM TB_SHOWROOM C
                WHERE BRAND_ID=#{brand_id} AND DEL_YN='N'
                    <if test="season_year && season_cd_id">
                        AND C.SEASON_YEAR=#{season_year} AND C.SEASON_SE_CD=#{season_cd_id}
                    </if>
            ) C
            INNER JOIN TB_SHOWROOM_SAMPLE D ON C.SHOWROOM_NO = D.SHOWROOM_NO AND D.DEL_YN = 'N'
            INNER JOIN TB_SAMPLE E ON D.SAMPLE_NO = E.SAMPLE_NO
                AND E.DEL_YN = 'N'
                <if test="gender!=null">
                AND E.SAMPLE_SEX_SE_CD=#{gender}
                </if>
            INNER JOIN TB_SAMPLE_IMG F ON E.SAMPLE_NO = F.SAMPLE_NO AND F.DEL_YN = 'N' AND SHOWROOM_MAIN_YN=true
            LEFT JOIN TB_REQ G On G.DEL_YN = 'N'
            AND
                (
                    (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, G.photogrf_dt ))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                    BETWEEN (TO_TIMESTAMP(#{min_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE AND (TO_TIMESTAMP(#{max_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                )
                <!-- AND
                (
                    (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, G.RETURN_PREARNGE_DT ))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                    BETWEEN
                    (TO_TIMESTAMP(#{min_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                    AND
                    (TO_TIMESTAMP(#{max_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                    OR
                    (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, G.DUTY_RECPT_DT))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                    BETWEEN
                    (TO_TIMESTAMP(#{min_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                    AND
                    (TO_TIMESTAMP(#{max_date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                ) -->
                AND EXISTS
                (
                    SELECT
                        1
                    FROM TB_REQ_SHOWROOM H 
                    WHERE 
                        C.SHOWROOM_NO=H.SHOWROOM_NO AND G.REQ_NO=H.REQ_NO AND H.DEL_YN='N'
                )
            LEFT JOIN TB_MGZN_USER I ON G.REQ_USER_ID=I.USER_ID AND I.DEL_YN='N' AND G.REQ_USER_ID IS NOT NULL
            LEFT JOIN TB_MGZN J ON I.MGZN_ID IS NOT NULL AND I.MGZN_ID = J.MGZN_ID AND J.DEL_YN='N'
            LEFT JOIN TB_DLVY_ADRES K ON G.DLVY_ADRES_NO IS NOT NULL AND G.DLVY_ADRES_NO = K.DLVY_ADRES_NO AND K.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER L ON G.CONTACT_USER_ID=L.USER_ID AND L.DEL_YN='N' AND G.CONTACT_USER_ID IS NOT NULL
            GROUP BY C.SHOWROOM_NO , C.SHOWROOM_NM, C.SEASON_YEAR, C.SEASON_SE_CD, F.IMG_URL_ADRES
        ) T
        ORDER BY T.SEASON_YEAR DESC, T.SEASON_SE_CD, T.SHOWROOM_NM
        <!-- WHERE 1=1
            AND T.SEASON_YEAR = #{season_year}
            AND T.SEASON_SE_CD = #{season_cd_id} -->
    </select>

    <!--
        스케줄을 출력합니다 (날짜 분류)
        /brand/my-schedule
    -->
    <select id="SELECT.SCHEDULE.FOR.CHAE">
        SELECT
        FROM
        (
            SELECT
                TO_TIMESTAMP(#{min_date}::BIGINT) + (INTERVAL '1 day' * A.NUM) AS DT
            FROM
            (
                SELECT
                    GENERATE_SERIES(
                        0
                        , EXTRACT(
                            DAY
                            FROM
                            TO_TIMESTAMP(#{max_date}::BIGINT) - TO_TIMESTAMP(#{min_date}::BIGINT)
                        )::INTEGER
                    ) AS NUM
            ) A
        ) A
        LEFT JOIN TB_MEMO B ON B.SHOWROOM_NO = #{showroom_no} AND A.DT = B.MEMO_DT AND B.DEL_YN = 'N'
    </select>

    <!--
        메모 쇼룸 목록 조회
        /brand/showroom-list/for-memo
    -->
    <select id="SELECT.SHOWROOM.LIST.FOR.MEMO">
        SELECT
            C.SHOWROOM_NO
            , C.SHOWROOM_NM
        FROM
        (
            SELECT A.REQ_NO
            FROM TB_REQ A
            WHERE 1=1
                AND A.BRAND_ID=#{brand_id}
                AND A.REQ_STATUS_CD IN ('RS0003', 'RS0004', 'RS0005', 'RS0006')
                AND (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                    BETWEEN
                    (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                    AND
                    (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
                AND A.DEL_YN = 'N'
        ) A
        INNER JOIN TB_REQ_SHOWROOM B ON A.REQ_NO=B.REQ_NO AND B.DEL_YN='N'
        INNER JOIN TB_SHOWROOM C ON B.SHOWROOM_NO=C.SHOWROOM_NO AND C.DEL_YN='N'
    </select>

    <!--
        반납 수령 확인
        /brand/sendout-push POST
    -->
      <select id="SELECT.SENDOUT.TARGETLIST">
        SELECT 
            A.pickup_userid
        FROM 
            tb_new_req_sample A 
        WHERE 
            A.REQ_NO=#{req_no} AND A.sendout_yn = false AND A.DEL_YN='N'
            <if test="targetSampleList">
                AND A.sample_no IN ( 
                <foreach collection="targetSampleList" item="sno" separator=",">
                    #{sno}
                </foreach>
            ) 
            </if>
        GROUP BY A.pickup_userid
    </select>

    <!--
        반납 수령 확인
        /brand/return-success POST
    -->
      <select id="SELECT.RETURN.TARGETLIST">
        SELECT 
            A.pickup_userid
        FROM 
            tb_new_req_sample A 
        WHERE 
            A.REQ_NO=#{req_no} AND A.returncheck_yn = false AND A.DEL_YN='N'
            <if test="targetSampleList">
                AND A.sample_no IN ( 
                <foreach collection="targetSampleList" item="sno" separator=",">
                    #{sno}
                </foreach>
            ) 
            </if>
        GROUP BY A.pickup_userid
    </select>


    <update id="UPDATE.RETURN.CHECK">
        /* UPDATE.RETURN.CHECK */
        WITH
        UPDATE_REQ AS
        (
            UPDATE TB_REQ
            SET
                REQ_STATUS_CD = 'RS0006', RETURN_DT = CURRENT_TIMESTAMP
            WHERE 
                REQ_STATUS_CD = 'RS0005' AND DEL_YN = 'N' AND REQ_NO = #{req_no} AND BRAND_ID = #{brand_id}
                AND NOT EXISTS ( 
                    SELECT 1 
                    FROM 
                        TB_NEW_REQ_SAMPLE B 
                    WHERE 
                        B.REQ_NO=#{req_no} AND B.returncheck_yn=false AND B.DEL_YN='N' 
                        <if test="targetSampleList">
                            AND B.sample_no NOT IN ( 
                            <foreach collection="targetSampleList" item="sno" separator=",">
                                #{sno}
                            </foreach>
                            ) 
                        </if>
                )
            RETURNING #{req_no} as REQ_NO
        )
        , INSERT_HISTORY AS
        (   
           INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT
                #{req_no}
                , 'RS0005'
                , 'RS0006'
            WHERE NOT EXISTS ( 
                SELECT 1 
                FROM 
                    TB_NEW_REQ_SAMPLE B 
                WHERE 
                    B.REQ_NO=#{req_no} AND B.returncheck_yn=false AND B.DEL_YN='N' 
                    <if test="targetSampleList">
                        AND B.sample_no NOT IN ( 
                        <foreach collection="targetSampleList" item="sno" separator=",">
                            #{sno}
                        </foreach>
                        ) 
                    </if>
            )
            RETURNING REQ_HIST_NO
        )
        , TB_REQ_HIST_NOTIFI_ADD AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS06'
                , '[반납확인] ' || T2.BRAND_NM ||' '||T2.USER_NM|| '에서 반납을 확인했습니다.'
                , (
                    SELECT
                        B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 샘플의 반납을 확인했습니다.'
                    FROM
                        ( SELECT A.PHOTOGRF_DT, A.BRAND_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
                        LEFT JOIN TB_BRAND B ON A.BRAND_ID = B.BRAND_ID AND B.DEL_YN='N'
                    LIMIT 1
                )
                , (SELECT REQ_HIST_NO FROM INSERT_HISTORY LIMIT 1)
                , #{user_id}
                , T.USER_ID
                , 'brand'
                , 'returncheck'
            FROM
                (
                    SELECT 
                        A.pickup_userid as USER_ID
                    FROM 
                        tb_new_req_sample A 
                    WHERE 
                        A.REQ_NO=#{req_no} AND A.pickup_userid=#{pickup_userid} AND A.DEL_YN='N'
                        <if test="targetSampleList">
                            AND A.sample_no IN ( 
                            <foreach collection="targetSampleList" item="sno" separator=",">
                                #{sno}
                            </foreach>
                        ) 
                        </if>
                    GROUP BY A.pickup_userid
                    LIMIT 1
                ) T
                LEFT OUTER JOIN
                (
                    SELECT
                        A.USER_NM, B.BRAND_NM
                    FROM
                        ( SELECT A.USER_NM, A.BRAND_ID FROM TB_BRAND_USER A WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N' ) A
                        LEFT JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
                ) T2 ON 1=1
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , T4 AS
        ( 
            UPDATE 
                TB_NEW_REQ_SAMPLE SET returncheck_yn=true,returncheck_dt = CURRENT_TIMESTAMP 
            WHERE 
                REQ_NO=#{req_no} AND DEL_YN='N' 
                <if test="targetSampleList">
                    AND sample_no IN ( 
                    <foreach collection="targetSampleList" item="sno" separator=",">
                        #{sno}
                    </foreach>
                ) 
                </if>
        )
        SELECT
            B.TOKEN_VALUE , A.NOTIFI_SUBJ AS MESSAGE
        FROM 
            TB_REQ_HIST_NOTIFI_ADD A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </update>

    <!--
        반납 수령 개별확인
        /brand/return-success-individual POST
    -->

    <update id="UPDATE.RETURN.CHECK.INDIVIDUAL">
        WITH UPDATE_TB_NEW_REQ_SAMPLE AS
        (
            UPDATE TB_NEW_REQ_SAMPLE
            SET returncheck_yn=true,returncheck_dt = CURRENT_TIMESTAMP 
            WHERE REQ_NO=#{req_no} AND SAMPLE_NO=#{sample_no} AND DEL_YN='N'
        )
        , UPDATE_TB_REQ AS
        (
            UPDATE TB_REQ AS A
            SET REQ_STATUS_CD = 'RS0006'
            WHERE 1=1
                AND A.REQ_NO=#{req_no}
                AND A.DEL_YN='N'
                AND NOT EXISTS ( SELECT 1 FROM TB_NEW_REQ_SAMPLE B WHERE B.REQ_NO=#{req_no} AND B.returncheck_yn=false AND B.DEL_YN='N' AND B.SAMPLE_NO != #{sample_no} )
        )
        , INSERT_TB_REQ_HIST AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT
                #{req_no}
                , 'RS0005'
                , 'RS0006'
            WHERE NOT EXISTS ( SELECT 1 FROM TB_NEW_REQ_SAMPLE WHERE REQ_NO=#{req_no} AND SAMPLE_NO != #{sample_no} AND returncheck_yn=false AND DEL_YN='N' )
            RETURNING REQ_HIST_NO
        )
        , INSERT_TB_REQ_HIST_NOTIFI AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , RECV_CNFIRM_YN
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
                SELECT
                    CASE
                        WHEN NOT EXISTS <!-- #1 -->
                        ( SELECT 1 FROM TB_NEW_REQ_SAMPLE WHERE REQ_NO=#{req_no} AND returncheck_yn=false AND DEL_YN='N' LIMIT 1 ) THEN 'RHNS06' ELSE 'RHNS05' END
                    , CASE
                        WHEN NOT EXISTS  <!-- #2 -->
                        (
                            SELECT 1 FROM TB_NEW_REQ_SAMPLE WHERE REQ_NO=#{req_no} AND returncheck_yn=false AND DEL_YN='N' AND SAMPLE_NO != #{sample_no} LIMIT 1
                        ) THEN '[반납확인] ' || (SELECT BRAND_NM FROM TB_BRAND WHERE BRAND_ID = #{brand_id} LIMIT 1) ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')|| '에서 모든 샘플의 반납을 확인했습니다.'
                            ELSE '[반납확인] ' || (SELECT BRAND_NM FROM TB_BRAND WHERE BRAND_ID = #{brand_id} LIMIT 1) ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')|| '에서 샘플의 반납을 확인했습니다.'
                            END
                    , CASE
                        WHEN NOT EXISTS  <!-- #3 -->
                        ( SELECT 1 FROM TB_NEW_REQ_SAMPLE WHERE REQ_NO=#{req_no} AND SAMPLE_NO != #{sample_no} AND returncheck_yn=false AND DEL_YN='N' LIMIT 1 )
                        THEN (
                            SELECT
                                B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 모든 샘플의 반납을 확인했습니다.'
                            FROM
                                ( SELECT A.PHOTOGRF_DT , A.BRAND_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
                                LEFT JOIN TB_BRAND B ON A.BRAND_ID = B.BRAND_ID AND B.DEL_YN='N'
                            LIMIT 1
                        )
                        ELSE (
                            SELECT
                                B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 샘플의 반납을 확인했습니다.'
                            FROM
                                ( SELECT B.PHOTOGRF_DT, B.BRAND_ID FROM TB_REQ B WHERE B.REQ_NO=#{req_no} AND B.DEL_YN='N' ) A
                                LEFT JOIN TB_BRAND B ON A.BRAND_ID = B.BRAND_ID AND B.DEL_YN='N'
                            LIMIT 1
                        ) END
                    , (SELECT REQ_HIST_NO FROM INSERT_TB_REQ_HIST) <!-- #4 -->
                    , #{user_id}
                    , T.USER_ID
                    , false
                    , 'brand'
                    , 'send'
                FROM
                (
                    SELECT 
                        A.return_userid as USER_ID
                    FROM 
                        tb_new_req_sample as A
                    WHERE 
                        A.REQ_NO=#{req_no} AND A.SAMPLE_NO=#{sample_no} AND A.DEL_YN='N'
                ) T
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        SELECT 
            B.TOKEN_VALUE , A.NOTIFI_SUBJ AS MESSAGE
        FROM 
            INSERT_TB_REQ_HIST_NOTIFI A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </update>

    <!--
        반납 수령 미수령
        /brand/return-not-receive POST
    -->
    <insert id="UPDATE.RETURN.NOT.RECEIVE">
        WITH
        SELECT_REQ AS
        (
            SELECT REQ_NO, REQ_USER_ID
            FROM TB_REQ
            WHERE REQ_NO = #{req_no} AND BRAND_ID = #{brand_id} AND REQ_STATUS_CD = 'RS0005' AND DEL_YN = 'N'
        )
        , INSERT_HISTORY AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT
                REQ_NO
                , 'RS0005'
                , 'RS0005'
            FROM SELECT_REQ
            RETURNING REQ_HIST_NO
        )
        , TB_REQ_HIST_NOTIFI_ADD AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOT_RECEIVE_YN
                , NOTICE_TYPE
            )
            SELECT
                'RHNS05'
                , '[미수령알림] ' || (SELECT BRAND_NM FROM TB_BRAND WHERE BRAND_ID = #{brand_id} LIMIT 1) ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')|| '에서 샘플의 미수령 알림을 보냈습니다.'
                , (
                            SELECT
                                B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 샘플의 미수령 알림을 보냈습니다.'
                            FROM
                                ( SELECT A.PHOTOGRF_DT, A.BRAND_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
                                LEFT JOIN TB_BRAND B ON A.BRAND_ID = B.BRAND_ID AND B.DEL_YN='N'
                            LIMIT 1
                        )
                , (SELECT REQ_HIST_NO FROM INSERT_HISTORY LIMIT 1)
                , #{user_id}
                , T.USER_ID
                , 'magazine'
                , TRUE
                , 'send'
            FROM
            (
                (
                    SELECT 
                        B.USER_ID
                    FROM 
                        ( SELECT A.MGZN_ID FROM TB_MGZN_USER A WHERE A.USER_ID = (SELECT REQ_USER_ID FROM SELECT_REQ LIMIT 1) AND A.DEL_YN='N' ) A
                        INNER JOIN TB_MGZN_USER B ON A.MGZN_ID=B.MGZN_ID AND B.DEL_YN='N'
                )
                UNION
                (
                    SELECT USER_ID FROM TB_STYLE_LIST_USER WHERE USER_ID = (SELECT REQ_USER_ID FROM SELECT_REQ LIMIT 1)
                )
            ) T
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        SELECT 
            B.TOKEN_VALUE , A.NOTIFI_SUBJ AS MESSAGE
        FROM 
            TB_REQ_HIST_NOTIFI_ADD A JOIN TB_FCM_PUSH_TOKEN B ON  A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </insert>

    <insert id="UPDATE.RETURN.NOT.RECEIVE.INDIVIDUAL">
        WITH
        SELECT_REQ AS
        (
            SELECT 
                REQ_NO, REQ_USER_ID
            FROM 
                TB_REQ
            WHERE 
                REQ_NO = #{req_no} AND BRAND_ID = #{brand_id} AND REQ_STATUS_CD = 'RS0005' AND DEL_YN = 'N'
        )
        , INSERT_HISTORY AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT
                REQ_NO
                , 'RS0005'
                , 'RS0005'
            FROM SELECT_REQ
            RETURNING REQ_HIST_NO
        )
        , TB_REQ_HIST_NOTIFI_ADD AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOT_RECEIVE_YN
                , NOTICE_TYPE
            )
            SELECT
                'RHNS05'
                , '[미수령알림] ' || (SELECT BRAND_NM FROM TB_BRAND WHERE BRAND_ID = #{brand_id} LIMIT 1) ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')|| '에서 샘플의 미수령 알림을 보냈습니다.'
                , (
                    SELECT
                        B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} AND DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 샘플인'||(SELECT SAMPLE_NM FROM TB_SAMPLE WHERE SAMPLE_NO=#{sample_no})||'의 미수령 알림을 보냈습니다.'
                    FROM
                        ( SELECT A.PHOTOGRF_DT , A.BRAND_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
                        LEFT JOIN TB_BRAND B ON A.BRAND_ID = B.BRAND_ID AND B.DEL_YN='N'
                    LIMIT 1
                )
                , (SELECT REQ_HIST_NO FROM INSERT_HISTORY LIMIT 1)
                , #{user_id}
                , T.USER_ID
                , 'magazine'
                , TRUE
                , 'send'
            FROM
            (
                (
                    SELECT 
                        B.USER_ID
                    FROM 
                        ( SELECT A.MGZN_ID FROM TB_MGZN_USER A WHERE A.USER_ID = (SELECT REQ_USER_ID FROM SELECT_REQ LIMIT 1) AND A.DEL_YN='N' ) A
                        INNER JOIN TB_MGZN_USER B ON  A.MGZN_ID=B.MGZN_ID AND B.DEL_YN='N'
                )
                UNION
                (
                    SELECT USER_ID FROM TB_STYLE_LIST_USER WHERE USER_ID = (SELECT REQ_USER_ID FROM SELECT_REQ LIMIT 1)
                )
            ) T
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        SELECT
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE
        FROM 
            TB_REQ_HIST_NOTIFI_ADD A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </insert>

    <!--
        발송 푸시알림
        /brand/sendout-push/:req_no POST
    -->
    <insert id="UPDATE.SENDOUT.PUSH">
        WITH
        SELECT_REQ AS
        (
            SELECT 
                REQ_NO, REQ_USER_ID, REQ_STATUS_CD 
            FROM 
                TB_REQ 
            WHERE 
                DEL_YN = 'N' AND REQ_NO = #{req_no} AND BRAND_ID = #{brand_id}
        )
        , INSERT_HISTORY AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT
                REQ_NO, SELECT_REQ.REQ_STATUS_CD, SELECT_REQ.REQ_STATUS_CD
            FROM SELECT_REQ
            RETURNING REQ_HIST_NO
        )
        , TB_REQ_HIST_NOTIFI_ADD AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOT_RECEIVE_YN
                , NOTICE_TYPE
            )
            SELECT
                'RHNS03'
                , '[발송알림] ' || (SELECT BRAND_NM FROM TB_BRAND WHERE BRAND_ID = #{brand_id} LIMIT 1) ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')|| '으로부터 요청한 샘플을 발송 완료하였습니다.'
                , (
                    SELECT
                        B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} AND DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 '||#{len}||'개의 샘플을 발송 완료했습니다습니다.'
                    FROM
                        ( SELECT A.PHOTOGRF_DT , A.BRAND_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
                        INNER JOIN TB_BRAND B ON A.BRAND_ID = B.BRAND_ID AND B.DEL_YN='N'
                    LIMIT 1
                )
                , (SELECT REQ_HIST_NO FROM INSERT_HISTORY LIMIT 1)
                , #{user_id}
                , T.USER_ID
                , 'brand'
                , TRUE
                , 'sendout'
            FROM
            (
                SELECT 
                    A.pickup_userid as USER_ID
                FROM 
                    tb_new_req_sample A 
                WHERE 
                    A.REQ_NO=#{req_no} AND A.pickup_userid=#{pickup_userid} AND A.DEL_YN='N'
                    <if test="targetSampleList">
                        AND A.sample_no IN ( 
                        <foreach collection="targetSampleList" item="sno" separator=",">
                            #{sno}
                        </foreach>
                    ) 
                    </if>
                GROUP BY A.pickup_userid
                LIMIT 1
            ) T
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , T4 AS
        (
            UPDATE 
                TB_NEW_REQ_SAMPLE
            SET 
                SENDOUT_YN=true
            WHERE 
                REQ_NO=#{req_no} AND DEL_YN='N'
                <if test="targetSampleList">
                    AND sample_no IN ( 
                    <foreach collection="targetSampleList" item="sno" separator=",">
                        #{sno}
                    </foreach>
                    ) 
                </if>
        )
        SELECT 
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE
        FROM 
            TB_REQ_HIST_NOTIFI_ADD A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </insert>
    <insert id="UPDATE.SENDOUT.PUSH.INDIVIDUAL">
        /* UPDATE.SENDOUT.PUSH.INDIVIDUAL */
        WITH
        SELECT_REQ AS
        (
            SELECT
                REQ_NO, REQ_STATUS_CD, REQ_USER_ID
            FROM TB_REQ
            WHERE DEL_YN = 'N' AND REQ_NO = #{req_no} AND BRAND_ID = #{brand_id}
        )
        , INSERT_HISTORY AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT
                REQ_NO
                , SELECT_REQ.REQ_STATUS_CD
                , SELECT_REQ.REQ_STATUS_CD
            FROM SELECT_REQ
            RETURNING REQ_HIST_NO
        )
        , TB_REQ_HIST_NOTIFI_ADD AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOT_RECEIVE_YN
                , NOTICE_TYPE
            )
            SELECT
                'RHNS03'
                , '[발송알림] ' || (SELECT BRAND_NM FROM TB_BRAND WHERE BRAND_ID = #{brand_id} LIMIT 1) ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} AND DEL_YN='N') || '으로부터 요청한 샘플을 발송 완료하였습니다.'
                , CASE
                    WHEN NOT EXISTS  <!-- #3 -->
                    (
                        SELECT 1 FROM TB_NEW_REQ_SAMPLE WHERE REQ_NO=#{req_no} AND SENDOUT_YN=false AND DEL_YN='N' AND SAMPLE_NO != #{sample_no} LIMIT 1
                    ) THEN (
                            SELECT
                                B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 '||#{len}||'개의 샘플을 발송 완료했습니다습니다.'
                            FROM
                                ( SELECT A.PHOTOGRF_DT , A.BRAND_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
                                INNER JOIN TB_BRAND B ON A.BRAND_ID = B.BRAND_ID AND B.DEL_YN='N'
                            LIMIT 1
                        )
                    ELSE (
                            SELECT
                                B.BRAND_NM ||' '||(SELECT USER_NM FROM TB_BRAND_USER WHERE USER_ID=#{user_id} and DEL_YN='N')||'에서 '||(A.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE||' 촬영 건 샘플인 '||(SELECT SAMPLE_NM FROM TB_SAMPLE WHERE SAMPLE_NO=#{sample_no})||'을(를) 발송 완료했습니다.'
                            FROM
                                ( SELECT A.PHOTOGRF_DT, A.BRAND_ID FROM TB_REQ A WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' ) A
                                INNER JOIN TB_BRAND B ON A.BRAND_ID = B.BRAND_ID AND B.DEL_YN='N'
                            LIMIT 1
                        ) END
                , (SELECT REQ_HIST_NO FROM INSERT_HISTORY LIMIT 1)
                , #{user_id}
                , T.USER_ID
                , 'brand'
                , TRUE
                , 'sendout'
            FROM
            (   
                SELECT B.USER_ID  as USER_ID
                FROM 
                    TB_MGZN_USER A INNER JOIN TB_MGZN_USER B ON A.MGZN_ID=B.MGZN_ID AND B.DEL_YN='N'
                WHERE 
                    A.USER_ID=(SELECT REQ_USER_ID FROM SELECT_REQ LIMIT 1) AND A.DEL_YN='N' 
            ) T
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , T4 AS
        (
            UPDATE TB_NEW_REQ_SAMPLE
            SET SENDOUT_YN=true
            WHERE REQ_NO=#{req_no} AND SAMPLE_no=#{sample_no} AND DEL_YN='N'
        )
        SELECT
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE
        FROM 
            TB_REQ_HIST_NOTIFI_ADD A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </insert>

    <!--
        쇼룸/샘플 검색
        /brand/search GET
    -->
    <select id="SELECT.SEARCH.SHOWROOM">
        /* SELECT.SEARCH.SHOWROOM */
        SELECT
            T2.SAMPLE_NM
            , T2.TITLE
            , T2.SHOWROOM_NO
            , T2.SUBTITLE
            , T2.IMG_URL_ADRES
            , T2.REG_DT
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (   SELECT DISTINCT ON (T.SHOWROOM_NM)
                T.SHOWROOM_NO
                , T.SAMPLE_NM
                , T.SHOWROOM_NM AS TITLE
                , T.SUBTITLE
                , T.IMG_URL_ADRES
                , T.REG_DT
            FROM
            (
                SELECT
                    A.SHOWROOM_NO
                    , A.SHOWROOM_NM
                    , C.SAMPLE_NO
                    , C.SAMPLE_NM
                    , E.BRAND_NM
                    , FLOOR(DATE_PART('epoch'::TEXT, C.SAMPLE_REG_DT ))::BIGINT AS REG_DT
                    , CONCAT(( SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1 ), '/', D.IMG_URL_ADRES) AS IMG_URL_ADRES
                    , D.IMG_URL_ADRES AS IMG_PATH
                    , C.PRICE
                    , C.SKU
                    , C.caption_english
                    , C.caption_korean
                    , C.etc_matter
                    , A.season_year
                    , CONCAT(A.SEASON_YEAR, ' ', F.CD_SIMPLE_NM) AS SUBTITLE
                    , 'SAMPLE' AS SEARCH_TYPE
                FROM
                    (
                        SELECT
                            A.SHOWROOM_NO, A.SEASON_YEAR, A.BRAND_ID, A.SEASON_SE_CD, A.SHOWROOM_NM
                        FROM
                            TB_SHOWROOM A
                        WHERE A.BRAND_ID = #{brand_id} AND A.DEL_YN = 'N'
                    ) A
                    INNER JOIN TB_SHOWROOM_SAMPLE B ON A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
                    INNER JOIN TB_SAMPLE C ON B.SAMPLE_NO = C.SAMPLE_NO AND C.DEL_YN = 'N'
                    INNER JOIN TB_SAMPLE_IMG D ON C.SAMPLE_NO = D.SAMPLE_NO AND D.MAIN_YN = TRUE
                    INNER JOIN TB_BRAND E ON A.BRAND_ID = E.BRAND_ID AND E.DEL_YN = 'N'
                    INNER JOIN TB_COMM_CD F ON A.SEASON_SE_CD = F.CD_ID AND F.DEL_YN = 'N'
            ) T
            WHERE
                1 = 1
                AND
                (
                    T.SHOWROOM_NM ILIKE '%' || #{search_text} || '%'
                    OR T.SAMPLE_NM ILIKE '%' || #{search_text} || '%'
                    OR T.PRICE::TEXT=#{search_text}
                    OR T.SKU ILIKE '%' || #{search_text} || '%'
                    OR T.CAPTION_ENGLISH ILIKE '%' || #{search_text} || '%'
                    OR T.CAPTION_KOREAN ILIKE '%' || #{search_text} || '%'
                    OR T.ETC_MATTER ILIKE '%' || #{search_text} || '%'
                    OR T.SEASON_YEAR::TEXT=#{search_text}
                )
        ) T2
        ORDER BY T2.TITLE ASC
        <if test="limit">
            OFFSET ${offset}
            LIMIT ${limit}
        </if>
    </select>

    <!--
        샘플요청 검색
        /brand/search GET
    -->

    <select id="SELECT.SEARCH.REQ">
        SELECT
            T.REQ_NO
            , T.CONTACT_USER_NM
            , T.REQ_DT
            , T.SHOWROOM_NM
            , T.IMG_URL_ADRES
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT DISTINCT ON (A.REQ_NO,B.SHOWROOM_NO)
                A.REQ_NO
                , FLOOR(DATE_PART('epoch'::TEXT, A.REQ_DT ))::BIGINT AS REQ_DT
                , B.SHOWROOM_NO
                , E.SHOWROOM_NM
                , CONCAT
                    (
                        (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                        , D.IMG_URL_ADRES
                    ) AS IMG_URL_ADRES
                , D.IMG_URL_ADRES AS IMG_PATH
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN F.USER_NM ELSE H.USER_NM END
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN G.MGZN_NM ELSE H.POSI_COMPY_NM END AS MGZN_NM
                , I.USER_NM AS CONTACT_USER_NM
                , J.DLVY_ADRES_NM
                , A.dlvy_atent_matter
                , A.photogrf_concept
                , A.INPUT_DT
            FROM
            (
                SELECT
                    A.REQ_NO
                    , A.REQ_USER_ID
                    , A.REQ_DT
                    , A.REQ_USER_SE_CD
                    , A.CONTACT_USER_ID
                    , A.DLVY_ADRES_NO
                    , A.DLVY_ATENT_MATTER
                    , A.PHOTOGRF_CONCEPT
                    , A.INPUT_DT
                FROM TB_REQ A
                WHERE 1=1
                    AND (A.REQ_STATUS_CD='RS0001' OR A.REQ_STATUS_CD='RS0002')
                    AND A.DEL_YN='N'
                    AND A.BRAND_ID=#{brand_id}
            ) A
            INNER JOIN TB_REQ_SHOWROOM B ON A.REQ_NO=B.REQ_NO AND B.DEL_YN='N'
            INNER JOIN TB_SHOWROOM_SAMPLE C ON B.SHOWROOM_NO=C.SHOWROOM_NO AND C.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG D ON C.SAMPLE_NO=D.SAMPLE_NO AND D.DEL_YN='N' AND D.MAIN_YN=true
            INNER JOIN TB_SHOWROOM E ON B.SHOWROOM_NO=E.SHOWROOM_NO AND E.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER F ON A.REQ_USER_ID=F.USER_ID AND F.DEL_YN='N'
            LEFT JOIN TB_MGZN G ON F.MGZN_ID=G.MGZN_ID AND G.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER H ON A.REQ_USER_ID=H.USER_ID AND H.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER I ON A.CONTACT_USER_ID=F.USER_ID AND I.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES J ON A.DLVY_ADRES_NO=J.DLVY_ADRES_NO AND J.DEL_YN='N'
            ORDER BY A.REQ_NO,B.SHOWROOM_NO
        ) T
        WHERE 1=1
            AND
            (
                T.MGZN_NM ILIKE '%' || #{search_text} || '%'
                OR T.USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.CONTACT_USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.SHOWROOM_NM ILIKE '%' || #{search_text} || '%'
                OR T.DLVY_ADRES_NM ILIKE '%' || #{search_text} || '%'
                OR T.DLVY_ATENT_MATTER ILIKE '%' || #{search_text} || '%'
                OR T.PHOTOGRF_CONCEPT ILIKE '%' || #{search_text} || '%'
                OR (T.INPUT_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
            )
        ORDER BY REQ_DT DESC
        <if test="limit">
            OFFSET ${offset}
            LIMIT ${limit}
        </if>
    </select>

    <!--
        sendout 검색
        /brand/search GET
    -->

    <select id="SELECT.SEARCH.SENDOUT">
        SELECT
            T.REQ_NO
            , T.IMG_URL_ADRES
            , T.CONTACT_USER_NM
            , T.RECPT_DT
            , T.MGZN_NM
            , T.MGZN_COLOR
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT
                A.REQ_NO
                , A.DUTY_RECPT_DT
                , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS RECPT_DT
                , A.RETURN_PREARNGE_DT
                , C.COLOR AS MGZN_COLOR
                , CASE WHEN REQ_USER_SE_CD='RUS001' THEN B.USER_NM ELSE D.USER_NM END
                , CASE WHEN REQ_USER_SE_CD='RUS001' THEN C.MGZN_NM ELSE D.POSI_COMPY_NM END AS MGZN_NM
                , CASE WHEN REQ_USER_SE_CD='RUS001' THEN CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/',C.MGZN_LOGO_URL_ADRES) ELSE NULL END AS IMG_URL_ADRES
                , G.USER_NM AS CONTACT_USER_NM
                , F.SHOWROOM_NM
                , H.DLVY_ADRES_NM
            FROM
            (
                SELECT
                    A.REQ_NO
                    , A.DUTY_RECPT_DT
                    , A.RETURN_PREARNGE_DT
                    , A.REQ_USER_ID
                    , A.REQ_USER_SE_CD
                    , A.CONTACT_USER_ID
                    , A.DLVY_ADRES_NO
                FROM TB_REQ A
                WHERE 1=1
                    AND (A.REQ_STATUS_CD='RS0003' OR A.REQ_STATUS_CD='RS0005' OR A.REQ_STATUS_CD='RS0006')
                    AND A.BRAND_ID=#{brand_id}
                    AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_REQ_SHOWROOM E ON A.REQ_NO=E.REQ_NO AND E.DEL_YN='N'
            INNER JOIN TB_SHOWROOM F ON E.SHOWROOM_NO=F.SHOWROOM_NO AND F.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
            LEFT JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER D ON A.REQ_USER_ID=D.USER_ID AND D.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER G ON A.CONTACT_USER_ID=G.USER_ID AND G.DEL_Yn='N'
            INNER JOIN TB_DLVY_ADRES H ON A.DLVY_ADRES_NO=H.DLVY_ADRES_NO AND H.DEL_YN='N'
        ) T
        WHERE 1=1
            AND
            (
                T.MGZN_NM ILIKE '%' || #{search_text} || '%'
                OR T.USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.CONTACT_USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.SHOWROOM_NM ILIKE '%' || #{search_text} || '%'
                OR T.DLVY_ADRES_NM ILIKE '%' || #{search_text} || '%'
                OR (T.DUTY_RECPT_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
                OR (T.RETURN_PREARNGE_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
            )
        <if test="limit">
            OFFSET ${offset}
            LIMIT ${limit}
        </if>
    </select>

    <!--
        스케줄러 검색
        /brand/search GET
    -->

    <select id="SELECT.SEARCH.SCHEDULE">
        /* SELECT.SEARCH.SCHEDULE */
        SELECT
            T.CONTACT_USER_NM
            , T.IMG_URL_ADRES
            , T.RECPT_DT
            , T.SHOWROOM_NM
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT DISTINCT ON (A.REQ_NO,B.SHOWROOM_NO)
                A.REQ_NO
                , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS RECPT_DT
                , B.SHOWROOM_NO
                , E.SHOWROOM_NM
                , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', D.IMG_URL_ADRES) AS IMG_URL_ADRES
                , D.IMG_URL_ADRES AS IMG_PATH
                , CASE WHEN A.REQ_STATUS_CD='RS0005' THEN true ELSE FALSE END AS PICKED_UP
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN F.MGZN_NM ELSE I.POSI_COMPY_NM END AS MGZN_NM
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN G.USER_NM ELSE I.USER_NM END AS USER_NM
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN H.USER_NM  ELSE I.USER_NM END AS CONTACT_USER_NM
                , J.DLVY_ADRES_NM
                , A.DUTY_RECPT_DT
                , A.RETURN_PREARNGE_DT
            FROM
            (
                SELECT
                    A.REQ_NO
                    , A.DUTY_RECPT_DT
                    , A.REQ_USER_ID
                    , A.CONTACT_USER_ID
                    , A.DLVY_ADRES_NO
                    , A.RETURN_PREARNGE_DT
                    , A.REQ_STATUS_CD
                    , A.REQ_USER_SE_CD
                FROM TB_REQ A
                WHERE 1=1
                    AND A.BRAND_ID=#{brand_id}
                    AND (A.REQ_STATUS_CD='RS0003' OR A.REQ_STATUS_CD='RS0005' OR A.REQ_STATUS_CD='RS0006')
                    AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_REQ_SHOWROOM B ON A.REQ_NO=B.REQ_NO AND B.DEL_YN='N'
            INNER JOIN TB_SHOWROOM_SAMPLE C ON  B.SHOWROOM_NO=C.SHOWROOM_NO AND C.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG D ON C.SAMPLE_NO=D.SAMPLE_NO AND D.DEL_YN='N' AND D.MAIN_YN=true
            INNER JOIN TB_SHOWROOM E ON B.SHOWROOM_NO=E.SHOWROOM_NO AND E.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER G ON  A.REQ_USER_ID=G.USER_ID AND G.DEL_YN='N'
            LEFT JOIN TB_MGZN F ON F.MGZN_ID=G.MGZN_ID AND F.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER H ON A.CONTACT_USER_ID=H.USER_ID AND H.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER I ON A.REQ_USER_ID=I.USER_ID AND I.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES J ON A.DLVY_ADRES_NO=J.DLVY_ADRES_NO AND J.DEL_YN='N'
        ) T
        WHERE 1=1
            AND
            (
                T.MGZN_NM ILIKE '%' || #{search_text} || '%'
                OR T.USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.CONTACT_USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.SHOWROOM_NM ILIKE '%' || #{search_text} || '%'
                OR T.DLVY_ADRES_NM ILIKE '%' || #{search_text} || '%'
                OR (T.DUTY_RECPT_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
                OR (T.RETURN_PREARNGE_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
            )
        ORDER BY T.RECPT_DT DESC
        <if test="limit">
            OFFSET ${offset}
            LIMIT ${limit}
        </if>
    </select>

    <!--
        보도자료 검색
        /brand/search GET
    -->

    <select id="SELECT.SEARCH.PRESS">
        SELECT
            T.BRAND_PRESS_NO
            , T.PRESS_SUBJ
            , T.INPUT_DT
            , T.IMG
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT
                A.BRAND_PRESS_NO
                , A.PRESS_SUBJ
                , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', A.MAIN_IMG_ADRES) AS IMG
                , A.INPUT_DT
            FROM TB_BRAND_PRESS A
            WHERE 1=1
                AND A.DEL_YN='N'
                AND
                (
                    A.PRESS_SUBJ ILIKE '%' || #{search_text} || '%'
                    OR A.PRESS_CNTENT ILIKE '%' || #{search_text} || '%'
                    OR (A.INPUT_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
                )
        ) T
        ORDER BY INPUT_DT DESC
        <if test="limit">
            OFFSET ${offset}
            LIMIT ${limit}
        </if>
    </select>

    <!--
        룩북 검색
        /brand/search GET
    -->

    <select id="SELECT.SEARCH.LOOKBOOK">
        SELECT
            T2.LOOKBOOK_NO
            , T2.LOOKBOOK_NM
            , T2.LOOKBOOK_REG_DT
            , T2.IMAGE_URL
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT DISTINCT ON
            (
                T.LOOKBOOK_NM
                , T.LOOKBOOK_REG_DT
                , T.LOOKBOOK_NO
            )
                T.LOOKBOOK_NM
                , T.LOOKBOOK_REG_DT
                , T.LOOKBOOK_NO
                , CONCAT
                (
                    (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                    , T.IMG_URL_ADRES
                ) AS IMAGE_URL
            FROM
            (
                SELECT
                    A.LOOKBOOK_NM
                    , FLOOR(DATE_PART('epoch'::TEXT, A.LOOKBOOK_REG_DT ))::BIGINT AS LOOKBOOK_REG_DT
                    , A.LOOKBOOK_NO
                    , F.IMG_URL_ADRES
                FROM
                (
                    SELECT
                    	A.LOOKBOOK_NM
                    	, A.LOOKBOOK_REG_DT
                    	, A.LOOKBOOK_NO
                    	, A.SEASON_SE_CD
                    	, A.MADE_FOR_MGZN_ID
                    FROM TB_LOOKBOOK A
                    WHERE 1=1
                        AND A.DEL_YN='N'
                        AND A.BRAND_ID=#{brand_id}
                )  A
                INNER JOIN TB_LOOKBOOK_SHOWROOM B ON A.LOOKBOOK_NO =B.LOOKBOOK_NO AND B.DEL_YN='N'
            	INNER JOIN TB_SHOWROOM C ON B.SHOWROOM_NO=C.SHOWROOM_NO AND C.DEL_YN='N'
            	INNER JOIN TB_SHOWROOM_SAMPLE D ON C.SHOWROOM_NO=D.SHOWROOM_NO AND D.DEL_YN='N'
        		INNER JOIN TB_SAMPLE E ON D.SAMPLE_NO=E.SAMPLE_NO AND E.DEL_YN='N'
        		INNER JOIN TB_SAMPLE_IMG F ON D.SAMPLE_NO=F.SAMPLE_NO AND F.DEL_YN='N' AND F.SHOWROOM_MAIN_YN =TRUE
    			LEFT JOIN TB_COMM_CD G ON A.SEASON_SE_CD =G.CD_ID AND G.DEL_YN='N'
				LEFT JOIN TB_MGZN H ON A.MADE_FOR_MGZN_ID = H.MGZN_ID AND H.DEL_YN='N'
                WHERE 1=1
                    AND
                    (
                        A.LOOKBOOK_NM ILIKE '%' || #{search_text} || '%'
                        OR G.CD_NM ILIKE '%' || #{search_text} || '%'
                        OR H.MGZN_NM ILIKE '%' || #{search_text} || '%'
                        OR C.SHOWROOM_NM ILIKE '%' || #{search_text} || '%'
                        OR E.SAMPLE_NM ILIKE '%' || #{search_text} || '%'
                        OR E.PRICE::TEXT=#{search_text}
                        OR E.SKU ILIKE '%' || #{search_text} || '%'
                        OR E.CAPTION_ENGLISH ILIKE '%' || #{search_text} || '%'
                        OR E.CAPTION_KOREAN ILIKE '%' || #{search_text} || '%'
                        OR E.ETC_MATTER ILIKE '%' || #{search_text} || '%'
                        OR E.SEASON_YEAR::TEXT=#{search_text}
                    )
                GROUP BY
                    A.LOOKBOOK_NO
                    , A.LOOKBOOK_NM
                    , A.LOOKBOOK_REG_DT
                    , F.IMG_URL_ADRES
            ) T
        ) T2
        <if test="limit">
            OFFSET ${offset}
            LIMIT ${limit}
        </if>
    </select>

    <!--
        urgency 기준의 샘플요청목록
        /brand/showroom-request-urgency/:date GET
    -->

    <select id="SELECT.REQUEST.URGENCY.001">
        SELECT
            T.SHOWROOM_NO
            , T.SHOWROOM_NM
            , T.IMAGE_URL
            , T.USER_INFO
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT
                A.SHOWROOM_NO
                , A.SHOWROOM_NM
                ,
                CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', K.IMG_URL_ADRES) AS IMAGE_URL
                , ARRAY_AGG
                (
                    JSON_BUILD_OBJECT
                    (
                        'req_no',C.REQ_NO
                        , 'req_user_nm',
                        (CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN D.USER_NM ELSE F.USER_NM END)
                        ,'req_user_posi',
                        (
                            CASE 
                                WHEN C.REQ_USER_SE_CD='RUS001' THEN ( SELECT CD_NM FROM TB_COMM_CD WHERE 1=1 AND TB_COMM_CD.CD_ID=D.MGZN_POS_CD AND DEL_YN='N' LIMIT 1 )
                                ELSE ( SELECT CD_NM FROM TB_COMM_CD WHERE TB_COMM_CD.CD_ID=F.STYLE_LIST_POS_CD AND DEL_YN='N' LIMIT 1 )
                            END
                        )
                        , 'compy_nm',(CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN E.MGZN_NM ELSE F.POSI_COMPY_NM END)
                        , 'compy_logo_adres',(CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', E.MGZN_LOGO_URL_ADRES) else '' END
                        )
                        , 'user_type', (CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN 'magazine' ELSE 'stylist' END)
                        , 'model_list',C.MODEL_LIST
                        , 'celeb_list',C.CELEB_LIST
                        , 'dlvy_adres_nm',G.DLVY_ADRES_NM
                        , 'adres_detail',G.ADRES_DETAIL
                        , 'photogrf_concept',C.PHOTOGRF_CONCEPT
                        , 'duty_recpt_dt', FLOOR(DATE_PART('epoch'::TEXT, C.DUTY_RECPT_DT ))::BIGINT
                        , 'return_prearnge_dt', FLOOR(DATE_PART('epoch'::TEXT, C.RETURN_PREARNGE_DT ))::BIGINT
                        , 'photogrf_dt', FLOOR(DATE_PART('epoch'::TEXT, C.PHOTOGRF_DT ))::BIGINT
                        , 'assi_user_nm',(CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN H.USER_NM ELSE I.USER_NM END)
                        , 'assi_user_posi',
                        (
                            CASE
                                WHEN C.REQ_USER_SE_CD='RUS001' THEN
                                (
                                    SELECT CD_NM FROM TB_COMM_CD WHERE TB_COMM_CD.CD_ID=H.MGZN_POS_CD AND DEL_YN='N' LIMIT 1
                                )
                                ELSE
                                (
                                    SELECT CD_NM FROM TB_COMM_CD WHERE TB_COMM_CD.CD_ID=I.STYLE_LIST_POS_CD AND DEL_YN='N' LIMIT 1
                                )
                            END
                        )
                        , 'assi_phone_no',(CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN H.PHONE_NO ELSE I.PHONE_NO END)
                        , 'showroom_img_array',L.IMG_ARRAY
                    )
                ) AS USER_INFO
            FROM
            (
                SELECT A.SHOWROOM_NO, A.SHOWROOM_NM FROM TB_SHOWROOM A WHERE A.DEL_YN='N' AND A.BRAND_ID=#{brand_id}
            ) A
            INNER JOIN TB_REQ_SHOWROOM B ON A.SHOWROOM_NO=B.SHOWROOM_NO AND B.DEL_YN='N' AND (B.REQ_STATUS_CD='RS0001' OR B.REQ_STATUS_CD='RS0002')
            INNER JOIN TB_REQ C
            ON 1=1
                AND B.REQ_NO=C.REQ_NO
                AND C.BRAND_ID=#{brand_id}
                AND (C.REQ_STATUS_CD='RS0001' OR C.REQ_STATUS_CD='RS0002' OR C.REQ_STATUS_CD='RS0008' OR C.REQ_STATUS_CD='RS0009' OR C.REQ_STATUS_CD='RS0010')
                AND C.DUTY_RECPT_DT::DATE = TO_TIMESTAMP(#{date})::DATE
                AND (C.PHOTOGRF_MODL_SE_CD='PMS004' OR C.PHOTOGRF_MODL_SE_CD=#{model_type}OR #{model_type}='PMS004')
                AND C.DEL_YN='N'
            INNER JOIN TB_SHOWROOM_SAMPLE J ON A.SHOWROOM_NO=J.SHOWROOM_NO AND J.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG K ON J.SAMPLE_NO=K.SAMPLE_NO AND K.SHOWROOM_MAIN_YN=true AND K.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER D ON C.REQ_USER_ID=D.USER_ID AND D.DEL_YN='N'
            LEFT JOIN TB_MGZN E ON D.MGZN_ID=E.MGZN_ID AND E.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER F ON C.REQ_USER_ID=F.USER_ID AND F.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES G ON C.DLVY_ADRES_NO=G.DLVY_ADRES_NO AND G.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER H ON C.CONTACT_USER_ID=H.USER_ID AND H.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER I ON C.CONTACT_USER_ID=I.USER_ID AND I.DEL_YN='N'
            INNER JOIN
            (
                SELECT
                    ARRAY_AGG(CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/',O.IMG_URL_ADRES)) AS IMG_ARRAY
                    , M.REQ_NO
                FROM
                    ( SELECT SHOWROOM_NO FROM TB_SHOWROOM WHERE BRAND_ID=#{brand_id} AND DEL_YN='N' ) L
                    INNER JOIN TB_REQ_SHOWROOM M ON L.SHOWROOM_NO=M.SHOWROOM_NO AND M.DEL_YN='N'
                    INNER JOIN TB_SHOWROOM_SAMPLE N ON M.SHOWROOM_NO=N.SHOWROOM_NO AND N.DEL_YN='N'
                    INNER JOIN TB_SAMPLE_IMG O ON N.SAMPLE_NO=O.SAMPLE_NO AND O.SHOWROOM_MAIN_YN=true AND O.DEL_YN='N'
                GROUP BY M.REQ_NO
            ) L ON C.REQ_NO=L.REQ_NO
            WHERE 
                C.REQ_NO IS NOT NULL
            GROUP BY A.SHOWROOM_NO, A.SHOWROOM_NM, IMAGE_URL
        ) T
        <if test="limit">
            OFFSET ${offset}
            LIMIT ${limit}
        </if>
    </select>

    <!--
        requests 기준의 샘플요청목록
        /brand/showroom-request-requests GET

        리스트에 남아있어야 한다고 해서 수정 By Nohsn 2021.11.22
        AND A.REQ_STATUS_CD IN ('RS0001', 'RS0002', 'RS0008', 'RS0009', 'RS0010')
    -->

    <select id="SELECT.REQUEST.REQUESTS.001">
        SELECT
            T.REQ_NO
            , T.MGZN_LOGO_URL_ADRES
            , T.THUMNAIL_IMAGE_URL
            , T.REQ_USER_NM
            , T.MGZN_NM
            , T.MGZN_COLOR
            , T.CONTACT_USER_NM
            , T.CONTACT_PHONE_NO
            , T.REQUEST_DATE
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT DISTINCT ON (A.REQ_NO)
                A.REQ_NO
                , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', C.MGZN_LOGO_URL_ADRES) AS MGZN_LOGO_URL_ADRES
                , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1), '/', G.IMG_URL_ADRES) AS THUMNAIL_IMAGE_URL
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN B.USER_NM ELSE H.USER_NM END AS REQ_USER_NM
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN C.MGZN_NM ELSE H.POSI_COMPY_NM END AS MGZN_NM
                , C.COLOR AS MGZN_COLOR
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN D.USER_NM ELSE H.USER_NM END AS CONTACT_USER_NM
                , CASE WHEN A.REQ_USER_SE_CD='RUS001' THEN D.PHONE_NO ELSE H.PHONE_NO END AS CONTACT_PHONE_NO
                , FLOOR(DATE_PART('epoch'::TEXT, A.REQ_DT ))::BIGINT AS REQUEST_DATE
            FROM
                (
                    SELECT
                        A.REQ_NO, A.REQ_DT, A.REQ_USER_ID, A.CONTACT_USER_ID, A.REQ_USER_SE_CD
                    FROM TB_REQ A
                    WHERE 1=1
                        AND A.BRAND_ID=#{brand_id}
                        AND A.DEL_YN='N'                        
                        AND ( A.PHOTOGRF_MODL_SE_CD='PMS004' OR A.PHOTOGRF_MODL_SE_CD=#{model_type} OR #{model_type}='PMS004' )
                ) A
                INNER JOIN TB_REQ_SHOWROOM E ON A.REQ_NO=E.REQ_NO AND E.DEL_YN='N'
                INNER JOIN TB_SHOWROOM_SAMPLE F ON E.SHOWROOM_NO=F.SHOWROOM_NO AND F.DEL_YN='N'
                INNER JOIN TB_SAMPLE_IMG G ON F.SAMPLE_NO=G.SAMPLE_NO AND G.MAIN_YN=TRUE AND G.DEL_YN='N'
                LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
                LEFT JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
                LEFT JOIN TB_MGZN_USER D ON D.USER_ID=A.CONTACT_USER_ID AND D.DEL_YN='N'
                LEFT JOIN TB_STYLE_LIST_USER H ON A.REQ_USER_ID=H.USER_ID AND H.DEL_YN='N'
            ORDER BY A.REQ_NO
        ) T
        ORDER BY T.REQUEST_DATE DESC
        OFFSET ${offset}
        LIMIT ${limit}
    </select>

    <!--
        샘플요청에 관한 팝업 API
        /showroom-request-popup/:req_no GET
        AND (C.REQ_STATUS_CD='RS0001' OR C.REQ_STATUS_CD='RS0002' OR C.REQ_STATUS_CD='RS0008' OR C.REQ_STATUS_CD='RS0009' OR C.REQ_STATUS_CD='RS0010')
    -->

    <select id="SELECT.REQUEST.POPUP.001">
        SELECT DISTINCT ON (A.SHOWROOM_NO)
            A.SHOWROOM_NO
            , A.SHOWROOM_NM
            , CASE
                WHEN (B.REQ_STATUS_CD='RS0001' OR B.REQ_STATUS_CD='RS0002')
                THEN 'undecided'
                WHEN (B.REQ_STATUS_CD='RS0004')
                THEN 'rejected'
                ELSE 'accepted'
                END AS SHOWROOM_STATUS_CD
            ,
            CONCAT
            (
                (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                , K.IMG_URL_ADRES
            ) AS IMAGE_URL
            , ARRAY_AGG
            (
                JSON_BUILD_OBJECT
                (
                    'req_no',C.REQ_NO
                    , 'req_user_nm',
                    (CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN D.USER_NM ELSE F.USER_NM END)
                    ,'req_user_posi',
                    (
                        CASE
                            WHEN C.REQ_USER_SE_CD='RUS001' THEN
                            ( SELECT CD_NM FROM TB_COMM_CD WHERE TB_COMM_CD.CD_ID=D.MGZN_POS_CD AND DEL_YN='N' LIMIT 1 )
                            ELSE
                            ( SELECT CD_NM FROM TB_COMM_CD WHERE TB_COMM_CD.CD_ID=F.STYLE_LIST_POS_CD AND DEL_YN='N' LIMIT 1 )
                        END
                    )
                    , 'compy_nm',(CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN E.MGZN_NM ELSE F.POSI_COMPY_NM END)
                    , 'compy_logo_adres'
                    ,(CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN CONCAT ((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', E.MGZN_LOGO_URL_ADRES) else '' END)
                    , 'user_type', (CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN 'magazine' ELSE 'stylist' END)
                    , 'model_list',C.MODEL_LIST
                    , 'celeb_list',C.CELEB_LIST
                    , 'dlvy_adres_nm',G.DLVY_ADRES_NM
                    , 'adres_detail',G.ADRES_DETAIL
                    , 'photogrf_concept',C.PHOTOGRF_CONCEPT
                    , 'duty_recpt_dt', FLOOR(DATE_PART('epoch'::TEXT, C.DUTY_RECPT_DT ))::BIGINT
                    , 'return_prearnge_dt', FLOOR(DATE_PART('epoch'::TEXT, C.RETURN_PREARNGE_DT ))::BIGINT
                    , 'photogrf_dt',FLOOR(DATE_PART('epoch'::TEXT, C.PHOTOGRF_DT ))::BIGINT
                    , 'assi_user_nm',(CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN H.USER_NM ELSE I.USER_NM END)
                    , 'assi_user_posi',
                    (
                        CASE
                            WHEN C.REQ_USER_SE_CD='RUS001' THEN
                            (
                                SELECT CD_NM  FROM TB_COMM_CD WHERE 1=1 AND TB_COMM_CD.CD_ID=H.MGZN_POS_CD AND DEL_YN='N' LIMIT 1
                            )
                            ELSE
                            (
                                SELECT CD_NM FROM TB_COMM_CD WHERE  TB_COMM_CD.CD_ID=I.STYLE_LIST_POS_CD AND DEL_YN='N' LIMIT 1
                            )
                        END
                    )
                    , 'assi_phone_no',(CASE WHEN C.REQ_USER_SE_CD='RUS001' THEN H.PHONE_NO ELSE I.PHONE_NO END)
                    , 'showroom_img_array'
                    ,ARRAY(SELECT CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/',N.IMG_URL_ADRES))
                )
            ) AS USER_INFO
           
        FROM
            ( SELECT B.REQ_NO, B.SHOWROOM_NO, B.REQ_STATUS_CD FROM TB_REQ_SHOWROOM B WHERE B.REQ_NO=#{req_no} AND B.DEL_YN='N' ) B
            INNER JOIN TB_SHOWROOM A ON A.SHOWROOM_NO=B.SHOWROOM_NO AND A.DEL_YN='N'
            INNER JOIN TB_REQ C ON B.REQ_NO=C.REQ_NO AND C.BRAND_ID=#{brand_id} AND C.DEL_YN='N' 
            LEFT JOIN TB_MGZN_USER D ON C.REQ_USER_ID=D.USER_ID AND D.DEL_YN='N'
            LEFT JOIN TB_MGZN E ON D.MGZN_ID=E.MGZN_ID AND E.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER F ON C.REQ_USER_ID=F.USER_ID AND F.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES G ON C.DLVY_ADRES_NO=G.DLVY_ADRES_NO AND G.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER H ON C.CONTACT_USER_ID=H.USER_ID AND H.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER I ON C.CONTACT_USER_ID=I.USER_ID AND I.DEL_YN='N'
            INNER JOIN TB_SHOWROOM_SAMPLE J ON A.SHOWROOM_NO=J.SHOWROOM_NO AND J.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG K ON J.SAMPLE_NO=K.SAMPLE_NO AND K.MAIN_YN=true AND K.DEL_YN='N'
            INNER JOIN TB_REQ_SHOWROOM L ON C.REQ_NO=L.REQ_NO AND L.DEL_YN='N'
            INNER JOIN TB_SHOWROOM_SAMPLE M ON L.SHOWROOM_NO=M.SHOWROOM_NO AND M.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG N ON M.SAMPLE_NO=N.SAMPLE_NO AND N.MAIN_YN=true AND N.DEL_YN='N'            
        GROUP BY A.SHOWROOM_NO, A.SHOWROOM_NM,IMAGE_URL,B.REQ_STATUS_CD
    </select>

    <!--
        샘플요청에 관한 팝업 API
        /showroom-request-popup/:req_no GET
    -->

    <select id="SELECT.REQUEST.POPUP.002">
        SELECT
            B.USER_NM AS REQ_SEND_USERNAME
            , C.MGZN_NM
            , D.BRAND_NM
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1) || '/' || D.BRAND_LOGO_URL_ADRES AS BRAND_LOGO_URL_ADRES
            , E.USER_NM AS CONTACT_USERNAME
            , E.USER_ID AS CONTACT_USER_ID
            , E.PHONE_NO AS CONTACT_PHONE_NO
            , ((FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_PREARNGE_BEGIN_DT ))::BIGINT-FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT)/3600)::TEXT AS SHOOTING_START_TIME
            , ((FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_PREARNGE_END_DT ))::BIGINT-FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT)/3600)::TEXT AS SHOOTING_END_TIME
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT AS SHOOTING_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS PICKUP_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS RETURNING_DATE
            , F.DLVY_ADRES_NM
            , F.ADRES_DETAIL
            , A.DLVY_ATENT_MATTER
            , A.PHOTOGRF_CONCEPT
            , A.PHOTOGRF_MODL_SE_CD
            , A.MODEL_LIST
            , A.CELEB_LIST
            , A.OWN_PAID_PICTORIAL_YN
            , A.OWN_PAID_PICTORIAL_CONTENT
            , A.OTHER_PAID_PICTORIAL_YN
            , A.OTHER_PAID_PICTORIAL_CONTENT
            , A.LOC_YN
            , A.LOC_VALUE
            , A.TODAY_CONNECT_HOPE_POSBL_YN AS TODAY_CONNECT
            , A.PAGE_CNT
            , A.ETC_BRAND_INFO
            , A.ADD_REQ_CNTENT AS MESSAGE
        FROM 
        (
            SELECT
                A.REQ_USER_ID
                , A.BRAND_ID
                , A.CONTACT_USER_ID
                , A.PHOTOGRF_DT
                , A.PHOTOGRF_PREARNGE_BEGIN_DT
                , A.PHOTOGRF_PREARNGE_END_DT
                , A.DUTY_RECPT_DT
                , A.RETURN_PREARNGE_DT
                , A.DLVY_ADRES_NO
                , A.DLVY_ATENT_MATTER
                , A.PHOTOGRF_CONCEPT
                , A.PHOTOGRF_MODL_SE_CD
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.OWN_PAID_PICTORIAL_YN
                , A.OWN_PAID_PICTORIAL_CONTENT
                , A.OTHER_PAID_PICTORIAL_YN
                , A.OTHER_PAID_PICTORIAL_CONTENT
                , A.LOC_YN
                , A.LOC_VALUE
                , A.TODAY_CONNECT_HOPE_POSBL_YN
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.ADD_REQ_CNTENT
            FROM TB_REQ A
            WHERE 1=1
                AND A.REQ_NO=#{req_no}
                AND A.BRAND_ID=#{brand_id}
                AND A.DEL_YN='N'
        ) A
        LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
        LEFT JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
        INNER JOIN TB_BRAND D ON A.BRAND_ID=D.BRAND_ID AND D.DEL_YN='N'
        LEFT JOIN TB_MGZN_USER E ON A.CONTACT_USER_ID=E.USER_ID AND E.DEL_YN='N'
        INNER JOIN TB_DLVY_ADRES F ON A.DLVY_ADRES_NO=F.DLVY_ADRES_NO AND F.DEL_YN='N'
        INNER JOIN TB_COMM_CD G ON A.PHOTOGRF_MODL_SE_CD=G.CD_ID AND G.CD_TYP_ID='CT00000001'
    </select>

    <!-- 
        동일일자 동일룩에 대한 사전체크를 위한 쿼리
        b.photogrf_prearnge_begin_dt > (NOW() AT TIME ZONE 'Asia/Seoul') 일시적 제거
    -->
    <select id="SELECT.REQUEST.POPUP.003">
        SELECT 
            c.showroom_no,   
            JSONB_AGG(JSONB_BUILD_OBJECT(
                'target_req_no',a.req_no ,
                'target_showroom_no',d.showroom_no ,
                'target_user_name',e.user_nm ,
                'target_user_position',g.cd_nm ,
                'target_company_name',f.mgzn_nm ,
                'showroom_nm',d.showroom_nm, 
                'photogrf_dt',(b.photogrf_prearnge_begin_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE,
                'duty_recpt_dt',(b.duty_recpt_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE,
                'return_prearnge_dt',(b.return_prearnge_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE
            )) as date_info
        FROM 
            tb_new_req_sample a 
            INNER JOIN tb_req as b ON a.req_no = b.req_no and  (b.photogrf_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE  = (
                SELECT (photogrf_prearnge_begin_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE 
                FROM tb_req where req_no = #{req_no}
            )
            INNER JOIN tb_req_showroom c ON c.req_no = b.req_no and b.del_yn  = 'N'
            INNER JOIN tb_showroom d  on c.showroom_no  = d.showroom_no 
            INNER JOIN tb_mgzn_user e on a.pickup_userid = e.user_id 
            LEFT JOIN TB_COMM_CD g ON g.CD_TYP_ID = 'CT00000002' AND e.mgzn_pos_cd = g.CD_ID    
            INNER JOIN tb_mgzn f on e.mgzn_id = f.mgzn_id 
        WHERE
            c.req_status_cd in ( 'RS0003','RS0005','RS0006')
            and a.sample_no in ( 
                SELECT tnrs.sample_no FROM tb_new_req_sample tnrs WHERE  tnrs.req_no = #{req_no}
            ) 
        GROUP BY c.showroom_no    
    </select>
    <select id="INSERT.SHOWROOM.NOTIFICATION">
        WITH tb_showroom_notifi_ADD AS
        (
            INSERT INTO tb_showroom_notifi
            (
                send_man_id
                , recv_man_se_cd
                , recv_man_id
                , send_man_user_type
                , showroom_no
                , content
                , brand_id
            )
            SELECT 
                #{user_id}
                , 'RMS003'
                , U.USER_ID
                , 'RMS001'
                , #{showroom_no}
                , 
                (
                    SELECT
                        CONCAT('[신규샘플안내] ', A.BRAND_NM,'에서 신규 샘플이 등록되었습니다.')
                    FROM 
                        TB_BRAND A 
                    WHERE
                        A.BRAND_ID = #{brand_id}
                ) 
                , #{brand_id}
            FROM TB_MGZN_USER AS U
            WHERE 
                U.DEL_YN='N'
                AND showroom_notifi_recv_yn IS TRUE
                AND ( NOT_DISTURB_MODE_YN IS FALSE OR ( CURRENT_TIMESTAMP BETWEEN NOT_DISTURB_BEGIN_DT AND  NOT_DISTURB_END_DT ) )
            RETURNING content, recv_man_id
        )           
        SELECT
            B.TOKEN_VALUE, MAX(A.content) AS MESSAGE
        FROM 
            tb_showroom_notifi_ADD A JOIN TB_FCM_PUSH_TOKEN B ON A.recv_man_id = B.USER_ID AND B.USE_YN
        GROUP BY B.TOKEN_VALUE
    </select>

    <select id="SELECT.SEARCH.BRAND.SHOWROOM">
        SELECT 
            B.cd_nm as season_se_id ,A.showroom_no , A.showroom_nm , A.season_year , A.season_se_cd 
        FROM 
            tb_showroom A 
            INNER JOIN TB_COMM_CD B ON A.season_se_cd = B.CD_ID AND B.CD_TYP_ID = 'CT00000008' AND ( B.BRAND_ID = '' OR  B.BRAND_ID = #{brand_id}) AND B.DEL_YN = 'N'
        WHERE 
            A.brand_id  = #{brand_id} and A.del_yn = 'N' and A.show_yn ='Y' and A.showroom_no not in ( #{showroom_no} )
            AND ((A.showroom_nm ILIKE #{search_text} || '%')OR (#{search_text} IS NULL)OR (#{search_text}=''))
        ORDER BY A.season_year desc, A.season_se_cd , A.showroom_nm 
    </select>
</mapper>
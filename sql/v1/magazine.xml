<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MAGAZINE">
    
    <!-- 
        브랜드 즐겨찾기 목록
        /magazine/fav-brand GET
    -->
    <select id="SELECT.DIBS.BRAND_LIST">
        /* SELECT.DIBS.BRAND_LIST */
        SELECT 
            B.BRAND_ID
            , B.COMPY_NM
            , B.BRAND_NM 
            , B.BRAND_NM_KOR
        FROM 
        (
            SELECT
                A.BRAND_ID
            FROM TB_BRAND_DIBS A 
            WHERE 1=1
                AND A.USER_ID = #{user_id}
                AND A.DIBS_YN IS TRUE
        ) A 
        JOIN TB_BRAND B
        ON 1=1
            AND A.BRAND_ID = B.BRAND_ID
    </select>

    <!-- 
        브랜드 즐겨찾기 갱신
        /magazine/fav-brand PUT
    -->
    <update id="UPDATE.DIBS.BRAND">
        /* UPDATE.DIBS.BRAND */
        INSERT INTO TB_BRAND_DIBS 
        (USER_ID, BRAND_ID, DIBS_YN)
        VALUES 
        (#{user_id}, #{brand_id}, #{dibs_yn})
        ON CONFLICT(BRAND_ID, USER_ID) DO
        UPDATE 
        SET 
            DIBS_YN = #{dibs_yn}
    </update>

    <!--
        보도자료 수정 등 접근권한 체크
        /brand/press/:brand_press_no PUT
    -->
    <select id="CHECK.ACCESSABLE.REQ.MGZN">
        SELECT 
            B.MGZN_ID = #{mgzn_id} AS ACCESSABLE
        FROM 
            ( 
                SELECT 
                    A.REQ_USER_ID FROM TB_REQ A 
                WHERE  
                    A.REQ_NO = #{req_no}
            ) A
            INNER JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
    </select>

    <select id="CHECK.ACCESSABLE.REQ.MGZN.ARRAY">
        SELECT 
            B.MGZN_ID = #{mgzn_id} AS ACCESSABLE
        FROM 
            ( 
                SELECT 
                    A.REQ_USER_ID FROM TB_REQ A 
                WHERE  
                    A.REQ_NO in 
                    (
                        <foreach collection="req_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
            ) A
            INNER JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
    </select>

    <!--
        보도자료 수정 등 접근권한 체크
        /brand/press/:brand_press_no PUT
    -->
    <select id="CHECK.ACCESSABLE.REQ.STYLIST">
        SELECT  A.REQ_USER_ID=#{user_id} AS ACCESSABLE FROM TB_REQ WHERE REQ_NO=#{req_no}
    </select>

    <!-- 
        샘플 수령 미수령
        /magazine/sample-not-receive POST
    -->
    <insert id="UPDATE.SAMPLE.NOT.RECEIVE">
        /* UPDATE.SAMPLE.NOT.RECEIVE */
        WITH 
        SELECT_REQ AS 
        (
            SELECT
                L.REQ_NO 
                , L.REQ_USER_ID
            FROM TB_REQ L
            WHERE 1=1
                -- AND req_status_cd = 'RS0003'
                AND L.REQ_NO = #{req_no}
                AND L.DEL_YN = 'N'
                AND 
                (
                    L.REQ_USER_ID = #{user_id}
                    <if test="user_type == 'MAGAZINE'">
                    OR
                    L.REQ_USER_ID IN (SELECT USER_ID FROM TB_MGZN_USER WHERE MGZN_ID = #{mgzn_id})
                    </if>
                )
        )
        , INSERT_HISTORY AS 
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT 
                REQ_NO
                , 'RS0003'
                , 'RS0003'
            FROM SELECT_REQ
            RETURNING REQ_HIST_NO
        )
        , INSERT_REQ_HIST_NOTIFI AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI 
                (
                    REQ_HIST_NOTIFI_SE_CD
                    , NOTIFI_SUBJ
                    , NOTIFI_CNTENT
                    , REQ_HIST_NO
                    , SEND_USER_ID
                    , RECV_USER_ID
                    , SEND_MAN_USER_TYPE
                    , NOT_RECEIVE_YN
                    , NOTICE_TYPE
                )
                SELECT 
                    'RHNS03'
                    , '[미수령알림] ' || 
                    <if test="user_type == 'MAGAZINE'">
                        (SELECT MGZN_NM FROM TB_MGZN WHERE MGZN_ID = #{mgzn_id} LIMIT 1)||' '||(SELECT USER_NM FROM TB_MGZN_USER WHERE USER_ID=#{user_id} and DEL_YN='N')
                    </if>
                    <if test="user_type == 'STYLIST'">
                        (SELECT POSI_COMPY_NM FROM TB_STYLIST WHERE USER_ID = #{user_id} LIMIT 1)||' '||(SELECT USER_NM FROM TB_STYLE_LIST_USER WHERE USER_ID=#{user_id} and DEL_YN='N')
                    </if>
                    || '에서 미수령 알림을 보냈습니다.'
                    , <if test="user_type == 'MAGAZINE'">
                        (SELECT MGZN_NM FROM TB_MGZN WHERE MGZN_ID = #{mgzn_id} LIMIT 1)||' '||(SELECT USER_NM FROM TB_MGZN_USER WHERE USER_ID=#{user_id} and DEL_YN='N')
                    </if>
                    <if test="user_type == 'STYLIST'">
                        (SELECT POSI_COMPY_NM FROM TB_STYLIST WHERE USER_ID = #{user_id} LIMIT 1)||' '||(SELECT USER_NM FROM TB_STYLE_LIST_USER WHERE USER_ID=#{user_id} and DEL_YN='N')
                    </if>
                    || '에서 '||(SELECT (PHOTOGRF_DT at time zone 'utc' at time zone 'kst')::DATE FROM (
                                SELECT *
                                FROM TB_REQ
                                WHERE 1=1
                                    AND REQ_NO=#{req_no}
                                    AND DEL_YN='N'
                            ) A)||' 촬영 건 미수령 알림을 보냈습니다.'
                    , (SELECT REQ_HIST_NO FROM INSERT_HISTORY LIMIT 1)
                    , #{user_id}
                    , T.USER_ID
                    , <if test="user_type == 'MAGAZINE'">
                        'magazine'
                    </if>
                    <if test="user_type == 'STYLIST'">
                        'stylist'
                    </if>
                    , TRUE
                    , 'send'
                FROM 
                (
                    (
                        SELECT USER_ID
                        FROM TB_MGZN_USER
                        WHERE 1=1
                            AND MGZN_ID = 
                            (
                                SELECT MGZN_ID
                                FROM TB_MGZN_USER
                                WHERE 1=1
                                    AND USER_ID = (SELECT REQ_USER_ID FROM SELECT_REQ LIMIT 1)
                            )
                    )
                    UNION
                    (
                        SELECT USER_ID 
                        FROM TB_STYLE_LIST_USER
                        WHERE 1=1
                            AND USER_ID = (SELECT REQ_USER_ID FROM SELECT_REQ LIMIT 1) 
                    )
                ) T
                RETURNING NOTIFI_SUBJ
        )
        SELECT
            B.TOKEN_VALUE
            , A.NOTIFI_SUBJ AS MESSAGE 
        FROM INSERT_REQ_HIST_NOTIFI A
        JOIN TB_FCM_PUSH_TOKEN B
        ON 1=1
            AND A.RECV_USER_ID = B.USER_ID
            AND B.USE_YN
    </insert>

    <!-- 
        내 프로필 정보 수정
        /magazine/my-profile PUT
    -->
    <update id="UPDATE.MY.PROFILE">
        /* UPDATE.MY.PROFILE */
        UPDATE TB_MGZN_USER 
        SET 
            USER_NM = #{user_nm}
            , MGZN_POS_CD = #{mgzn_pos_cd}
            , PHONE_NO = #{phone_no}
            , TEAM_USER_ID = #{team_user_id}
            , IMG_URL_ADRES = #{img_url_adres}
        WHERE 1=1
            AND USER_ID = #{user_id}
    </select>

<!--
        내 정보 조회
        /brand/my-info GET
    -->
    <select id="SELECT.MY.INFO">
        /* SELECT.MY.INFO */
        SELECT
             A.*,B.mgzn_nm,B.color ,B.compy_adres ,B.mgzn_logo_url_adres ,B.mgzn_id
             , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || B.mgzn_logo_url_adres AS LOGO_FULL_PATH
        FROM TB_MGZN_USER A INNER JOIN TB_MGZN B ON A.MGZN_ID = B.MGZN_ID AND B.DEL_YN='N'
        WHERE 1=1 AND A.USER_ID = #{user_id}
    </select>

    <!-- 
        문의 조회
        /magazine/qna-list GET
    -->
    <select id="SELECT.QNA.LIST.001">
        /* SELECT.QNA.LIST.001 */
        SELECT 
            T2.SYS_INQRY_NO
            , T2.INQRY_DT
            , T2.INQRY_SUBJ
            , T2.DEL_YN
            , T2.ANSWER_YN
            , T2.TOTAL_COUNT
            , ROW_NUMBER () OVER() AS NO
        FROM
        (
            SELECT 
                T.SYS_INQRY_NO
                , T.INQRY_DT
                , T.INQRY_SUBJ
                , T.DEL_YN
                , T.ANSWER_YN
                , COUNT(1) OVER() AS TOTAL_COUNT 
            FROM 
            (
                SELECT 
                    A.SYS_INQRY_NO
                    , FLOOR(DATE_PART('epoch'::TEXT, A.INQRY_DT ))::BIGINT AS INQRY_DT
                    , A.INQRY_SUBJ
                    , A.DEL_YN
                    , B.SYS_INQRY_ANSWER_NO IS NOT NULL AS ANSWER_YN
                FROM TB_SYS_INQRY A
                LEFT JOIN TB_SYS_INQRY_ANSWER B
                    ON 1=1
                    AND A.SYS_INQRY_NO=B.SYS_INQRY_NO
                WHERE 1=1
                    AND A.DEL_YN='N'
                    AND A.INQRY_MAN_ID = #{user_id}
                    <if test="has_search">
                    AND (
                        A.INQRY_SUBJ ILIKE '%' || #{search_text} || '%' 
                    )
                    </if> 
                ORDER BY INQRY_DT DESC
            ) T
        ) T2
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>


    <select id="SELECT.ALARM.LIST.001">
        /* SELECT.ALARM.LIST.001 */
        WITH FIRST_UPDATE AS
        (
            UPDATE TB_BRAND_NOTICE_NOTIFI
            SET RECV_CNFIRM_YN=true
            WHERE RECV_MAN_ID=#{user_id} AND DEL_YN='N'
        )
        , SECOND_UPDATE AS
        (
            UPDATE TB_REQ_HIST_NOTIFI
            SET RECV_CNFIRM_YN=true
            WHERE RECV_USER_ID=#{user_id} AND DEL_YN='N'
        )
        SELECT 
            T.NOTICE_ID
            , T.BRAND_ID
            , T.SEND_USER_ID
            , T.SEND_DT
            , T.RECV_USER_ID
            , T.SUBJ
            , T.CNTENT
            , T.BRAND_NM
            , T.USERNAME
            , T.REQ_HIST_NOTIFI_SE_CD
            , T.REQ_TYPE
            , T.REQ_NO
            , D2.date_info
            , T.NOTICE_TYPE
            , T.SEND_MAN_USER_TYPE
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM 
        (
            SELECT
                A.NOTICE_NO AS NOTICE_ID
                , NULL AS BRAND_ID
                , A.SEND_MAN_ID AS SEND_USER_ID
                , FLOOR(DATE_PART('epoch' :: TEXT, A.SEND_DT)) :: BIGINT AS SEND_DT
                , A.RECV_MAN_ID AS RECV_USER_ID
                , B.TITLE AS SUBJ
                , A.content AS CNTENT
                , NULL AS BRAND_NM
                , 'cms' AS USERNAME
                , NULL AS REQ_HIST_NOTIFI_SE_CD
                , NULL AS REQ_TYPE
                , 'cms' AS NOTICE_TYPE
                , 'cms' AS SEND_MAN_USER_TYPE
                , NULL AS REQ_NO
            FROM
                (
                    SELECT
                        A.NOTICE_NOTIFI_NO
                        , A.NOTICE_NO
                        , A.SEND_MAN_ID
                        , A.SEND_DT
                        , A.RECV_MAN_ID
                        , A."content"
                    FROM
                        TB_NOTICE_NOTIFI A
                    WHERE
                        A.RECV_MAN_ID = #{user_id} AND A.DEL_YN = 'N'
                ) A
            INNER JOIN TB_NOTICE B ON A.NOTICE_NO = B.NOTICE_NO AND B.DEL_YN = 'N'
            UNION ALL
            SELECT
                A.BRAND_NOTICE_NO AS NOTICE_ID
                , A.BRAND_ID
                , A.SEND_MAN_ID AS SEND_USER_ID
                , FLOOR(DATE_PART('epoch'::TEXT, A.SEND_DT ))::BIGINT AS SEND_DT
                , A.RECV_MAN_ID AS RECV_USER_ID
                , A.SUBJECT AS SUBJ
                , A.CONTENTS AS CNTENT
                , D.BRAND_NM
                , NULL AS USERNAME
                , NULL AS REQ_HIST_NOTIFI_SE_CD
                , NULL AS REQ_TYPE
                , 'brand' AS NOTICE_TYPE
                , 'brand' AS SEND_MAN_USER_TYPE
                , NULL AS REQ_NO
            FROM  
            (
                SELECT
                    A.BRAND_NOTICE_NO
                    , A.BRAND_ID
                    , A.SEND_MAN_ID
                    , A.SEND_DT
                    , A.RECV_MAN_ID
                    , A.SUBJECT
                    , A.CONTENTS
                FROM TB_BRAND_NOTICE_NOTIFI A
                WHERE A.RECV_MAN_ID=#{user_id} AND A.DEL_YN='N' 
            ) A 
            INNER JOIN TB_BRAND_NOTICE B ON A.BRAND_NOTICE_NO=B.BRAND_NOTICE_NO AND B.DEL_YN='N'
            INNER JOIN TB_BRAND D ON A.BRAND_ID=D.BRAND_ID AND D.DEL_YN='N'
            UNION ALL
            SELECT
                C.REQ_HIST_NOTIFI_NO AS NOTICE_ID
                , NULL AS BRAND_ID
                , C.SEND_USER_ID
                , FLOOR(DATE_PART('epoch'::TEXT, C.SEND_DT ))::BIGINT AS SEND_DT
                , C.RECV_USER_ID
                , C.NOTIFI_SUBJ AS SUBJ
                , C.NOTIFI_CNTENT AS CNTENT
                , NULL AS BRAND_NM
                , CASE
                    WHEN C.SEND_MAN_USER_TYPE='brand' THEN E.USER_NM
                    WHEN C.SEND_MAN_USER_TYPE='magazine' THEN F.USER_NM
                    WHEN C.SEND_MAN_USER_TYPE='stylist' THEN G.USER_NM
                END AS USERNAME
                , C.REQ_HIST_NOTIFI_SE_CD
                , H.CD_NM AS REQ_TYPE
                , C.NOTICE_TYPE
                , C.SEND_MAN_USER_TYPE
                , D.REQ_NO
            FROM 
            (
                SELECT
                    C.REQ_HIST_NOTIFI_NO
                    , C.REQ_HIST_NO
                    , C.SEND_USER_ID
                    , C.SEND_DT
                    , C.RECV_USER_ID
                    , C.NOTIFI_SUBJ
                    , C.NOTIFI_CNTENT
                    , C.SEND_MAN_USER_TYPE
                    , C.REQ_HIST_NOTIFI_SE_CD
                    , C.NOTICE_TYPE
                FROM TB_REQ_HIST_NOTIFI C
                WHERE C.RECV_USER_ID=#{user_id} AND C.DEL_YN='N'
            ) C
            INNER JOIN TB_REQ_HIST D ON C.REQ_HIST_NO=D.REQ_HIST_NO AND D.DEL_YN='N'            
            LEFT JOIN TB_BRAND_USER E ON E.USER_ID=C.SEND_USER_ID AND E.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER F ON F.USER_ID=C.SEND_USER_ID AND F.DEL_YN='N'
            LEFT JOIN TB_STYLE_LIST_USER G ON G.USER_ID=C.SEND_USER_ID AND G.DEL_YN='N'
            INNER JOIN TB_COMM_CD H ON H.CD_ID=C.REQ_HIST_NOTIFI_SE_CD AND H.CD_TYP_ID='CT00000005' AND H.DEL_YN='N'            
            UNION ALL
            SELECT
                D.showroom_no AS NOTICE_ID
                , D.BRAND_ID
                , D.SEND_USER_ID
                , FLOOR(DATE_PART('epoch'::TEXT, D.SEND_DT ))::BIGINT AS SEND_DT
                , D.RECV_USER_ID
                , D.NOTIFI_SUBJ AS SUBJ
                , CONCAT(D2.BRAND_NM,'의 ',D.NOTIFI_CNTENT) AS CNTENT
                , D2.BRAND_NM
                , E2.USER_NM AS USERNAME
                , NULL AS REQ_HIST_NOTIFI_SE_CD
                , NULL AS REQ_TYPE
                , D.NOTICE_TYPE
                , D.SEND_MAN_USER_TYPE
                , NULL AS REQ_NO
            FROM 
            (
                SELECT
                    D.showroom_notifi_no
                    , D.send_man_id as SEND_USER_ID
                    , D.SEND_DT
                    , D.recv_man_id as RECV_USER_ID
                    , D.content AS NOTIFI_SUBJ
                    , D.content AS NOTIFI_CNTENT
                    , D.SEND_MAN_USER_TYPE
                    , D.showroom_no
                    , 'showroom' as NOTICE_TYPE
                    , D.brand_id
                FROM tb_showroom_notifi D
                WHERE D.recv_man_id=#{user_id} AND D.DEL_YN='N'
            ) D
            INNER JOIN TB_BRAND D2 ON D2.BRAND_ID=D.BRAND_ID AND D2.DEL_YN='N'
            LEFT JOIN TB_BRAND_USER E2 ON E2.USER_ID=D.SEND_USER_ID AND E2.DEL_YN='N'    
            UNION ALL
            SELECT
                D.brand_press_no AS NOTICE_ID
                , D.BRAND_ID
                , D.SEND_USER_ID
                , FLOOR(DATE_PART('epoch'::TEXT, D.SEND_DT ))::BIGINT AS SEND_DT
                , D.RECV_USER_ID
                , D.NOTIFI_SUBJ AS SUBJ
                , CONCAT(D2.BRAND_NM,'의 ',D.NOTIFI_CNTENT) AS CNTENT
                , D2.BRAND_NM
                , E2.USER_NM AS USERNAME
                , NULL AS REQ_HIST_NOTIFI_SE_CD
                , NULL AS REQ_TYPE
                , D.NOTICE_TYPE
                , NULL AS SEND_MAN_USER_TYPE
                , NULL AS REQ_NO
            FROM 
            (
                SELECT
                    D.brand_press_no
                    , D.send_man_id as SEND_USER_ID
                    , D.SEND_DT
                    , D.recv_man_id as RECV_USER_ID
                    , D.content AS NOTIFI_SUBJ
                    , D.content AS NOTIFI_CNTENT
                    , 'press' as NOTICE_TYPE
                    , P.BRAND_ID
                FROM tb_press_notifi D INNER JOIN tb_brand_press P ON D.brand_press_no = P.brand_press_no
                WHERE D.recv_man_id=#{user_id} AND D.DEL_YN='N'
            ) D
            INNER JOIN TB_BRAND D2 ON D2.BRAND_ID=D.BRAND_ID AND D2.DEL_YN='N'
            LEFT JOIN TB_BRAND_USER E2 ON E2.USER_ID=D.SEND_USER_ID AND E2.DEL_YN='N'        
            ORDER BY SEND_DT DESC
        ) T LEFT JOIN (
            SELECT tr.req_no ,
                JSONB_AGG( 
                JSONB_BUILD_OBJECT(
                    'showroom_no',trs.showroom_no,
                    'shoting_date',extract(epoch from tr.PHOTOGRF_DT),
                    'pickup_date',extract(epoch from tr.duty_recpt_dt),
                    'return_date',extract(epoch from tr.return_prearnge_dt)
                )) as date_info
            FROM 
                tb_req as tr INNER JOIN tb_req_showroom trs ON tr.req_no = trs.req_no 
            WHERE 1=1
                AND ( tr.req_user_id = #{user_id} OR tr.contact_user_id = #{user_id} )
            GROUP BY tr.req_no 
        ) as D2 ON T.REQ_NO = D2.REQ_NO
        ORDER BY T.SEND_DT DESC
        <if test="limit">
        OFFSET ${offset} 
        LIMIT ${limit}
        </if>
    </select>

    <!-- 
        브랜드 계열 알림을 삭제합니다
        /magazine/alarm-delete
    -->

    <delete id="DELETE.ALARM.001">
        /* DELETE.ALARM.001 */
        WITH
        DELETE_BRAND_NOTICE AS
        (
            UPDATE TB_BRAND_NOTICE
            SET
                DEL_YN='Y'
            WHERE 1=1
                AND BRAND_NOTICE_NO=#{alarm_id}
                AND #{alarm_id} IN 
                (
                    SELECT 
                        A.BRAND_NOTICE_NO
                    FROM TB_BRAND_NOTICE_NOTIFI A
                    WHERE 1=1
                        AND A.RECV_MAN_ID=#{user_id}
                        AND A.DEL_YN='N'
                )
        )
        , DELETE_BRAND_NOTICE_NOTIFI AS
        (
            UPDATE TB_BRAND_NOTICE_NOTIFI
            SET
                DEL_YN='Y'
            WHERE 1=1
                AND BRAND_NOTICE_NO=#{alarm_id}
                AND RECV_MAN_ID=#{user_id}
        )
        SELECT 1
    </delete>

    <!-- 
        전체 관리자로부터의 알림 삭제합니다
        /magazine/alarm-delete
    -->

    <delete id="DELETE.ALARM.003">
        UPDATE tb_notice_notifi
        SET
            DEL_YN='Y'
        WHERE 1=1
            AND notice_no=#{alarm_id}
            AND recv_man_id=#{user_id}
    </delete>

    <!-- 
        샘플 계열 알림을 삭제합니다
        /magazine/alarm-delete
    -->

    <delete id="DELETE.ALARM.002">
        /* DELETE.ALARM.002 */
        UPDATE TB_REQ_HIST_NOTIFI
        SET
            DEL_YN='Y'
        WHERE 1=1
            AND REQ_HIST_NOTIFI_NO=#{alarm_id}
            AND RECV_USER_ID=#{user_id}
    </delete>

    <!-- 
        요청페이지의 샘플 사진, ID와 이름의 리스트를 출력합니다
        /magazine/showroom-request
    -->

    <select id="SELECT.REQUEST.001">
        SELECT
            A.SHOWROOM_NO
            , A.SHOWROOM_NM
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1) || '/' || C.IMG_URL_ADRES AS IMG_URL_ADRES
            , C.IMG_URL_ADRES AS IMG_PATH
            , F.reservation_list
        FROM 
            (
                SELECT
                    A.SHOWROOM_NO, A.SHOWROOM_NM
                FROM TB_SHOWROOM A
                WHERE 1=1
                    AND A.SHOWROOM_NO IN
                    (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                    AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_SHOWROOM_SAMPLE B ON A.SHOWROOM_NO=B.SHOWROOM_NO AND B.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG C ON B.SAMPLE_NO=C.SAMPLE_NO AND C.SHOWROOM_MAIN_YN=true AND C.DEL_YN='N'
            LEFT JOIN (
                SELECT 
                    trs.showroom_no,
                    JSONB_AGG(JSONB_BUILD_OBJECT(
                        'photogrf_dt',(tr.photogrf_prearnge_begin_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE,
                        'duty_recpt_dt',(tr.duty_recpt_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE,
                        'return_prearnge_dt',(tr.return_prearnge_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE
                    )) as reservation_list
                FROM 
                    tb_req_showroom trs 
                    INNER JOIN tb_req as tr on trs.req_no = tr.req_no and tr.del_yn  = 'N'
                WHERE 
                    trs.req_status_cd not IN ('RS0004')
                    and trs.del_yn = 'N' AND tr.photogrf_prearnge_begin_dt > (NOW() AT TIME ZONE 'Asia/Seoul') 
                    and trs.showroom_no in (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    ) 
                GROUP BY trs.showroom_no
            ) as F on A.showroom_no = F.showroom_no
        ORDER BY A.SHOWROOM_NO
    </select>

    <!-- 
        요청페이지의 매거진 이름과 유저네임을 출력합니다
        /magazine/showroom-request
    -->

    <select id="SELECT.REQUEST.002">
        SELECT 
            A.USER_NM, B.MGZN_NM, C.DLVY_ADRES_NM, C.DLVY_ADRES_NO, C.ADRES_DETAIL
        FROM 
        (
            SELECT
                A.USER_NM, A.MGZN_ID, A.MGZN_USER_NO, A.USER_ID
            FROM TB_MGZN_USER A
            WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N'
        ) A INNER JOIN TB_MGZN B ON A.MGZN_ID=B.MGZN_ID AND B.DEL_YN='N'
            LEFT JOIN TB_DLVY_ADRES C ON A.MGZN_USER_NO=C.USER_NO AND C.USER_SE_CD='US0001' AND C.DEL_YN='N'
        ORDER BY C.updt_dt DESC
        LIMIT 5
    </select>


    <!-- 
        요청페이지의 매거진 유저 이름, ID, 전화번호를 출력합니다
        /magazine/showroom-request
    -->

    <select id="SELECT.REQUEST.003">
        /* SELECT.REQUEST.003 */
        SELECT
            A.USER_ID
            , A.USER_NM AS MGZN_USER_NM
            , A.PHONE_NO
        FROM TB_MGZN_USER A
        WHERE 1=1
            AND A.MGZN_ID=#{mgzn_id}
            AND A.DEL_YN='N'
    </select>

    <!-- 
        요청페이지의 매거진 유저 이름, ID, 전화번호를 출력합니다
        /magazine/showroom-request
    -->

    <select id="SELECT.REQUEST.006">
        /* SELECT.REQUEST.006 */
        SELECT 
            A.USER_NM
            , B.MGZN_NM
        FROM 
        (
            SELECT
                A.USER_NM
                , A.MGZN_ID
            FROM TB_MGZN_USER A
            WHERE 1=1
                AND A.USER_ID=#{user_id}
                AND A.DEL_YN='N'
        ) A
        INNER JOIN TB_MGZN B
        ON 1=1
            AND A.MGZN_ID=B.MGZN_ID
            AND B.DEL_YN='N'
    </select>

    <select id="SELECT.REQUEST.007">
        /* SELECT.REQUEST.007 */
        SELECT 
            (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1)
                ||'/'
                ||BRAND_LOGO_URL_ADRES
            AS BRAND_LOGO_URL_ADRES
        FROM TB_BRAND
        WHERE 1=1
            AND BRAND_ID=#{brand_id}
            AND DEL_YN='N'
    </select>

    <!-- 
        샘플요청을 보냅니다
        /magazine/showroom-request-send
        INSERT INTO TB_DLVY_ADRES
            (
                DLVY_ADRES_NO
                , USER_SE_CD
                , ADRES_REG_DT
                , DLVY_ADRES_NM
                , USER_NO
                , DEL_YN
                , ADRES_DETAIL
            )
            VALUES
            (
                DEFAULT
                , 'US0001'
                , DEFAULT
                , #{dlvy_adres_nm}
                , 
                (
                    SELECT MGZN_USER_NO FROM TB_MGZN_USER
                    WHERE 1=1
                        AND USER_ID=#{user_id}
                        AND DEL_YN='N'
                    LIMIT 1
                )
                , 'N'
                , #{adres_detail}
            )
            RETURNING DLVY_ADRES_NO
    -->
    <insert id="INSERT.REQUEST.001">
        WITH
        TB_DLVY_ADRES_ADD AS
        (
            <choose>                
                <when test="dlvy_adres_no == '0'">
                    INSERT INTO TB_DLVY_ADRES
                    (
                        DLVY_ADRES_NO
                        , USER_SE_CD
                        , ADRES_REG_DT
                        , DLVY_ADRES_NM
                        , ADRES_DETAIL
                        , USER_NO
                        , DEL_YN
                    )
                    VALUES
                    (
                        DEFAULT
                        , 'US0001'
                        , DEFAULT
                        , #{dlvy_adres_nm}
                        , #{adres_detail}
                        , (
                            SELECT MGZN_USER_NO FROM TB_MGZN_USER  WHERE USER_ID=#{user_id} AND DEL_YN='N' LIMIT 1
                        )
                        , 'N'
                    )
                    RETURNING DLVY_ADRES_NO
                </when>
                <when test="dlvy_adres_no != '0'">
                    UPDATE TB_DLVY_ADRES
                    SET
                        ADRES_DETAIL =  #{adres_detail}, updt_dt =  CURRENT_TIMESTAMP
                    WHERE DLVY_ADRES_NO = #{dlvy_adres_no} 
                    RETURNING ( SELECT #{dlvy_adres_no} as DLVY_ADRES_NO )
                </when>
                <otherwise>
                     RETURNING ( SELECT #{dlvy_adres_no} as DLVY_ADRES_NO )
                </otherwise>
            </choose>
        )
        , TB_REQ_ADD AS
        (
            INSERT INTO TB_REQ
            (
                REQ_NO
                , REQ_STATUS_CD
                , REQ_USER_SE_CD
                , REQ_USER_ID
                , REQ_DT
                , BRAND_ID
                , DUTY_RECPT_DT
                , PHOTOGRF_DT
                , PHOTOGRF_PREARNGE_BEGIN_DT
                , PHOTOGRF_PREARNGE_END_DT
                , RETURN_PREARNGE_DT
                , PHOTOGRF_CNTENT
                , PHOTOGRF_MODL_SE_CD
                , MODEL_LIST
                , CELEB_LIST
                , PCHRG_PICALBM_YN
                , PAGE_CNT
                , ETC_BRAND_INFO
                , TODAY_CONNECT_HOPE_POSBL_YN
                , ADD_REQ_CNTENT
                , DLVY_ADRES_NO
                , DLVY_ATENT_MATTER
                , DEL_YN
                , CONTACT_USER_ID
                , PHOTOGRF_CONCEPT
                , LOC_YN
                , LOC_VALUE
                , OWN_PAID_PICTORIAL_YN
                , OWN_PAID_PICTORIAL_CONTENT
                , OTHER_PAID_PICTORIAL_YN
                , OTHER_PAID_PICTORIAL_CONTENT
            )
            VALUES
            (
                DEFAULT
                , 'RS0001'
                , 'RUS001'
                , #{user_id}
                , DEFAULT
                , #{brand_id}
                , TO_TIMESTAMP(#{duty_recpt_dt})
                , TO_TIMESTAMP(#{photogrf_dt})
                , TO_TIMESTAMP(#{photogrf_dt})+ #{begin_dt}*interval '1 hour'
                , TO_TIMESTAMP(#{photogrf_dt})+#{end_dt}*interval '1 hour'
                , TO_TIMESTAMP(#{return_prearnge_dt})
                , #{photogrf_cntent}
                , #{modl_se_cd}
                , ARRAY[<foreach collection="model_list" item="ID" separator=",">
                    #{ID}
                </foreach>]::TEXT[]
                , ARRAY[<foreach collection="celeb_list" item="ID" separator=",">
                    #{ID}
                </foreach>]::TEXT[]
                , #{picalbm_yn}
                , #{page_cnt}
                , #{etc_brand}
                , #{today_connect}
                , #{add_req_cntent}
                , (SELECT DLVY_ADRES_NO FROM TB_DLVY_ADRES_ADD)
                , #{dlvy_atent_matter}
                , DEFAULT
                , #{contact_user_id}
                , #{photogrf_concept}
                , #{loc_yn}
                , #{loc_value}
                , #{own_paid_pictorial_yn}
                , #{own_paid_pictorial_content}
                , #{other_paid_pictorial_yn}
                , #{other_paid_pictorial_content}
            )
            RETURNING REQ_NO
        )
        , TB_REQ_HIST_ADD AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_HIST_NO
                , REQ_NO
                , REQ_HIST_DT
                , MODIFI_AFT_REQ_STATUS_CD
                , DEL_YN
            )
            VALUES
            (
                DEFAULT
                , 
                (
                    SELECT REQ_NO FROM TB_REQ_ADD
                )
                , DEFAULT
                , 'RS0001'
                , DEFAULT
            )
            RETURNING REQ_HIST_NO
        )
        , TB_REQ_HIST_NOTIFI_ADD AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , RECV_CNFIRM_YN
                , DEL_YN
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT 
                'RHNS01'
                , 
                (
                    SELECT
                        CONCAT
                        (
                            '[요청] '
                            , B.MGZN_NM
                            , ' '
                            , A.USER_NM
                            , ' 에서 샘플 요청이 왔습니다.'
                        )
                    FROM 
                    (
                        SELECT
                            A.USER_NM
                            , A.MGZN_ID
                        FROM TB_MGZN_USER A
                        WHERE 1=1
                            AND A.USER_ID=#{user_id}
                            AND A.DEL_YN='N'
                    ) A
                    INNER JOIN TB_MGZN B
                    ON 1=1
                        AND B.MGZN_ID=A.MGZN_ID
                        AND B.DEL_YN='N'
                        
                )
                , 
                (
                    SELECT
                        CONCAT
                        (
                            B.MGZN_NM
                            , ' '
                            , A.USER_NM
                            ,' 에서 '
                            , (TO_TIMESTAMP(#{photogrf_dt}))::DATE
                            , ' 촬연 건 '
                            ,#{len},'건의 샘플 요청이 왔습니다.'
                        )
                    FROM 
                    (
                        SELECT
                            A.USER_NM
                            , A,MGZN_ID
                        FROM TB_MGZN_USER A
                        WHERE 1=1
                            AND A.USER_ID=#{user_id}
                            AND A.DEL_YN='N'

                    ) A
                    LEFT JOIN TB_MGZN B
                    ON 1=1
                        AND B.MGZN_ID=A.MGZN_ID
                        AND B.DEL_YN='N'
                )
                , (SELECT REQ_HIST_NO FROM TB_REQ_HIST_ADD)
                , #{user_id}
                , USER_ID
                , FALSE
                , 'N'
                , 'magazine'
                , 'req'
            FROM TB_BRAND_USER
            WHERE 1=1
                AND BRAND_ID=#{brand_id}
                AND REQ_NOTIFI_RECV_YN IS TRUE
                AND 
                (
                    NOT_DISTURB_MODE_YN IS FALSE 
                    OR 
                    (
                        CURRENT_TIMESTAMP BETWEEN 
                        NOT_DISTURB_BEGIN_DT
                        AND 
                        NOT_DISTURB_END_DT
                    )
                )
                AND DEL_YN='N'
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , TB_REQ_SHOWROOM_ADD AS
        (
            INSERT INTO TB_REQ_SHOWROOM
            (
                REQ_NO
                , SHOWROOM_NO
                , REQ_SHOWROOM_REG_DT
                , DEL_YN
            )
            VALUES
            <foreach collection="showroom_list" item="ID" separator=",">
                (
                    (SELECT REQ_NO FROM TB_REQ_ADD)
                    , #{ID}
                    , DEFAULT
                    , 'N'
                )
            </foreach>
        )
        , TB_NEW_REQ_SAMPLE_ADD AS
        (
            INSERT INTO TB_NEW_REQ_SAMPLE
            (
                REQ_NO
                , SAMPLE_NO
                , SHOWROOM_NO
                , pickup_userid
            )
            SELECT
                ( SELECT REQ_NO FROM TB_REQ_ADD)
                , B.SAMPLE_NO
                ,( SELECT SHOWROOM_NO FROM tb_showroom_sample  WHERE SAMPLE_NO = B.SAMPLE_NO LIMIT 1)
                , #{user_id}
            FROM
            (
                SELECT SHOWROOM_NO 
                FROM TB_SHOWROOM 
                WHERE DEL_YN='N' AND SHOWROOM_NO IN
                    (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                    
            ) A
            INNER JOIN TB_SHOWROOM_SAMPLE B ON A.SHOWROOM_NO=B.SHOWROOM_NO AND B.DEL_YN='N'
        )        
        SELECT
            B.TOKEN_VALUE
            , A.NOTIFI_SUBJ AS MESSAGE 
        FROM TB_REQ_HIST_NOTIFI_ADD A
        JOIN TB_FCM_PUSH_TOKEN B
        ON 1=1
            AND A.RECV_USER_ID = B.USER_ID
            AND B.USE_YN
    </insert>

    <!-- 
        사용자 정보를 보냅니다
        /magazine/my-info
    -->

    <select id="SELECT.INFO.001">
        /* SELECT.INFO.001 */
        SELECT
            A.USER_NM AS MGZN_USER_NM
            , A.MGZN_ID
            , A.MGZN_POS_CD AS USER_POSITION_ID
            , A.PHONE_NO
            , A.EMAIL_ADRES
            , A.ADRES
            , A.IMG_URL_ADRES
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || A.IMG_URL_ADRES AS IMG_FULL_PATH
            , A.TEAM_USER_ID AS TEAMMATE_ID
            , B.MGZN_NM
            , B.MGZN_NM AS COMPANY_NM
            , C.CD_NM AS USER_POSITION
            , D.USER_NM AS TEAMMATE_NM
            , EXISTS
            (
                SELECT 1
                FROM TB_REQ_HIST_NOTIFI
                WHERE 1=1
                    AND TB_REQ_HIST_NOTIFI.RECV_USER_ID=#{user_id}
                    AND DEL_YN='N'
                    AND RECV_CNFIRM_YN=false
            ) AS UNREAD_NOTIFICATIONS
            , E.SUBSCR_NO
            , E.SUBSCR_SE_CD AS SUBSCR_TYPE
            , 
            (
                SELECT CD_NM 
                FROM TB_COMM_CD 
                WHERE 1=1
                    AND TB_COMM_CD.CD_ID=E.SUBSCR_SE_CD
                    AND TB_COMM_CD.CD_TYP_ID='CT00000006'
                    AND DEL_YN='N'
                LIMIT 1
            ) AS SUBSCR_TYPE
            , E.SUBSCR_CHRGE_AMT
            , 
            (
                SELECT CD_NM 
                FROM TB_COMM_CD 
                WHERE 1=1
                    AND TB_COMM_CD.CD_ID=E.SUBSCR_STATUS_CD 
                    AND TB_COMM_CD.CD_TYP_ID='CT00000004'
                    AND DEL_YN='N'
                LIMIT 1
            ) AS SUBSCR_STATUS
            , E.SETTLE_COMPLET_YN AS PAYMENT_COMPLETE
            , E.CANC_YN AS SUBSCRIPTION_CANCELED
            , E.REFUND_COMPLET_YN
            , E.END_YN AS SUBSCRIPTION_ENDED
            , E.SUBSCR_NO IS NOT NULL AS SUBSCR_YN <!--구독된 상태인지-->
            , FLOOR(DATE_PARt('epoch'::TEXT, E.SUBSCR_BEGIN_DE))::BIGINT AS SUBSCR_BEGIN_DT <!--구독 시작일-->
            , FLOOR(DATE_PART('epoch'::TEXT, E.SUBSCR_END_DE))::BIGINT AS SUBSCR_END_DT <!--구독 만료일-->
            , A.REQ_NOTIFI_RECV_YN
            , A.NOTICE_NOTIFI_RECV_YN
            , FLOOR(DATE_PART('epoch'::TEXT, A.NOT_DISTURB_BEGIN_DT))::BIGINT AS NOT_DISTURB_BEGIN_DT
            , FLOOR(DATE_PART('epoch'::TEXT, A.NOT_DISTURB_END_DT))::BIGINT AS NOT_DISTURB_END_DT
            , A.NOT_DISTURB_MODE_YN
            , A.PRESS_NOTIFI_RECV_YN
            , A.SHOWROOM_NOTIFI_RECV_YN
            , A.REQ_CONFIRM_NOTIFI_YN
            , A.SAMPLE_NOT_RECV_NOTIFI_YN
            , A.SAMPLE_SEND_NOTIFI_YN
            , A.BRAND_NOTICE_NOTIFI_YN
        FROM 
        (
            SELECT
                A.USER_NM
                , A.USER_ID
                , A.MGZN_ID
                , A.MGZN_POS_CD
                , A.PHONE_NO
                , A.EMAIL_ADRES
                , A.ADRES
                , A.IMG_URL_ADRES
                , A.TEAM_USER_ID 
                , A.REQ_NOTIFI_RECV_YN
                , A.NOTICE_NOTIFI_RECV_YN
                , A.NOT_DISTURB_MODE_YN
                , A.NOT_DISTURB_BEGIN_DT
                , A.NOT_DISTURB_END_DT
                , A.PRESS_NOTIFI_RECV_YN
                , A.SHOWROOM_NOTIFI_RECV_YN
                , A.REQ_CONFIRM_NOTIFI_YN
                , A.SAMPLE_NOT_RECV_NOTIFI_YN
                , A.SAMPLE_SEND_NOTIFI_YN
                , A.BRAND_NOTICE_NOTIFI_YN
            FROM TB_MGZN_USER A
            WHERE 1=1
                AND A.USER_ID = #{user_id}
                AND A.DEL_YN='N'
        ) A
        INNER JOIN TB_MGZN B
        ON 1=1
            AND A.MGZN_ID=B.MGZN_ID
            AND B.DEL_YN='N'
        INNER JOIN TB_COMM_CD C
        ON 1=1
            AND A.MGZN_POS_CD=C.CD_ID
            AND C.CD_TYP_ID='CT00000002'
            AND C.DEL_YN='N'
        LEFT JOIN TB_MGZN_USER D
        ON 1=1
            AND A.TEAM_USER_ID=D.USER_ID
            AND D.DEL_YN='N'
        LEFT JOIN TB_SUBSCR E
        ON 1=1
            AND A.USER_ID=E.SUBSCR_MAN_ID
            AND E.DEL_YN='N'
    </select>

    <!-- 
        샘플요청목록을 출력합니다
        /magazine/showroom-request-list
    -->
    <select id="SELECT.REQUEST.LIST.001">
        /* SELECT.REQUEST.LIST.001 */
        SELECT 
            T2.EDITABLE
            , T2.REQ_NO
            , T2.BRAND_ID
            , T2.REQUEST_DATE
            , T2.REQ_DT
            , T2.EXPECTED_PHOTOGRAPH_DATE
            , T2.EXPECTED_RETURN_DATE
            , T2.REQ_STATUS_CODE
            , T2.BRAND_NM
            , T2.REQ_STATUS_NM
            , T2.TOTAL_COUNT
            , ROW_NUMBER () OVER() AS NO
        FROM
        (
            SELECT 
                T.EDITABLE
                , T.REQ_NO
                , T.BRAND_ID
                , T.REQUEST_DATE
                , T.REQ_DT
                , T.EXPECTED_PHOTOGRAPH_DATE
                , T.EXPECTED_RETURN_DATE
                , T.REQ_STATUS_CODE
                , T.BRAND_NM
                , T.REQ_STATUS_NM
                , COUNT(1) OVER() AS TOTAL_COUNT 
            FROM 
            (
                SELECT
                    CASE 
                        WHEN A.REQ_STATUS_CD='RS0001' AND A.PHOTOGRF_DT> (NOW() AT TIME ZONE 'Asia/Seoul') 
                            THEN true
                        ELSE false
                    END AS EDITABLE
                    , A.REQ_NO
                    , A.BRAND_ID
                    , FLOOR(DATE_PART('epoch'::TEXT, A.REQ_DT ))::BIGINT AS REQ_DT
                    , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS REQUEST_DATE
                    , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT AS EXPECTED_PHOTOGRAPH_DATE
                    , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS EXPECTED_RETURN_DATE
                    , A.REQ_STATUS_CD AS REQ_STATUS_CODE
                    , B.BRAND_NM
                    , CASE
                        WHEN C.CD_ID='RS0001'
                            THEN 'pending'
                        WHEN C.CD_ID='RS0003'
                            THEN 'confirmed'
                        WHEN C.CD_ID='RS0004'
                            THEN 'canceled'
                        WHEN C.CD_ID='RS0004'
                            THEN 'partially confirmed'
                        ELSE 'confirmed'
                    END AS REQ_STATUS_NM
                FROM 
                (
                    SELECT
                        A.REQ_NO
                        , A.BRAND_ID
                        , A.REQ_STATUS_CD
                        , A.PHOTOGRF_DT
                        , A.DUTY_RECPT_DT
                        , A.RETURN_PREARNGE_DT
                        , A.REQ_DT
                        , A.REQ_USER_ID
                    FROM TB_REQ A 
                    WHERE 1=1
                        AND A.REQ_USER_SE_CD='RUS001'
                        AND A.DEL_YN='N' 
                        <if test="brand_id">
                        AND A.BRAND_ID = #{brand_id}
                        </if>
                        <if test="shooting_date">
                        AND A.PHOTOGRF_PREARNGE_BEGIN_DT::DATE = TO_TIMESTAMP(#{shooting_date}::BIGINT)::DATE
                        </if>
                        <if test="request_date">
                        AND A.REQ_DT::DATE = TO_TIMESTAMP(#{request_date}::BIGINT)::DATE
                        </if>
                        <if test="request_status == 'PENDING'">
                        AND A.REQ_STATUS_CD = 'RS0001'
                        </if>
                        <if test="request_status == 'CONFIRMED'">
                        AND ( A.REQ_STATUS_CD = 'RS0002' OR A.REQ_STATUS_CD = 'RS0003' OR A.REQ_STATUS_CD = 'RS0005' OR A.REQ_STATUS_CD = 'RS0006' )
                        </if>
                        <if test="request_status == 'CANCELED'">
                        AND A.REQ_STATUS_CD = 'RS0004'
                        </if>
                ) A
                INNER JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
                INNER JOIN TB_COMM_CD C ON A.REQ_STATUS_CD=C.CD_ID AND C.CD_TYP_ID='CT00000011' AND C.DEL_YN='N'
                INNER JOIN TB_MGZN_USER E ON A.REQ_USER_ID=E.USER_ID AND E.DEL_YN='N'
                INNER JOIN TB_MGZN_USER F ON E.MGZN_ID=F.MGZN_ID AND F.USER_ID=#{user_id} AND F.DEL_YN='N'
                WHERE 1=1
                ORDER BY A.REQ_DT DESC
            ) T
            <if test="order_photogrf_dt==true">
                ORDER BY T.EXPECTED_PHOTOGRAPH_DATE
            </if>
            <if test="order_req_dt==true">
                ORDER BY T.REQ_DT
            </if>
            <if test="desc==true">
                DESC
            </if>
        ) T2
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!-- 
        스케줄을 출력합니다 (날짜 분류)
        /magazine/my-schedule-date
    -->
    <select id="SELECT.SCHEDULE.DATE.001">
        WITH PROTO_RESULT AS (
            SELECT
                A.REQ_NO
                , A.BRAND_ID
                <!-- , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS RECEIVE_DATE
                , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS EXPECTED_RETURN_DATE -->
                , A.PHOTOGRF_CNTENT
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.PCHRG_PICALBM_YN
                , A.OWN_PAID_PICTORIAL_YN
                , A.OWN_PAID_PICTORIAL_CONTENT
                , A.OTHER_PAID_PICTORIAL_YN
                , A.OTHER_PAID_PICTORIAL_CONTENT
                , A.LOC_YN
                , A.PCHRG_PICALBM_CNTENT
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.DLVY_ADRES_NO
                , B.USER_NM AS CONTACT_USER_NM
                , B.PHONE_NO AS CONTACT_PHONE_NO
                , C.BRAND_NM
                , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1) || '/'  || C.BRAND_LOGO_URL_ADRES
                 AS BRAND_LOGO_URL_ADRES
                , D.CD_NM AS MODEL_TYPE
                , E.DLVY_ADRES_NM
                , E.ADRES_DETAIL
                , E.POST_NO
                , ARRAY_AGG(CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/',J.IMG_URL_ADRES)) AS IMG_URL_ADRES_ARRAY
                <!-- , GENERATE_SERIES(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT, FLOOR(DATE_PART('EPOCH'::TEXT, A.photogrf_dt ))::BIGINT,86400) AS DATE -->
                , FLOOR(DATE_PART('EPOCH'::TEXT, A.photogrf_dt))::BIGINT AS DATE
                , F.USER_NM AS SEND_USER_NAME
                , F.USER_NM AS REQ_USER_NM
            FROM 
            (
                SELECT
                    A.REQ_NO
                    , A.BRAND_ID
                    <!-- , A.DUTY_RECPT_DT
                    , A.RETURN_PREARNGE_DT -->
                    , A.photogrf_dt
                    , A.PHOTOGRF_CNTENT
                    , A.MODEL_LIST
                    , A.CELEB_LIST
                    , A.PCHRG_PICALBM_YN
                    , A.OWN_PAID_PICTORIAL_YN
                    , A.OWN_PAID_PICTORIAL_CONTENT
                    , A.OTHER_PAID_PICTORIAL_YN
                    , A.OTHER_PAID_PICTORIAL_CONTENT
                    , A.LOC_YN
                    , A.PCHRG_PICALBM_CNTENT
                    , A.PAGE_CNT
                    , A.ETC_BRAND_INFO
                    , A.DLVY_ADRES_NO
                    , A.CONTACT_USER_ID
                    , A.PHOTOGRF_MODL_SE_CD
                    , A.REQ_USER_ID
                FROM TB_REQ A
                WHERE 1=1
                    AND A.photogrf_dt::DATE >= TO_TIMESTAMP(#{min_date}::BIGINT)::DATE
                    AND TO_TIMESTAMP(#{max_date}::BIGINT) >= A.photogrf_dt
                    <!-- AND ( 
                        A.DUTY_RECPT_DT::DATE >= TO_TIMESTAMP(#{min_date}::BIGINT)::DATE
                        OR 
                        A.photogrf_dt::DATE >= TO_TIMESTAMP(#{min_date}::BIGINT)::DATE
                    )
                    AND (
                        TO_TIMESTAMP(#{max_date}::BIGINT) >= A.RETURN_PREARNGE_DT
                        OR
                        TO_TIMESTAMP(#{max_date}::BIGINT) >= A.photogrf_dt
                    ) -->
                    AND A.REQ_USER_SE_CD='RUS001'
                    AND A.DEL_YN='N'
            ) A 
            INNER JOIN TB_BRAND C ON A.BRAND_ID=C.BRAND_ID AND C.DEL_YN='N'
            INNER JOIN TB_COMM_CD D ON A.PHOTOGRF_MODL_SE_CD=D.CD_ID AND D.CD_TYP_ID='CT00000001' AND D.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES E ON A.DLVY_ADRES_NO=E.DLVY_ADRES_NO AND E.DEL_YN='N'
            INNER JOIN TB_MGZN_USER F ON A.REQ_USER_ID=F.USER_ID AND F.DEL_YN='N'
            INNER JOIN TB_MGZN_USER G ON F.MGZN_ID=G.MGZN_ID AND G.USER_ID=#{user_id} AND G.DEL_YN='N'
            INNER JOIN TB_REQ_SHOWROOM H ON A.REQ_NO=H.REQ_NO AND H.DEL_YN='N'
            INNER JOIN TB_SHOWROOM_SAMPLE I ON H.SHOWROOM_NO=I.SHOWROOM_NO AND I.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG J ON I.SAMPLE_NO=J.SAMPLE_NO AND J.MAIN_YN=true AND J.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER B ON A.CONTACT_USER_ID=B.USER_ID AND B.DEL_YN='N'
            GROUP BY
            	A.REQ_NO
            	, A.BRAND_ID
            	<!---, A.DUTY_RECPT_DT
                , A.RETURN_PREARNGE_DT-->
                , A.photogrf_dt
            	, A.PHOTOGRF_CNTENT
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.PCHRG_PICALBM_YN
                , A.OWN_PAID_PICTORIAL_YN
                , A.OWN_PAID_PICTORIAL_CONTENT
                , A.OTHER_PAID_PICTORIAL_YN
                , A.OTHER_PAID_PICTORIAL_CONTENT
                , A.LOC_YN
                , A.PCHRG_PICALBM_CNTENT
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.DLVY_ADRES_NO
                , B.USER_NM
                , B.PHONE_NO
                , C.BRAND_NM
                , C.BRAND_LOGO_URL_ADRES
                , D.CD_NM
                , E.DLVY_ADRES_NM
                , E.ADRES_DETAIL
                , E.POST_NO
                , F.USER_NM
            ORDER BY BRAND_NM
        )
        SELECT 
            DATE
            , JSON_AGG(ROW_TO_JSON(PROTO_RESULT)) AS INDIVIDUAL_SCHEDULES 
        FROM PROTO_RESULT
        WHERE 1=1
            AND DATE BETWEEN #{min_date} AND #{max_date}
        GROUP BY DATE
    </select>

    <select id="SELECT.SCHEDULE.DATE.001.ORIN">
        /* SELECT.SCHEDULE.DATE.001 */
        WITH PROTO_RESULT AS (
            SELECT
                A.REQ_NO
                , A.BRAND_ID
                , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS RECEIVE_DATE
                , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS EXPECTED_RETURN_DATE
                , A.PHOTOGRF_CNTENT
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.PCHRG_PICALBM_YN
                , A.OWN_PAID_PICTORIAL_YN
                , A.OWN_PAID_PICTORIAL_CONTENT
                , A.OTHER_PAID_PICTORIAL_YN
                , A.OTHER_PAID_PICTORIAL_CONTENT
                , A.LOC_YN
                , A.PCHRG_PICALBM_CNTENT
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.DLVY_ADRES_NO
                , B.USER_NM AS CONTACT_USER_NM
                , B.PHONE_NO AS CONTACT_PHONE_NO
                , C.BRAND_NM
                , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1)
                    || '/' 
                    || C.BRAND_LOGO_URL_ADRES
                 AS BRAND_LOGO_URL_ADRES
                , D.CD_NM AS MODEL_TYPE
                , E.DLVY_ADRES_NM
                , E.ADRES_DETAIL
                , E.POST_NO
                , ARRAY_AGG(
                    CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/',J.IMG_URL_ADRES)
                ) AS IMG_URL_ADRES_ARRAY
                , GENERATE_SERIES(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT
                , FLOOR(DATE_PART('EPOCH'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT,86400) AS DATE
                , F.USER_NM AS SEND_USER_NAME
                , F.USER_NM AS REQ_USER_NM
            FROM 
            (
                SELECT
                    A.REQ_NO
                    , A.BRAND_ID
                    , A.DUTY_RECPT_DT
                    , A.RETURN_PREARNGE_DT
                    , A.PHOTOGRF_CNTENT
                    , A.MODEL_LIST
                    , A.CELEB_LIST
                    , A.PCHRG_PICALBM_YN
                    , A.OWN_PAID_PICTORIAL_YN
                    , A.OWN_PAID_PICTORIAL_CONTENT
                    , A.OTHER_PAID_PICTORIAL_YN
                    , A.OTHER_PAID_PICTORIAL_CONTENT
                    , A.LOC_YN
                    , A.PCHRG_PICALBM_CNTENT
                    , A.PAGE_CNT
                    , A.ETC_BRAND_INFO
                    , A.DLVY_ADRES_NO
                    , A.CONTACT_USER_ID
                    , A.PHOTOGRF_MODL_SE_CD
                    , A.REQ_USER_ID
                FROM TB_REQ A
                WHERE 1=1
                    AND A.DUTY_RECPT_DT::DATE >= TO_TIMESTAMP(#{min_date}::BIGINT)::DATE
                    AND TO_TIMESTAMP(#{max_date}::BIGINT) >= A.RETURN_PREARNGE_DT
                    AND A.REQ_USER_SE_CD='RUS001'
                    AND A.DEL_YN='N'
            ) A 
            INNER JOIN TB_BRAND C
            ON 1=1
                AND A.BRAND_ID=C.BRAND_ID
                AND C.DEL_YN='N'
            INNER JOIN TB_COMM_CD D
            ON 1=1
                AND A.PHOTOGRF_MODL_SE_CD=D.CD_ID
                AND D.CD_TYP_ID='CT00000001'
                AND D.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES E
            ON 1=1
                AND A.DLVY_ADRES_NO=E.DLVY_ADRES_NO
                AND E.DEL_YN='N'
            INNER JOIN TB_MGZN_USER F
            ON 1=1
                AND A.REQ_USER_ID=F.USER_ID
                AND F.DEL_YN='N'
            INNER JOIN TB_MGZN_USER G
            ON 1=1
                AND F.MGZN_ID=G.MGZN_ID
                AND G.USER_ID=#{user_id}
                AND G.DEL_YN='N'
            INNER JOIN TB_REQ_SHOWROOM H
            ON 1=1
                AND A.REQ_NO=H.REQ_NO
                AND H.DEL_YN='N'
            INNER JOIN TB_SHOWROOM_SAMPLE I
            ON 1=1
                AND H.SHOWROOM_NO=I.SHOWROOM_NO
                AND I.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG J
            ON 1=1
                AND I.SAMPLE_NO=J.SAMPLE_NO
                AND J.MAIN_YN=true
                AND J.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER B
            ON 1=1
                AND A.CONTACT_USER_ID=B.USER_ID
                AND B.DEL_YN='N'
            GROUP BY
            	A.REQ_NO
            	, A.BRAND_ID
            	, A.DUTY_RECPT_DT
            	, A.RETURN_PREARNGE_DT
            	, A.PHOTOGRF_CNTENT
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.PCHRG_PICALBM_YN
                , A.OWN_PAID_PICTORIAL_YN
                , A.OWN_PAID_PICTORIAL_CONTENT
                , A.OTHER_PAID_PICTORIAL_YN
                , A.OTHER_PAID_PICTORIAL_CONTENT
                , A.LOC_YN
                , A.PCHRG_PICALBM_CNTENT
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.DLVY_ADRES_NO
                , B.USER_NM
                , B.PHONE_NO
                , C.BRAND_NM
                , C.BRAND_LOGO_URL_ADRES
                , D.CD_NM
                , E.DLVY_ADRES_NM
                , E.ADRES_DETAIL
                , E.POST_NO
                , F.USER_NM
            ORDER BY BRAND_NM
        )
        SELECT 
            DATE
            , JSON_AGG(ROW_TO_JSON(PROTO_RESULT)) AS INDIVIDUAL_SCHEDULES 
        FROM PROTO_RESULT
        WHERE 1=1
            AND DATE BETWEEN #{min_date} AND #{max_date}
        GROUP BY DATE
    </select>
    <!-- 
        스케줄을 출력합니다 (브랜드 분류)
        /magazine/my-schedule-brand
    -->
    <select id="SELECT.SCHEDULE.BRAND.001">
        WITH PROTO_RESULT AS (
            SELECT
                A.REQ_NO
                , A.BRAND_ID
                , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS RECEIVE_DATE
                , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS EXPECTED_RETURN_DATE
                , A.PHOTOGRF_CNTENT
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.PCHRG_PICALBM_YN
                , A.OWN_PAID_PICTORIAL_YN
                , A.OWN_PAID_PICTORIAL_CONTENT
                , A.OTHER_PAID_PICTORIAL_YN
                , A.OTHER_PAID_PICTORIAL_CONTENT
                , A.LOC_YN
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.DLVY_ADRES_NO
                , B.USER_NM AS CONTACT_USER_NM
                , B.PHONE_NO AS CONTACT_PHONE_NO
                , C.BRAND_NM
                , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', C.BRAND_LOGO_URL_ADRES) AS BRAND_LOGO_URL_ADRES
                , D.CD_NM AS MODEL_TYPE
                , E.DLVY_ADRES_NM
                , E.ADRES_DETAIL
                , E.POST_NO
                , ARRAY_AGG(CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/',I.IMG_URL_ADRES)) AS IMG_URL_ADRES_ARRAY
                , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS DATE
                , F.USER_NM AS SEND_USER_NAME
                , F.USER_NM AS REQ_USER_NM
            FROM 
            (
                SELECT
                	A.REQ_NO
                	, A.BRAND_ID
                	, A.DUTY_RECPT_DT
                	, A.RETURN_PREARNGE_DT
                	, A.PHOTOGRF_CNTENT
	                , A.MODEL_LIST
	                , A.CELEB_LIST
	                , A.PCHRG_PICALBM_YN
	                , A.OWN_PAID_PICTORIAL_YN
	                , A.OWN_PAID_PICTORIAL_CONTENT
	                , A.OTHER_PAID_PICTORIAL_YN
	                , A.OTHER_PAID_PICTORIAL_CONTENT
	                , A.LOC_YN
	                , A.PAGE_CNT
	                , A.ETC_BRAND_INFO
	                , A.DLVY_ADRES_NO
	                , A.CONTACT_USER_ID
	                , A.PHOTOGRF_MODL_SE_CD
	                , A.REQ_USER_ID
                FROM TB_REQ A
                WHERE 1=1
                AND A.REQ_USER_SE_CD='RUS001'
                AND A.DEL_YN='N'
                AND ( 
                    A.DUTY_RECPT_DT::DATE >= TO_TIMESTAMP(#{min_date}::BIGINT)::DATE
                    OR 
                    A.photogrf_dt::DATE >= TO_TIMESTAMP(#{min_date}::BIGINT)::DATE
                )
                AND (
                    TO_TIMESTAMP(#{max_date}::BIGINT) >= A.RETURN_PREARNGE_DT
                    OR
                    TO_TIMESTAMP(#{max_date}::BIGINT) >= A.photogrf_dt
                )
            ) A
            INNER JOIN TB_MGZN_USER F ON A.REQ_USER_ID=F.USER_ID AND F.DEL_YN='N'
            INNER JOIN TB_MGZN_USER J ON J.USER_ID=#{user_id} AND F.MGZN_ID=J.MGZN_ID AND J.DEL_YN='N'
			INNER JOIN TB_REQ_SHOWROOM G ON A.REQ_NO=G.REQ_NO AND G.DEL_YN='N'
        	INNER JOIN TB_SHOWROOM_SAMPLE H ON G.SHOWROOM_NO=H.SHOWROOM_NO AND H.DEL_YN='N'
    		INNER JOIN TB_SAMPLE_IMG I ON H.SAMPLE_NO=I.SAMPLE_NO AND I.MAIN_YN=TRUE AND I.DEL_YN='N'
            INNER JOIN TB_MGZN_USER B ON A.CONTACT_USER_ID=B.USER_ID AND B.DEL_YN='N'
            INNER JOIN TB_BRAND C ON A.BRAND_ID=C.BRAND_ID AND C.DEL_YN='N'
            INNER JOIN TB_COMM_CD D ON A.PHOTOGRF_MODL_SE_CD=D.CD_ID AND D.CD_TYP_ID='CT00000001' AND D.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES E ON A.DLVY_ADRES_NO=E.DLVY_ADRES_NO AND E.DEL_YN='N'
			GROUP BY
				A.REQ_NO
                , A.BRAND_ID
                , A.DUTY_RECPT_DT
                , A.RETURN_PREARNGE_DT
                , A.PHOTOGRF_CNTENT
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.PCHRG_PICALBM_YN
                , A.OWN_PAID_PICTORIAL_YN
                , A.OWN_PAID_PICTORIAL_CONTENT
                , A.OTHER_PAID_PICTORIAL_YN
                , A.OTHER_PAID_PICTORIAL_CONTENT
                , A.LOC_YN
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.DLVY_ADRES_NO
                , B.USER_NM
                , B.PHONE_NO
                , C.BRAND_NM
                , C.BRAND_LOGO_URL_ADRES
                , D.CD_NM
                , E.DLVY_ADRES_NM
                , E.ADRES_DETAIL
                , E.POST_NO
                , F.USER_NM
            ORDER BY DATE DESC
        )
        SELECT 
            BRAND_NM,BRAND_ID
            , JSON_AGG(ROW_TO_JSON(PROTO_RESULT)) AS INDIVIDUAL_SCHEDULES 
        FROM PROTO_RESULT
        GROUP BY BRAND_NM,BRAND_ID
    </select>

    <select id="SELECT.SCHEDULE.BRAND.001.ORIGIN">
        /* SELECT.SCHEDULE.BRAND.001 */
        WITH PROTO_RESULT AS (
            SELECT
                A.REQ_NO
                , A.BRAND_ID
                , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS RECEIVE_DATE
                , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS EXPECTED_RETURN_DATE
                , A.PHOTOGRF_CNTENT
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.PCHRG_PICALBM_YN
                , A.OWN_PAID_PICTORIAL_YN
                , A.OWN_PAID_PICTORIAL_CONTENT
                , A.OTHER_PAID_PICTORIAL_YN
                , A.OTHER_PAID_PICTORIAL_CONTENT
                , A.LOC_YN
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.DLVY_ADRES_NO
                , B.USER_NM AS CONTACT_USER_NM
                , B.PHONE_NO AS CONTACT_PHONE_NO
                , C.BRAND_NM
                , CONCAT
                    (
                        (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                        , C.BRAND_LOGO_URL_ADRES
                    ) AS BRAND_LOGO_URL_ADRES
                , D.CD_NM AS MODEL_TYPE
                , E.DLVY_ADRES_NM
                , E.ADRES_DETAIL
                , E.POST_NO
                , ARRAY_AGG(
                    CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/',I.IMG_URL_ADRES)
                ) AS IMG_URL_ADRES_ARRAY
                , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS DATE
                , F.USER_NM AS SEND_USER_NAME
                , F.USER_NM AS REQ_USER_NM
            FROM 
            (
                SELECT
                	A.REQ_NO
                	, A.BRAND_ID
                	, A.DUTY_RECPT_DT
                	, A.RETURN_PREARNGE_DT
                	, A.PHOTOGRF_CNTENT
	                , A.MODEL_LIST
	                , A.CELEB_LIST
	                , A.PCHRG_PICALBM_YN
	                , A.OWN_PAID_PICTORIAL_YN
	                , A.OWN_PAID_PICTORIAL_CONTENT
	                , A.OTHER_PAID_PICTORIAL_YN
	                , A.OTHER_PAID_PICTORIAL_CONTENT
	                , A.LOC_YN
	                , A.PAGE_CNT
	                , A.ETC_BRAND_INFO
	                , A.DLVY_ADRES_NO
	                , A.CONTACT_USER_ID
	                , A.PHOTOGRF_MODL_SE_CD
	                , A.REQ_USER_ID
                FROM TB_REQ A
                WHERE 1=1
                AND A.REQ_USER_SE_CD='RUS001'
                AND A.DEL_YN='N'
                AND A.DUTY_RECPT_DT::DATE >= TO_TIMESTAMP(#{min_date}::BIGINT)::DATE
                AND TO_TIMESTAMP(#{max_date}::BIGINT) >= A.RETURN_PREARNGE_DT
            ) A
            INNER JOIN TB_MGZN_USER F
            ON 1=1
                AND A.REQ_USER_ID=F.USER_ID
                AND F.DEL_YN='N'
            INNER JOIN TB_MGZN_USER J
			ON 1=1
				AND J.USER_ID=#{user_id}
				AND F.MGZN_ID=J.MGZN_ID
				AND J.DEL_YN='N'
			INNER JOIN TB_REQ_SHOWROOM G
            ON 1=1
            	AND A.REQ_NO=G.REQ_NO
            	AND G.DEL_YN='N'
        	INNER JOIN TB_SHOWROOM_SAMPLE H
        	ON 1=1
        		AND G.SHOWROOM_NO=H.SHOWROOM_NO
        		AND H.DEL_YN='N'
    		INNER JOIN TB_SAMPLE_IMG I
    		ON 1=1
    			AND H.SAMPLE_NO=I.SAMPLE_NO
    			AND I.MAIN_YN=TRUE
    			AND I.DEL_YN='N'
            INNER JOIN TB_MGZN_USER B
            ON 1=1
                AND A.CONTACT_USER_ID=B.USER_ID
                AND B.DEL_YN='N'
            INNER JOIN TB_BRAND C
            ON 1=1
                AND A.BRAND_ID=C.BRAND_ID
                AND C.DEL_YN='N'
            INNER JOIN TB_COMM_CD D
            ON 1=1
                AND A.PHOTOGRF_MODL_SE_CD=D.CD_ID
                AND D.CD_TYP_ID='CT00000001'
                AND D.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES E
            ON 1=1
                AND A.DLVY_ADRES_NO=E.DLVY_ADRES_NO
                AND E.DEL_YN='N'
			GROUP BY
				A.REQ_NO
                , A.BRAND_ID
                , A.DUTY_RECPT_DT
                , A.RETURN_PREARNGE_DT
                , A.PHOTOGRF_CNTENT
                , A.MODEL_LIST
                , A.CELEB_LIST
                , A.PCHRG_PICALBM_YN
                , A.OWN_PAID_PICTORIAL_YN
                , A.OWN_PAID_PICTORIAL_CONTENT
                , A.OTHER_PAID_PICTORIAL_YN
                , A.OTHER_PAID_PICTORIAL_CONTENT
                , A.LOC_YN
                , A.PAGE_CNT
                , A.ETC_BRAND_INFO
                , A.DLVY_ADRES_NO
                , B.USER_NM
                , B.PHONE_NO
                , C.BRAND_NM
                , C.BRAND_LOGO_URL_ADRES
                , D.CD_NM
                , E.DLVY_ADRES_NM
                , E.ADRES_DETAIL
                , E.POST_NO
                , F.USER_NM
            ORDER BY DATE DESC
        )
        SELECT 
            BRAND_NM,BRAND_ID
            , JSON_AGG(ROW_TO_JSON(PROTO_RESULT)) AS INDIVIDUAL_SCHEDULES 
        FROM PROTO_RESULT
        GROUP BY BRAND_NM,BRAND_ID
    </select>

    <!-- 
        보도자료 목록 조회
        /magazine/press
    -->
    <select id="SELECT.PRESS.001">
        /* SELECT.PRESS.001 */
        WITH CUR_MONTH AS (
            SELECT
                CASE 
                    WHEN #{req_month} IS NULL
                    THEN (
                        SELECT
                            M.MONTH
                        FROM TB_BRAND_PRESS M
                        ORDER BY M.YEAR DESC,M.MONTH DESC
                        LIMIT 1
                    )
                    ELSE #{req_month}
                END AS MONTH
            LIMIT 1
        )
        , CUR_YEAR AS (
            SELECT
                CASE
                    WHEN #{req_year} IS NULL
                    THEN (
                        SELECT
                            N.YEAR
                        FROM TB_BRAND_PRESS N
                        ORDER BY N.YEAR DESC
                        LIMIT 1
                    )
                    ELSE #{req_year}
                END AS YEAR
            LIMIT 1
        )
        SELECT
            T.BRAND_PRESS_NO
            , T.TITLE
            , T.IMG_URL_ADRES
            , T.WORD_FILE_FULL_ADRES
            , T.IMG_PATH
            , T.DIBS_YN
            , COUNT(1) OVER() AS TOTAL_COUNT 
        FROM
        (
            SELECT
                A.BRAND_PRESS_NO
                , A.PRESS_SUBJ AS TITLE
                , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', A.MAIN_IMG_ADRES) AS IMG_URL_ADRES
                , A.MAIN_IMG_ADRES AS IMG_PATH
                , CASE WHEN B.DIBS_YN=true THEN B.DIBS_YN ELSE false END AS DIBS_YN
                , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || A.WORD_FILE_ADRES AS WORD_FILE_FULL_ADRES
            FROM 
                TB_BRAND_PRESS A  LEFT JOIN TB_BRAND_PRESS_DIBS B ON B.USER_ID=#{user_id} AND A.BRAND_PRESS_NO=B.BRAND_PRESS_NO AND B.DEL_YN='N'
            WHERE 1=1
                AND A.MONTH IN (SELECT MONTH FROM CUR_MONTH)
                AND A.YEAR IN (SELECT YEAR FROM CUR_YEAR)
                AND A.DEL_YN='N' AND A.SHOW_YN='Y'
                <if test="brand_id && brand_id != 'all' ">
                AND A.BRAND_ID=#{brand_id}
                </if>
            ORDER BY A.INPUT_DT DESC
        ) T
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <select id="SELECT.PRESS.001.origin">
        /* SELECT.PRESS.001 */
        WITH CUR_MONTH AS (
            SELECT
                CASE 
                    WHEN #{req_month} IS NULL
                    THEN (
                        SELECT
                            M.MONTH
                        FROM TB_BRAND_PRESS M
                        ORDER BY M.YEAR DESC,M.MONTH DESC
                        LIMIT 1
                    )
                    ELSE #{req_month}
                END AS MONTH
            LIMIT 1
        )
        , CUR_YEAR AS (
            SELECT
                CASE
                    WHEN #{req_year} IS NULL
                    THEN (
                        SELECT
                            N.YEAR
                        FROM TB_BRAND_PRESS N
                        ORDER BY N.YEAR DESC
                        LIMIT 1
                    )
                    ELSE #{req_year}
                END AS YEAR
            LIMIT 1
        )
        SELECT
            T.BRAND_PRESS_NO
            , T.TITLE
            , T.IMG_URL_ADRES
            , T.IMG_PATH
            , T.DIBS_YN
            , T.WORD_FILE_FULL_ADRES
            , COUNT(1) OVER() AS TOTAL_COUNT 
        FROM
        (
            SELECT
                A.BRAND_PRESS_NO
                , A.PRESS_SUBJ AS TITLE
                , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', A.MAIN_IMG_ADRES) AS IMG_URL_ADRES
                , A.MAIN_IMG_ADRES AS IMG_PATH
                , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || A.WORD_FILE_ADRES AS WORD_FILE_FULL_ADRES
                , CASE WHEN B.DIBS_YN=true THEN B.DIBS_YN ELSE false END AS DIBS_YN
            FROM TB_BRAND_PRESS A
            LEFT JOIN TB_BRAND_PRESS_DIBS B
            ON 1=1
                AND B.USER_ID=#{user_id}
                AND A.BRAND_PRESS_NO=B.BRAND_PRESS_NO
                AND B.DEL_YN='N'
            WHERE 1=1
                AND A.MONTH IN (SELECT MONTH FROM CUR_MONTH)
                AND A.YEAR IN (SELECT YEAR FROM CUR_YEAR)
                AND A.DEL_YN='N'
                <if test="brand_id">
                AND A.BRAND_ID=#{brand_id}
                </if>
            ORDER BY A.INPUT_DT DESC
        ) T
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!-- 
        쇼룸의 시즌목록 조회
        /magazine/showroom-list GET
    -->
    <select id="SELECT.SHOWROOM.LIST.001">
        SELECT 
            A.SEASON_YEAR
            , A.SEASON_CD_ID
            , SEASON.CD_NM AS SEASON_TEXT
            , SEASON.CD_SIMPLE_NM AS SEASON_SIMPLE_TEXT
        FROM 
        (
            SELECT 
                DISTINCT A.SEASON_YEAR, A.SEASON_SE_CD AS SEASON_CD_ID
            FROM 
                TB_SHOWROOM A
            WHERE 
                A.DEL_YN = 'N' AND A.SHOW_YN = 'Y'
                AND CASE WHEN #{brand_id} IS NULL THEN 1=1 ELSE A.BRAND_ID = #{brand_id} END
        ) A 
        INNER JOIN TB_COMM_CD SEASON ON A.SEASON_CD_ID = SEASON.CD_ID AND SEASON.CD_TYP_ID = 'CT00000008'
            AND ( SEASON.BRAND_ID = '' OR  SEASON.BRAND_ID = #{brand_id})
            AND SEASON.DEL_YN = 'N'
        ORDER BY A.SEASON_YEAR DESC, SEASON.ORDER_VALUE DESC 
    </select>

    <!-- 
        쇼룸 목록 조회
        /magazine/showroom-list GET
    -->
    <select id="SELECT.SHOWROOM.LIST">
        SELECT
            T.SHOWROOM_NO
            , T.SHOWROOM_NM
            , CONCAT
            (( SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO ), '/', T.IMG_URL_ADRES) AS IMAGE_URL
            , (CURRENT_TIMESTAMP - T.SHOWROOM_REG_DT) &lt; INTERVAL '1 month' AS IS_NEW
            , T.mfrc_sample_yn
            , T.REQ_COUNT
            , T.IS_FAV
            , TB.BRAND_NM
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1) || '/' || TB.BRAND_LOGO_URL_ADRES AS BRAND_LOGO_URL_ADRES
            , T.TOTAL_COUNT
            , TRUE = ALL(
                SELECT WRHOUSNG_YN 
                FROM TB_SAMPLE SAMPLE
                WHERE SAMPLE.DEL_YN = 'N' AND SAMPLE.SAMPLE_NO IN (
                    SELECT SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.DEL_YN = 'N' AND SS.SHOWROOM_NO = T.SHOWROOM_NO
                )
            ) AS ALL_IN_YN
            , (
                SELECT ARRAY_AGG(SAMPLE_CATGRY_MIDDLE_CL_NM)
                FROM TB_SAMPLE_CATGRY_MIDDL_CL CAT 
                WHERE CAT.DEL_YN = 'N' AND CAT.SAMPLE_CATGRY_MIDDLE_CL_CD IN 
                    (
                        SELECT SAMPLE_CATGRY_MIDDLE_CL_CD 
                        FROM TB_SAMPLE SAMPLE 
                        WHERE SAMPLE.DEL_YN = 'N' AND SAMPLE.SAMPLE_NO IN ( SELECT SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.DEL_YN = 'N' AND SS.SHOWROOM_NO = T.SHOWROOM_NO )
                    )
            ) AS CATEGORY_LIST
            ,(CASE WHEN (TRS.req_status_cd = 'RS0003' or TRS.req_status_cd = 'RS0005' ) THEN '대여중' ELSE '신청가능' END ) AS now_req_status_nm
            ,TRS.return_prearnge_dt,TRS.duty_recpt_dt
        FROM 
        (
            SELECT 
                A.BRAND_ID
                ,A.SHOWROOM_NO
                , A.SHOWROOM_NM
                , A.SHOWROOM_REG_DT
                , A.mfrc_sample_yn
                , A.TOTAL_COUNT
                , COALESCE(C.DIBS_YN, FALSE) AS IS_FAV
                , COUNT(B.*) AS REQ_COUNT 
                , E.IMG_URL_ADRES
            FROM
            (
                SELECT 
                    A.BRAND_ID,A.mfrc_sample_yn,A.SHOWROOM_NO , A.SHOWROOM_NM, A.SHOWROOM_REG_DT, COUNT(1) OVER() AS TOTAL_COUNT
                FROM TB_SHOWROOM A 
                WHERE 1=1  
                    <if test="brand_id && brand_id != 'all' ">
                    AND A.BRAND_ID = #{brand_id}
                    </if>
                    <if test="season_year">
                    AND A.SEASON_YEAR = #{season_year}
                    AND A.SEASON_SE_CD = #{season_cd_id}
                    </if>
                    AND A.DEL_YN = 'N' AND A.SHOW_YN = 'Y'
                    <if test="lookbook_no">
                    AND EXISTS 
                    (
                        SELECT 1 FROM TB_LOOKBOOK_SHOWROOM B WHERE B.DEL_YN = 'N' AND B.LOOKBOOK_NO = #{lookbook_no} AND A.SHOWROOM_NO = B.SHOWROOM_NO
                    )
                    </if>
                    <if test="share_uuid">
                    AND EXISTS 
                    (
                        SELECT 1 
                        FROM TB_LOOKBOOK_SHOWROOM B
                        WHERE 1=1
                            AND B.DEL_YN = 'N'
                            AND LOOKBOOK_NO = ( SELECT LOOKBOOK_NO FROM TB_LOOKBOOK WHERE SHARE_UUID = #{share_uuid} )
                            AND A.SHOWROOM_NO = B.SHOWROOM_NO
                    )
                    </if>
                    AND EXISTS 
                    (
                        SELECT 1
                        FROM TB_SAMPLE SAM
                        WHERE 1=1
                            AND SAM.SAMPLE_NO IN (
                                SELECT SS.SAMPLE_NO FROM TB_SHOWROOM_SAMPLE SS WHERE SS.SHOWROOM_NO = A.SHOWROOM_NO AND SS.DEL_YN = 'N'
                            )
                            AND SAM.DEL_YN = 'N'
                            <if test="gender">
                            AND SAM.SAMPLE_SEX_SE_CD IN ${gender}
                            </if>
                            <if test="category">
                            AND SAM.SAMPLE_CATGRY_MIDDLE_CL_CD IN ${category}
                            </if>
                            <if test="filtercolor">
                            AND exists (
                                SELECT * FROM UNNEST(SAM.COLOR_LIST) 
                                WHERE UNNEST = ANY(
                                    ARRAY[<foreach collection="filtercolor" item="ID" separator=",">
                                        #{ID}
                                    </foreach>]
                                )
                            )
                            </if>
                            <if test="material">
                            AND SAM.MTRQLT_SE_CD IN ${material}
                            </if>
                            <if test="size">
                            AND 
                            (
                            SAM.SIZE_CD IN ${size}
                            OR SAM.SIZE_DIRECT_INPUT IN ${size}
                            )
                            </if>
                            <if test="wrhousng_yn != null">
                            AND SAM.WRHOUSNG_YN = #{wrhousng_yn}
                            </if>
                            <if test="still_life_img_yn != null">
                            AND SAM.STILL_LIFE_IMG_YN = #{still_life_img_yn}
                            </if>
                    )
                    <if test = "available_start_dt && available_end_dt">
                    AND NOT EXISTS
                    (
                        SELECT 1
                        FROM TB_REQ_SHOWROOM B
                        WHERE 1=1
                            AND A.SHOWROOM_NO = B.SHOWROOM_NO
                            AND B.DEL_YN = 'N'
                            AND EXISTS 
                            (
                                SELECT 1 
                                FROM TB_REQ C
                                WHERE 1=1
                                    AND B.REQ_NO = C.REQ_NO
                                    AND C.DEL_YN = 'N'
                                    AND TO_TIMESTAMP(#{available_start_dt}::BIGINT) BETWEEN C.PHOTOGRF_PREARNGE_BEGIN_DT AND C.PHOTOGRF_PREARNGE_END_DT
                                    AND TO_TIMESTAMP(#{available_end_dt}::BIGINT) BETWEEN C.PHOTOGRF_PREARNGE_BEGIN_DT AND C.PHOTOGRF_PREARNGE_END_DT
                            )
                    )
                    </if>
            ) A 
            LEFT JOIN TB_REQ_SHOWROOM B ON A.SHOWROOM_NO = B.SHOWROOM_NO AND B.DEL_YN = 'N'
            LEFT JOIN TB_SHOWROOM_DIBS C ON A.SHOWROOM_NO = C.SHOWROOM_NO AND C.USER_ID = #{user_id}
            INNER JOIN TB_SHOWROOM_SAMPLE D ON A.SHOWROOM_NO=D.SHOWROOM_NO AND D.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG E ON D.SAMPLE_NO=E.SAMPLE_NO AND E.SHOWROOM_MAIN_YN=true AND E.DEL_YN='N'
            GROUP BY A.BRAND_ID,A.SHOWROOM_NO, A.SHOWROOM_NM, A.SHOWROOM_REG_DT, A.TOTAL_COUNT, C.DIBS_YN, E.IMG_URL_ADRES,A.mfrc_sample_yn
        ) T 
        INNER JOIN TB_BRAND AS TB ON T.BRAND_ID = TB.BRAND_ID
        INNER JOIN (
            SELECT 
                tss.showroom_no,max(ts.sample_no)  as sample_no
            FROM tb_sample ts INNER JOIN tb_showroom_sample tss ON ts.sample_no = tss.sample_no 
            WHERE ts.del_yn ='N'
            GROUP BY tss.showroom_no
        ) as OR1 ON T.showroom_no = OR1.showroom_no 
        INNER JOIN tb_sample as OR2 ON OR1.sample_no = OR2.sample_no
        INNER JOIN tb_sample_catgry_lrge_cl as OR3 ON OR2.sample_catgry_lrge_cl_cd = OR3.sample_catgry_lrge_cl_cd 
        LEFT JOIN tb_sample_catgry_middl_cl as OR4 ON OR2.sample_catgry_middle_cl_cd  = OR4.sample_catgry_lrge_cl_cd 
        LEFT JOIN ( 
            SELECT 
                trs.showroom_no,trs.req_status_cd ,tr.return_prearnge_dt,tr.duty_recpt_dt
            FROM 
                tb_req_showroom as trs inner join tb_req as tr on trs.req_no = tr.req_no  
            WHERE 
                trs.del_yn ='N' and tr.brand_cnfirm_dt is not null
                and tr.return_prearnge_dt &gt; (NOW() AT TIME ZONE 'Asia/Seoul') 
                and tr.duty_recpt_dt &lt; (NOW() AT TIME ZONE 'Asia/Seoul') 

        ) as TRS on T.showroom_no = TRS.showroom_no 
        ORDER BY OR3.order_value asc ,OR4.sample_catgry_middle_cl_nm ,T.REQ_COUNT DESC, T.SHOWROOM_NO DESC        
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!-- 
        쇼룸 목록 조회
        /magazine/showroom-list GET
    -->
    <select id="SELECT.SHOWROOM.LIST.002">
        SELECT
            T.SHOWROOM_NO
            , T.SHOWROOM_NM
            , (
                SELECT CONCAT
                (
                    (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1)
                    , '/'
                    , IMG_URL_ADRES
                )
                FROM TB_SAMPLE_IMG 
                WHERE 1=1
                    AND SAMPLE_NO = (
                        SELECT 
                            SS.SAMPLE_NO 
                        FROM TB_SHOWROOM_SAMPLE SS
                        WHERE 1=1
                            AND SS.SHOWROOM_NO = T.SHOWROOM_NO
                            AND SS.DEL_YN = 'N'
                        ORDER BY SAMPLE_NO 
                        LIMIT 1
                    )
                LIMIT 1
            ) AS IMAGE_URL
            , (CURRENT_TIMESTAMP - T.SHOWROOM_REG_DT) &lt; INTERVAL '24 hour' AS IS_NEW
            , T.REQ_COUNT
            , T.TOTAL_COUNT
            , T.IS_FAV
        FROM 
        (
            SELECT 
                A.SHOWROOM_NO
                , A.SHOWROOM_NM
                , A.SHOWROOM_REG_DT
                , A.TOTAL_COUNT
                , COUNT(B.*) AS REQ_COUNT 
                , CASE 
                    WHEN C.DIBS_YN=true
                        THEN true
                    ELSE false
                END AS IS_FAV
            FROM
            (
                SELECT 
                    *
                    , COUNT(1) OVER() AS TOTAL_COUNT
                FROM TB_SHOWROOM A
                WHERE 1=1  
                    AND CASE
                        WHEN #{brand_id} IS NULL
                            THEN 1=1
                        ELSE A.BRAND_ID = #{brand_id}
                    END
                    AND A.SEASON_YEAR = #{season_year}
                    AND A.SEASON_SE_CD = #{season_cd_id}
                    AND A.DEL_YN = 'N'
                    AND EXISTS (
                        SELECT 1
                        FROM TB_SAMPLE SAM
                        WHERE 1=1
                            AND SAM.SAMPLE_NO IN (
                                SELECT SS.SAMPLE_NO 
                                FROM TB_SHOWROOM_SAMPLE SS
                                WHERE 1=1
                                    AND SS.SHOWROOM_NO = A.SHOWROOM_NO
                                    AND SS.DEL_YN = 'N'
                            )
                            AND SAM.DEL_YN = 'N'
                            AND CASE
                                WHEN #{mid_cat} IS NULL
                                    THEN 1=1
                                ELSE #{mid_cat}=SAM.SAMPLE_CATGRY_MIDDLE_CL_CD
                            END
                            AND CASE
                                WHEN #{gender_cd_id} IS NULL
                                    THEN 1=1
                                ELSE #{gender_cd_id}=SAM.SAMPLE_SEX_SE_CD
                            END
                    )
            ) A 
            LEFT JOIN TB_REQ_SHOWROOM B
            ON 1=1
                AND A.SHOWROOM_NO = B.SHOWROOM_NO
                AND B.DEL_YN = 'N'
            LEFT JOIN TB_SHOWROOM_DIBS C
            ON 1=1
                AND A.SHOWROOM_NO=C.SHOWROOM_NO
                AND C.DEL_YN='N'
            GROUP BY
                A.SHOWROOM_NO
                , A.SHOWROOM_NM
                , A.SHOWROOM_REG_DT
                , A.TOTAL_COUNT
                , C.DIBS_YN
        ) T 
        ORDER BY T.REQ_COUNT DESC
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!-- 
        쇼룸 즐겨찾기 조회
        /magazine/fav-show GET
    -->
    <select id="SELECT.FAV.SHOW.001.ORIG">
        SELECT
            A.SHOWROOM_NO
            , B.SHOWROOM_NM
            , 
            (
                SELECT CONCAT
                (
                    (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                    , M.IMG_URL_ADRES
                ) AS IMG_URL_ADRES
                FROM TB_SAMPLE_IMG M
                LEFT JOIN TB_SHOWROOM_SAMPLE N
                ON 1=1
                    AND M.SAMPLE_NO=N.SAMPLE_NO
                    AND N.DEL_YN='N'
                WHERE 1=1
                    AND M.MAIN_YN=true
                    AND M.DEL_YN='N'
                    AND N.SHOWROOM_NO=A.SHOWROOM_NO
                ORDER BY N.SHOWROOM_NO,M.SAMPLE_NO
                LIMIT 1
            )
        FROM (
            SELECT *
            FROM TB_SHOWROOM_DIBS
            WHERE 1=1   
                AND DIBS_YN IS TRUE
                AND USER_ID = #{user_id}
        ) A
        LEFT JOIN TB_SHOWROOM B
        ON 1=1
            AND A.SHOWROOM_NO=B.SHOWROOM_NO
            AND B.DEL_YN='N'
    </select>

    <!-- 
        쇼룸 즐겨찾기 조회
        /magazine/fav-show GET
    -->
    <select id="SELECT.FAV.SHOW.001">
        SELECT
            A.SHOWROOM_NO
            , B.SHOWROOM_NM
            , 
            (
                SELECT CONCAT
                (
                    (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                    , M.IMG_URL_ADRES
                ) AS IMG_URL_ADRES
                FROM TB_SAMPLE_IMG M
                LEFT JOIN TB_SHOWROOM_SAMPLE N
                ON 1=1
                    AND M.SAMPLE_NO=N.SAMPLE_NO
                    AND N.DEL_YN='N'
                WHERE 1=1
                    AND M.MAIN_YN=true
                    AND M.DEL_YN='N'
                    AND N.SHOWROOM_NO=A.SHOWROOM_NO
                ORDER BY N.SHOWROOM_NO,M.SAMPLE_NO
                LIMIT 1
            )
            , COUNT(1) OVER() AS TOTAL_COUNT 
        FROM (
            SELECT
                A.SHOWROOM_NO
            FROM TB_SHOWROOM_DIBS A
            WHERE 1=1   
                AND A.DIBS_YN IS TRUE
                AND A.USER_ID = #{user_id}
        ) A
        JOIN 
        (
            SELECT
                B.SHOWROOM_NM
                , B.SHOWROOM_NO
                , B.DEL_YN
            FROM TB_SHOWROOM B
            WHERE 1=1 
                AND EXISTS 
                (
                    SELECT 1
                    FROM TB_SAMPLE SAM
                    WHERE 1=1
                        AND SAM.SAMPLE_NO IN (
                            SELECT SS.SAMPLE_NO 
                            FROM TB_SHOWROOM_SAMPLE SS
                            WHERE 1=1
                                AND SS.SHOWROOM_NO = B.SHOWROOM_NO
                                AND SS.DEL_YN = 'N'
                        )
                        AND SAM.DEL_YN = 'N'
                        <if test="gender">
                            AND SAM.SAMPLE_SEX_SE_CD IN ${gender}
                        </if>
                        <if test="category">
                        AND SAM.SAMPLE_CATGRY_MIDDLE_CL_CD IN ${category}
                        </if>
                        <if test="filtercolor">
                        AND exists (
                            SELECT * FROM UNNEST(SAM.COLOR_LIST) 
                            WHERE UNNEST = ANY(
                                ARRAY[<foreach collection="filtercolor" item="ID" separator=",">
                                    #{ID}
                                </foreach>]
                            )
                        )
                        </if>
                        <if test="material">
                        AND SAM.MTRQLT_SE_CD IN ${material}
                        </if>
                        <if test="size">
                        AND SAM.SIZE_CD IN ${size}
                        </if>
                        <if test="wrhousng_yn != null">
                        AND SAM.WRHOUSNG_YN = #{wrhousng_yn}
                        </if>
                        <if test="still_life_img_yn != null">
                        AND SAM.STILL_LIFE_IMG_YN = #{still_life_img_yn}
                        </if>
                )
                <if test = "available_start_dt && available_end_dt">
                AND NOT EXISTS 
                (
                    SELECT 1
                    FROM TB_REQ_SHOWROOM C
                    WHERE 1=1
                        AND B.SHOWROOM_NO = C.SHOWROOM_NO
                        AND C.DEL_YN = 'N'
                        AND EXISTS 
                        (
                            SELECT 1 
                            FROM TB_REQ D
                            WHERE 1=1
                                AND C.REQ_NO = D.REQ_NO
                                AND D.DEL_YN = 'N'
                                AND TO_TIMESTAMP(#{available_start_dt}::BIGINT) BETWEEN D.PHOTOGRF_PREARNGE_BEGIN_DT AND D.PHOTOGRF_PREARNGE_END_DT
                                AND TO_TIMESTAMP(#{available_end_dt}::BIGINT) BETWEEN D.PHOTOGRF_PREARNGE_BEGIN_DT AND D.PHOTOGRF_PREARNGE_END_DT
                        )
                )
                </if>
                <if test="brand_id">
                AND B.BRAND_ID = #{brand_id}
                </if>
        ) B
        ON 1=1
            AND A.SHOWROOM_NO=B.SHOWROOM_NO
            AND B.DEL_YN='N'
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!-- 
        보도자료 즐겨찾기 조회
        /magazine/fav-press GET
    -->
    <select id="SELECT.FAV.PRESS.001">
        SELECT
            A.BRAND_PRESS_NO
            , B.PRESS_SUBJ AS TITLE
            , CONCAT
            (
                (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                , B.MAIN_IMG_ADRES
            ) AS IMG_URL_ADRES
            , B.MAIN_IMG_ADRES AS IMG_PATH
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || B.WORD_FILE_ADRES AS WORD_FILE_FULL_ADRES
            , DIBS_YN
            , COUNT(1) OVER() AS TOTAL_COUNT 
        FROM
        (
            SELECT
                A.BRAND_PRESS_NO
                , CASE 
                    WHEN A.DIBS_YN=true THEN A.DIBS_YN
                    ELSE false
                END AS DIBS_YN
            FROM TB_BRAND_PRESS_DIBS A
            WHERE 1=1
                AND A.USER_ID=#{user_id}
                AND A.DIBS_YN IS TRUE
                AND A.DEL_YN='N'                
        ) A
        INNER JOIN TB_BRAND_PRESS B
        ON 1=1
            AND A.BRAND_PRESS_NO=B.BRAND_PRESS_NO
            AND B.DEL_YN='N' AND B.SHOW_YN='Y'
            <if test="brand_id">
            AND B.BRAND_ID=#{brand_id}
            </if>
        <if test="limit">
        OFFSET ${offset}
        LIMIT ${limit}
        </if>
    </select>

    <!--
        보도자료 목록조회
        /magazine/press-list GET
    -->
    <select id="SELECT.PRESS.SEASON.LIST">
        /* SELECT.PRESS.SEASON.LIST */
        SELECT 
            DISTINCT YEAR, MONTH
        FROM TB_BRAND_PRESS 
        WHERE 1=1   
            AND DEL_YN = 'N' AND SHOW_YN = 'Y'
        <if test="brand_id && brand_id != 'all' ">
            AND BRAND_ID=#{brand_id}
        </if>
        ORDER BY 
            YEAR DESC
            , MONTH ASC
    </select>

    <!-- 
        보도자료 개별조회
        /magazine/article/:id GET
    -->
    <select id='SELECT.ARTICLE.001'>
        /* SELECT.ARTICLE.001 */
        SELECT
            A.BRAND_PRESS_NO
            , A.PRESS_SUBJ AS TITLE
            , A.PRESS_CNTENT AS CONTENTS
            , A.PRESS_PERIOD_NM
            , A.BRAND_ID
            , A.share_uuid
            , A.inquiry_charge
            , A.inquiry_email
            , A.inquiry_tel
            , A.BRAND_USER_NO
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || A.WORD_FILE_ADRES AS WORD_FILE_FULL_ADRES
            , A.WORD_FILE_ADRES
            , A.LINK
            , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', A.MAIN_IMG_ADRES) AS IMG_URL_ADRES
            , A.MAIN_IMG_ADRES AS IMG_PATH
            , A.MONTH AS MONTHLY_MONTH
            , A.YEAR AS MONTHLY_YEAR
            , ARRAY
            (
                SELECT CONCAT
                (
                    (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                    , IMG_URL_ADRES
                )
                FROM TB_BRAND_PRESS_IMG B
                WHERE B.BRAND_PRESS_NO=A.BRAND_PRESS_NO AND B.DEL_YN='N'
            ) AS ADD_IMG_LIST
        FROM TB_BRAND_PRESS A
        WHERE 1=1
            AND A.BRAND_PRESS_NO=#{article_id}
            AND A.DEL_YN='N'
    </select>

    <!-- 
        픽업 일정 조회
        /magazine/pickup-schedule GET
    -->
    <select id="SELECT.PICKUP.SCHEDULE.001">
        /* SELECT.PICKUP.SCHEDULE.001 */
        WITH PROTO_RESULT AS (
            SELECT
                A.REQ_NO
                , A.BRAND_ID
                , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS RECEIVE_DATE
                , B.USER_NM AS BRAND_USER_NM
                , C.BRAND_NM
                , CONCAT
                    (
                        (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                        , C.BRAND_LOGO_URL_ADRES
                    ) AS BRAND_LOGO_URL_ADRES
            FROM TB_REQ A
            LEFT JOIN TB_BRAND_USER B
            ON 1=1
                AND B.BRAND_USER_NO=A.CNFIRM_BRAND_USER_NO
                AND B.DEL_YN='N'
            LEFT JOIN TB_BRAND C
            ON 1=1
                AND A.BRAND_ID=C.BRAND_ID
                AND C.DEL_YN='N'
            WHERE 1=1
                AND A.REQ_USER_SE_CD='RUS001'
                AND A.REQ_USER_ID IN
                (
                    SELECT USER_ID
                    FROM TB_MGZN_USER
                    WHERE 1=1
                        AND MGZN_ID=
                        (
                            SELECT MGZN_ID
                            FROM TB_MGZN_USER
                            WHERE 1=1
                                AND USER_ID=#{user_id}
                        )
                )
                AND A.DEL_YN='N'
                AND A.REQ_STATUS_CD='RS0003'
                AND A.RECPT_DT IS NULL
            ORDER BY RECEIVE_DATE, BRAND_NM
        )
        SELECT 
            RECEIVE_DATE
            , RECEIVE_DATE AS DATE
            , JSON_AGG(ROW_TO_JSON(PROTO_RESULT)) AS EACH_LIST
        FROM PROTO_RESULT
        WHERE 1=1
            AND CASE
                WHEN (#{start_date} IS NULL OR #{fin_date} IS NULL)
                    THEN 1=1
                ELSE RECEIVE_DATE>=#{start_date}
                    AND #{fin_date}>=RECEIVE_DATE
            END
            AND CASE
                WHEN #{brand_id} IS NULL
                    THEN 1=1
                ELSE BRAND_ID=#{brand_id}
            END
        GROUP BY RECEIVE_DATE,DATE
    </select>

    <!-- 
        픽업 일정에서 브랜드 목록 출력
        /magazine/pickup-schedule GET
    -->
    <select id="SELECT.PICKUP.SCHEDULE.002">
        SELECT 
            DISTINCT A.BRAND_ID, B.BRAND_NM
        FROM 
            TB_REQ A LEFT JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
        WHERE 
            A.REQ_USER_ID IN ( SELECT USER_ID FROM TB_MGZN_USER WHERE MGZN_ID=(SELECT MGZN_ID FROM TB_MGZN_USER WHERE USER_ID=#{user_id}) )
            AND A.REQ_STATUS_CD='RS0003' AND A.REQ_USER_SE_CD='RUS001' AND A.DEL_YN='N'
    </select>

    <!-- 
        sendout 일정 조회
        /magazine/sendout-schedule GET
    -->
    <select id="SELECT.SENDOUT.SCHEDULE.001">
        WITH PROTO_RESULT AS (
            SELECT
                A.REQ_NO
                , A.BRAND_ID
                , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS RETURN_DATE
                , B.USER_NM AS BRAND_USER_NM
                , C.BRAND_NM
                , CONCAT
                    (
                        (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                        , C.BRAND_LOGO_URL_ADRES
                    ) AS BRAND_LOGO_URL_ADRES
            FROM TB_REQ A
            LEFT JOIN TB_BRAND_USER B
            ON 1=1
                AND B.BRAND_USER_NO=A.CNFIRM_BRAND_USER_NO
                AND B.DEL_YN='N'
            LEFT JOIN TB_BRAND C
            ON 1=1
                AND A.BRAND_ID=C.BRAND_ID
                AND C.DEL_YN='N'
            WHERE 1=1
                AND A.REQ_USER_SE_CD='RUS001'
                AND A.REQ_USER_ID IN
                (
                    SELECT USER_ID
                    FROM TB_MGZN_USER
                    WHERE 1=1
                        AND MGZN_ID=
                        (
                            SELECT MGZN_ID
                            FROM TB_MGZN_USER
                            WHERE 1=1
                                AND USER_ID=#{user_id}
                        )
                )
                AND A.DEL_YN='N'
                AND (A.REQ_STATUS_CD='RS0003' OR A.REQ_STATUS_CD='RS0005' OR A.REQ_STATUS_CD='RS0006')
                AND A.RECPT_DT IS NULL
            ORDER BY RETURN_DATE, BRAND_NM
        )
            SELECT 
                RETURN_DATE
                , RETURN_DATE AS DATE
                , json_agg(row_to_json(PROTO_RESULT)) AS EACH_LIST
            FROM PROTO_RESULT
            WHERE 1=1
                AND CASE
                    WHEN (#{start_date} IS NULL OR #{fin_date} IS NULL)
                        THEN 1=1
                    ELSE RETURN_DATE>=#{start_date}
                        AND #{fin_date}>=RETURN_DATE
                END
                AND CASE
                    WHEN #{brand_id} IS NULL
                        THEN 1=1
                    ELSE BRAND_ID=#{brand_id}
                END
            GROUP BY RETURN_DATE,DATE
    </select>

    <!-- 
        sendout 일정에서 브랜드 목록 출력
        /magazine/sendout-schedule GET
    -->
    <select id="SELECT.SENDOUT.SCHEDULE.002">
        SELECT DISTINCT
            A.BRAND_ID
            , B.BRAND_NM
        FROM TB_REQ A
        LEFT JOIN TB_BRAND B
        ON 1=1
            AND A.BRAND_ID=B.BRAND_ID
            AND B.DEL_YN='N'
        WHERE 1=1
            AND A.REQ_USER_ID IN
            (
                SELECT USER_ID
                FROM TB_MGZN_USER
                WHERE 1=1
                    AND MGZN_ID=
                    (
                        SELECT MGZN_ID
                        FROM TB_MGZN_USER
                        WHERE 1=1
                            AND USER_ID=#{user_id}
                    )
            )
            AND (A.REQ_STATUS_CD='RS0003' OR A.REQ_STATUS_CD='RS0005' OR A.REQ_STATUS_CD='RS0006')
            AND A.REQ_USER_SE_CD='RUS001'
            AND A.DEL_YN='N'
    </select>

    <!-- 
        픽업 상세목록 조회
        /magazine/pickup-detailed/:req_no GET
    -->
    <select id="SELECT.PICKUP.DETAILED.001">
        SELECT
            FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS PICKUP_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT AS PHOTO_DATE
            , A.DLVY_ADRES_NO
            , A.BRAND_ID
            , B.USER_NM AS MAIN_USER_NM
            , A.CONTACT_USER_ID AS ASSI_ID
            , C.MGZN_NM AS POSI_COMPY_NM
            , D.USER_NM AS ASSI_USER_NM
            , D.PHONE_NO AS ASSI_PHONE_NO
            , E.USER_NM AS BRAND_USER_NM
            , E.PHONE_NO AS BRAND_PHONE_NO
            , F.BRAND_NM
            , G.DLVY_ADRES_NM
            , G.ADRES_DETAIL
        FROM 
        ( 
            SELECT
                A.DLVY_ADRES_NO
                , A.BRAND_ID
                , A.CONTACT_USER_ID
                , A.DUTY_RECPT_DT
                , A.PHOTOGRF_DT
                , A.REQ_USER_ID
                , A.CNFIRM_BRAND_USER_NO
            FROM TB_REQ A
            WHERE 1=1
                <if test = "req_no">
                AND A.REQ_NO=#{req_no}
                </if>
                <if test="type == 'SENDOUT' and date">
                AND A.DUTY_RECPT_DT::DATE = TO_TIMESTAMP(#{date}::BIGINT)::DATE
                AND REQ_STATUS_CD = 'RS0003'
                </if>   
                <if test="type == 'RETURN' and date">
                AND A.RETURN_PREARNGE_DT::DATE = TO_TIMESTAMP(#{date}::BIGINT)::DATE
                AND REQ_STATUS_CD = 'RS0005'
                </if>
                AND A.DEL_YN='N'
        ) A
        INNER JOIN TB_MGZN_USER B
        ON 1=1
            AND A.REQ_USER_ID=B.USER_ID
            AND B.DEL_YN='N'
        INNER JOIN TB_MGZN_USER H
        ON 1=1
            AND B.MGZN_ID=H.MGZN_ID
            AND H.USER_ID=#{user_id}
            AND H.DEL_YN='N'
        INNER JOIN TB_MGZN C
        ON 1=1
            AND B.MGZN_ID=C.MGZN_ID
            AND C.DEL_YN='N'
        INNER JOIN TB_MGZN_USER D
        ON 1=1
            AND A.CONTACT_USER_ID=D.USER_ID
            AND D.DEL_YN='N'
        LEFT JOIN TB_BRAND_USER E
        ON 1=1
            AND A.CNFIRM_BRAND_USER_NO=E.BRAND_USER_NO
            AND E.DEL_YN='N'
        INNER JOIN TB_BRAND F
        ON 1=1
            AND F.BRAND_ID=A.BRAND_ID
            AND F.DEL_YN='N'
        INNER JOIN TB_DLVY_ADRES G
        ON 1=1
            AND G.DLVY_ADRES_NO=A.DLVY_ADRES_NO
            AND G.DEL_YN='N'
    </select>

    <!-- 
        픽업 상세목록 조회
        /magazine/pickup-detailed/:req_no GET
    -->
    <select id="SELECT.PICKUP.DETAILED.002">
        /* SELECT.PICKUP.DETAILED.002 */
        WITH PROTO_RESULT AS
        (
            SELECT
                A.SHOWROOM_NO
                , E.SHOWROOM_NM
                , B.SAMPLE_NO
                , C.SAMPLE_CATGRY_MIDDLE_CL_CD AS SAMPLE_CATEGORY_CODE
                , C.PRICE
                , C.SAMPLE_NM
                , D.SAMPLE_CATGRY_MIDDLE_CL_NM AS SAMPLE_CATEGORY
                , 
                CONCAT
                (
                    (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                    , F.IMG_URL_ADRES
                ) AS IMAGE_URL
            FROM 
            (
                SELECT
                    A.REQ_NO
                FROM TB_REQ A 
                WHERE 1=1
                    <if test="req_no">
                    AND A.REQ_NO = #{req_no}
                    </if>   
                    <if test="type == 'SENDOUT' and date">
                    AND A.DUTY_RECPT_DT::DATE = TO_TIMESTAMP(#{date}::BIGINT)::DATE
                    AND A.REQ_STATUS_CD = 'RS0003'
                    </if>   
                    <if test="type == 'RETURN' and date">
                    AND A.RETURN_PREARNGE_DT::DATE = TO_TIMESTAMP(#{date}::BIGINT)::DATE
                    AND A.REQ_STATUS_CD = 'RS0005'
                    </if>   
                    AND A.DEL_YN='N'
            ) A1
            INNER JOIN TB_REQ_SHOWROOM A
            ON 1=1
                AND A1.REQ_NO = A.REQ_NO 
                AND A.DEL_YN = 'N'
            INNER JOIN TB_SHOWROOM_SAMPLE B
            ON 1=1
                AND A.SHOWROOM_NO=B.SHOWROOM_NO
                AND B.DEL_YN='N'
            INNER JOIN TB_SAMPLE C
            ON 1=1
                AND B.SAMPLE_NO=C.SAMPLE_NO
                AND C.DEL_YN='N'
            INNER JOIN TB_SHOWROOM E
            ON 1=1
                AND A.SHOWROOM_NO=E.SHOWROOM_NO
                AND E.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG F
            ON 1=1
                AND C.SAMPLE_NO=F.SAMPLE_NO
                AND F.MAIN_YN=TRUE
                AND F.DEL_YN='N'
            LEFT JOIN TB_SAMPLE_CATGRY_MIDDL_CL D
            ON 1=1
                AND C.SAMPLE_CATGRY_MIDDLE_CL_CD=D.SAMPLE_CATGRY_MIDDLE_CL_CD
                AND D.DEL_YN='N'
        )
        SELECT 
            F.SHOWROOM_NO
            , F.SHOWROOM_NM
            , JSON_AGG
            (
                (
                    SELECT x FROM
                    (
                        SELECT
                            F.SAMPLE_NO
                            , F.SAMPLE_CATEGORY_CODE
                            , F.PRICE
                            , F.SAMPLE_NM
                            , F.SAMPLE_CATEGORY
                            , F.IMAGE_URL 
                    ) AS x
                )
            ) AS INDIVIDUAL_SAMPLES
        FROM PROTO_RESULT F
        GROUP BY SHOWROOM_NO,SHOWROOM_NM
    </select>

    <!-- 
        sendout 상세목록 조회
        /magazine/sendout-detailed/:req_no GET
    -->
    <select id="SELECT.SENDOUT.DETAILED.001">
        /* SELECT.SENDOUT.DETAILED.001 */
        SELECT
            FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS RETURNING_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT AS PHOTO_DATE
            , A.DLVY_ADRES_NO
            , A.BRAND_ID
            , B.USER_NM AS MAIN_USER_NM
            , A.CONTACT_USER_ID AS ASSI_ID
            , C.MGZN_NM AS POSI_COMPY_NM
            , D.USER_NM AS ASSI_USER_NM
            , D.PHONE_NO AS ASSI_PHONE_NO
            , E.USER_NM AS BRAND_USER_NM
            , E.PHONE_NO AS BRAND_PHONE_NO
            , F.BRAND_NM
        FROM 
        ( 
            SELECT
                A.RETURN_PREARNGE_DT
                , A.PHOTOGRF_DT
                , A.DLVY_ADRES_NO
                , A.BRAND_ID
                , A.CONTACT_USER_ID
                , A.REQ_USER_ID
                , A.CNFIRM_BRAND_USER_NO
            FROM TB_REQ A
            WHERE 1=1
                AND A.DEL_YN='N'
                <if test="req_no">
                AND A.REQ_NO = #{req_no}
                </if>   
                <if test="type == 'SENDOUT' and date">
                AND A.DUTY_RECPT_DT::DATE = TO_TIMESTAMP(#{date}::BIGINT)::DATE
                AND A.REQ_STATUS_CD = 'RS0003'
                </if>   
                <if test="type == 'RETURN' and date">
                AND A.RETURN_PREARNGE_DT::DATE = TO_TIMESTAMP(#{date}::BIGINT)::DATE
                AND A.REQ_STATUS_CD = 'RS0005'
                </if>   
        ) A 
        INNER JOIN TB_MGZN_USER B
        ON 1=1
            AND A.REQ_USER_ID=B.USER_ID
            AND B.DEL_YN='N'
        INNER JOIN TB_MGZN_USER G
        ON 1=1
            AND G.USER_ID=#{user_id}
            AND B.MGZN_ID=G.MGZN_ID
            AND G.DEL_Yn='N'
        LEFT JOIN TB_MGZN C
        ON 1=1
            AND B.MGZN_ID=C.MGZN_ID
            AND C.DEL_YN='N'
        LEFT JOIN TB_MGZN_USER D
        ON 1=1
            AND A.CONTACT_USER_ID=D.USER_ID
            AND D.DEL_YN='N'
        LEFT JOIN TB_BRAND_USER E
        ON 1=1
            AND A.CNFIRM_BRAND_USER_NO=E.BRAND_USER_NO
            AND E.DEL_YN='N'
        LEFT JOIN TB_BRAND F
        ON 1=1
            AND F.BRAND_ID=A.BRAND_ID
            AND F.DEL_YN='N'
    </select>

    <!-- 
        sendout 상세목록 조회
        /magazine/sendout-detailed/:req_no GET
    -->
    <select id="SELECT.SENDOUT.DETAILED.002">
        /* SELECT.SENDOUT.DETAILED.002 */
        WITH PROTO_RESULT AS
        (
            SELECT
                A.SHOWROOM_NO
                , E.SHOWROOM_NM
                , B.SAMPLE_NO
                , C.SAMPLE_CATGRY_MIDDLE_CL_CD AS SAMPLE_CATEGORY_CODE
                , C.PRICE
                , C.SAMPLE_NM
                , D.SAMPLE_CATGRY_MIDDLE_CL_NM AS SAMPLE_CATEGORY
                , 
                CONCAT
                (
                    (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                    , F.IMG_URL_ADRES
                ) AS IMAGE_URL
            FROM TB_REQ_SHOWROOM A
            INNER JOIN TB_SHOWROOM_SAMPLE B
            ON 1=1
                AND A.SHOWROOM_NO=B.SHOWROOM_NO
                AND B.DEL_YN='N'
            INNER JOIN TB_SAMPLE C
            ON 1=1
                AND B.SAMPLE_NO=C.SAMPLE_NO
                AND C.DEL_YN='N'
            INNER JOIN TB_SHOWROOM E	
            ON 1=1	
                AND A.SHOWROOM_NO=E.SHOWROOM_NO	
                AND E.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG F
            ON 1=1
                AND C.SAMPLE_NO=F.SAMPLE_NO
                AND F.MAIN_YN=TRUE
                AND F.DEL_YN='N'
            LEFT JOIN TB_SAMPLE_CATGRY_MIDDL_CL D
            ON 1=1
                AND C.SAMPLE_CATGRY_MIDDLE_CL_CD=D.SAMPLE_CATGRY_MIDDLE_CL_CD
                AND D.DEL_YN='N'
            WHERE 1=1
                AND A.REQ_NO=#{req_no}
                AND A.DEL_YN='N'
        )
        SELECT 
            SHOWROOM_NO
            , SHOWROOM_NM	
            , JSON_AGG((SELECT x FROM(SELECT	
                F.SAMPLE_NO	
                , F.SAMPLE_CATEGORY_CODE	
                , F.PRICE	
                , F.SAMPLE_NM	
                , F.SAMPLE_CATEGORY	
                , F.IMAGE_URL ) AS x	
            )) AS INDIVIDUAL_SAMPLES
        FROM PROTO_RESULT F
        GROUP BY SHOWROOM_NO,SHOWROOM_NM
    </select>

    <!-- 
        press 즐겨찾기 상세조회
        /magazine/fav-press/:brand_press_no POST
    -->
    <insert id="INSERT.FAV.PRESS.001">
        INSERT INTO TB_BRAND_PRESS_DIBS
        (
            BRAND_PRESS_NO
            , USER_ID
            , DIBS_YN
            , DEL_YN
            , INPUT_DT
        )
        VALUES
        (
            #{brand_press_no}
            , #{user_id}
            , true
            , 'N'
            , DEFAULT
        )
        ON CONFLICT (BRAND_PRESS_NO,USER_ID) DO UPDATE
        SET DIBS_YN=true
        AND TB_BRAND_PRESS_DIBS.DEL_YN='N'
    </insert>

    <insert id="INSERT.FAV.SHOW.001">
        INSERT INTO TB_SHOWROOM_DIBS
        (
            SHOWROOM_NO
            , USER_ID
            , DIBS_YN
            , DEL_YN
            , INPUT_DT
        )
        VALUES
        (
            #{showroom_no}
            , #{user_id}
            , true
            , 'N'
            , DEFAULT
        )
        ON CONFLICT (SHOWROOM_NO,USER_ID) DO UPDATE
        SET DIBS_YN=true
        AND TB_SHOWROOM_DIBS.DEL_YN='N'
    </insert>

    <update id="UPDATE.FAV.PRESS.001">
        UPDATE TB_BRAND_PRESS_DIBS
        SET DIBS_YN=false
        WHERE 1=1
            AND USER_ID=#{user_id}
            AND BRAND_PRESS_NO=#{brand_press_no}
    </update>

    <update id="UPDATE.FAV.SHOW.001">
        UPDATE TB_SHOWROOM_DIBS
        SET DIBS_YN=false
        WHERE 1=1
            AND USER_ID=#{user_id}
            AND SHOWROOM_NO=#{showroom_no}
    </update>

    <insert id="INSERT.PICKUP.FAIL.001">
        WITH INSERT_FAIL AS 
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , SEND_USER_ID
                , RECV_USER_ID
                , RECV_CNFIRM_YN
                , DEL_YN
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS03'
                , 
                (
                    SELECT
                        CONCAT
                        (
                            '[샘플 미수령] '
                            , B.MGZN_NM
                            , ' '
                            , A.USER_NM
                            , '에서 샘플 미수령 알림이 왔습니다.'
                        )
                        FROM
                        (
                            SELECT *
                            FROM TB_MGZN_USER
                            WHERE 1=1
                                AND USER_ID=#{user_id}
                                AND DEL_YN='N'
                        ) A
                        LEFT JOIN TB_MGZN B
                        ON 1=1
                            AND B.MGZN_ID=A.MGZN_ID
                            AND B.DEL_YN='N'
                )
                , 
                (
                    SELECT
                        CONCAT
                        (
                            B.MGZN_NM
                            , ' '
                            , A.USER_NM
                            , '에서 ' 
                            , (C.PHOTOGRF_DT at time zone 'utc' at time zone 'kst')::DATE
                            ,' 촬영 건 샘플의 미수령 알림이 왔습니다.'
                        )
                        FROM
                        (
                            SELECT *
                            FROM TB_MGZN_USER
                            WHERE 1=1
                                AND USER_ID=#{user_id}
                                AND DEL_YN='N'
                        ) A
                        LEFT JOIN TB_MGZN B
                        ON 1=1
                            AND B.MGZN_ID=A.MGZN_ID
                            AND B.DEL_YN='N'
                        LEFT JOIN TB_REQ C
                        ON 1=1
                            AND C.REQ_NO=#{req_no}
                            AND C.DEL_YN='N'
                )
                , #{user_id}
                , USER_ID
                ,false
                ,'N'
                , 'magazine'
                , 'send'
            FROM TB_BRAND_USER
            WHERE 1=1
                AND BRAND_ID=
                (
                    SELECT 
                        BRAND_ID
                    FROM TB_REQ
                    WHERE 1=1
                        AND REQ_NO=#{req_no}
                    LIMIT 1
                )
            RETURNING *
        )
        SELECT
            B.TOKEN_VALUE
            , A.NOTIFI_SUBJ AS MESSAGE 
        FROM INSERT_FAIL A
        JOIN TB_FCM_PUSH_TOKEN B
        ON 1=1
            AND A.RECV_USER_ID = B.USER_ID
            AND B.USE_YN
    </insert>

    <insert id="INSERT.PICKUP.FAIL.INDIVIDUAL">
        WITH INSERT_FAIL AS 
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , SEND_USER_ID
                , RECV_USER_ID
                , RECV_CNFIRM_YN
                , DEL_YN
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS03'
                , 
                (
                    SELECT
                        CONCAT('[샘플 미수령] ', B.MGZN_NM, ' ', A.USER_NM, '에서 샘플 미수령 알림이 왔습니다.')
                    FROM
                        (
                            SELECT A.USER_NM, A.MGZN_ID
                            FROM TB_MGZN_USER A
                            WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N'
                        ) A
                        LEFT JOIN TB_MGZN B ON B.MGZN_ID=A.MGZN_ID AND B.DEL_YN='N'
                )
                , 
                (
                    SELECT
                        CONCAT( B.MGZN_NM, ' ', A.USER_NM, '에서 ' , (C.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE,' 촬영 건 ',(SELECT SAMPLE_NM FROM TB_SAMPLE WHERE SAMPLE_NO=#{sample_no}), '을 수령하지 못했음을 알립니다.')
                        FROM
                        (
                            SELECT A.USER_NM, A.MGZN_ID
                            FROM TB_MGZN_USER A
                            WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N'
                        ) A
                        LEFT JOIN TB_MGZN B ON B.MGZN_ID=A.MGZN_ID AND B.DEL_YN='N'
                        LEFT JOIN TB_REQ C ON C.REQ_NO=#{req_no} AND C.DEL_YN='N'
                )
                , #{user_id}
                , A2.USER_ID
                ,false
                ,'N'
                , 'magazine'
                , 'pickup'
            FROM 
                (
                    SELECT 
                        A.sendout_userid as USER_ID
                    FROM 
                        tb_new_req_sample as A
                    WHERE 
                        A.REQ_NO=#{req_no} AND A.SAMPLE_NO=#{sample_no} AND A.DEL_YN='N'
                ) as A2
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )        
        SELECT
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE 
        FROM 
            INSERT_FAIL A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </insert>

    <!-- 
        샘플요청 수령 확인
        /magazine/pickup-success-individual
    -->

    <select id="SELECT.PICKUP.TARGETLIST">
        SELECT 
            A.sendout_userid
        FROM 
            tb_new_req_sample A 
        WHERE 
            A.REQ_NO=#{req_no} AND A.pickup_yn = false AND A.DEL_YN='N'
            <if test="targetSampleList">
                AND A.sample_no IN ( 
                <foreach collection="targetSampleList" item="sno" separator=",">
                    #{sno}
                </foreach>
            ) 
            </if>
        GROUP BY A.sendout_userid
    </select>
    <select id="SELECT.RETURN.TARGETLIST">
        SELECT 
            A.return_userid
        FROM 
            tb_new_req_sample A 
        WHERE 
            A.REQ_NO=#{req_no} AND A.return_yn = false AND A.DEL_YN='N'
            <if test="targetSampleList">
            AND A.sample_no IN ( 
                <foreach collection="targetSampleList" item="sno" separator=",">
                    #{sno}
                </foreach>
            ) 
            </if>
        GROUP BY A.return_userid
    </select>

    <update id="UPDATE.PICKUP.SUCCESS.001">
        /* UPDATE.PICKUP.SUCCESS.001 */
        WITH T1 AS 
        (
            UPDATE TB_REQ
                SET REQ_STATUS_CD='RS0005'
            WHERE REQ_NO=#{req_no} AND TB_REQ.DEL_YN='N'
            RETURNING  #{req_no} as tmp_req_no
        )
        , T2 AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_HIST_NO
                , REQ_NO
                , REQ_HIST_DT
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
                , DEL_YN
            )
            VALUES
            (
                DEFAULT
                , #{req_no}
                , DEFAULT
                , 'RS0003'
                , 'RS0005'
                , DEFAULT
            )
            RETURNING REQ_HIST_NO
        )
        , T3 AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , RECV_CNFIRM_YN
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                'RHNS05' 
                ,(
                    SELECT
                        CONCAT('[수령 확인] ', B.MGZN_NM, ' ', A.USER_NM,'에서 알림이 왔습니다.')
                    FROM
                        ( SELECT A.USER_NM, A.MGZN_ID FROM TB_MGZN_USER A WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N' ) A
                        LEFT JOIN TB_MGZN B ON B.MGZN_ID=A.MGZN_ID AND B.DEL_YN='N'
                )
                ,(
                    SELECT
                        CONCAT(B.MGZN_NM, ' ', A.USER_NM,'에서 ', (C.PHOTOGRF_DT at time zone 'utc' at time zone 'kst')::DATE,' 촬영 건 샘플의 수령 확인 알림이 왔습니다.')
                    FROM
                        ( SELECT A.USER_NM, A.MGZN_ID FROM TB_MGZN_USER A WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N' ) A 
                        LEFT JOIN TB_MGZN B ON B.MGZN_ID=A.MGZN_ID AND B.DEL_YN='N'
                        LEFT JOIN TB_REQ C ON C.REQ_NO=#{req_no} AND C.DEL_YN='N'
                )
                , (SELECT REQ_HIST_NO FROM T2)
                 , #{user_id}
                , T.USER_ID                
                , false
                , 'magazine'
                , 'pickup'
            FROM 
                 (
                    SELECT 
                        A.sendout_userid as USER_ID
                    FROM 
                        tb_new_req_sample A 
                    WHERE 
                        A.REQ_NO=#{req_no} AND A.sendout_userid=#{sendout_userid} AND A.DEL_YN='N'
                        <if test="targetSampleList">
                            AND A.sample_no IN ( 
                            <foreach collection="targetSampleList" item="sno" separator=",">
                                #{sno}
                            </foreach>
                        ) 
                        </if>
                    GROUP BY A.sendout_userid
                    LIMIT 1
                ) T           
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , T4 AS
        (
            UPDATE 
                TB_NEW_REQ_SAMPLE 
            SET 
                PICKUP_YN=true,PICKUP_DT = CURRENT_TIMESTAMP 
            WHERE 
                REQ_NO=#{req_no} AND DEL_YN='N'
                <if test="targetSampleList">
                    AND sample_no IN ( 
                    <foreach collection="targetSampleList" item="sno" separator=",">
                        #{sno}
                    </foreach>
                    ) 
                </if>
        )
        SELECT
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE 
        FROM 
            T3 A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </update>

    <!-- 
        샘플요청 부분수령 확인
        /magazine/pickup-success-individual
    -->

    <update id="UPDATE.PICKUP.SUCCESS.INDIVIDUAL">
        /* UPDATE.PICKUP.SUCCESS.INDIVIDUAL */
        WITH UPDATE_TB_NEW_REQ_SAMPLE AS
        (
            UPDATE TB_NEW_REQ_SAMPLE
            SET PICKUP_YN=true, PICKUP_DT = CURRENT_TIMESTAMP
            WHERE REQ_NO=#{req_no} AND SAMPLE_NO=#{sample_no} AND DEL_YN='N'
        )
        , IS_FINISHED AS
        (
            SELECT EXISTS
            (
                SELECT 1
                FROM TB_NEW_REQ_SAMPLE
                WHERE REQ_NO=#{req_no} AND SAMPLE_NO != #{sample_no} AND PICKUP_YN=false AND DEL_YN='N'
            ) AS CHECKIT
        )
        , UPDATE_TB_REQ AS 
        (
            UPDATE TB_REQ AS A 
            SET REQ_STATUS_CD = 'RS0005'
            WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N' AND NOT (SELECT CHECKIT FROM IS_FINISHED)
        )
        , INSERT_TB_REQ_HIST AS
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO, MODIFI_BFE_REQ_STATUS_CD, MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT
                #{req_no}, 'RS0003', 'RS0005'
            WHERE NOT (SELECT CHECKIT FROM IS_FINISHED)
            RETURNING REQ_HIST_NO
        )
        , SELECT_USER AS
        (
            SELECT A.USER_NM, A.MGZN_ID FROM  TB_MGZN_USER A WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N'
        )
        , INSERT_TB_REQ_HIST_NOTIFI AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , RECV_CNFIRM_YN
                , SEND_MAN_USER_TYPE
                , NOTICE_TYPE
            )
            SELECT
                CASE 
                    WHEN NOT (SELECT CHECKIT FROM IS_FINISHED)
                        THEN 'RHNS05'
                    ELSE 'RHNS03' END
                , CASE 
                    WHEN NOT (SELECT CHECKIT FROM IS_FINISHED)
                        THEN CONCAT(
                            '[수령 확인] ', (
                                SELECT
                                    CONCAT(M.MGZN_NM, ' ', L.USER_NM)
                                FROM
                                    SELECT_USER L INNER JOIN TB_MGZN M ON M.MGZN_ID=L.MGZN_ID AND M.DEL_YN='N' )
                            , '에서 수령완료 알림이 왔습니다.'
                        )
                    ELSE CONCAT('[수령 확인] ', (
                        SELECT
                            CONCAT(M.MGZN_NM, ' ', L.USER_NM)
                        FROM
                            SELECT_USER L INNER JOIN TB_MGZN M ON M.MGZN_ID=L.MGZN_ID AND M.DEL_YN='N'
                    ), '에서 샘플수령 알림이 왔습니다.')
                    END
                , CASE 
                    WHEN NOT (SELECT CHECKIT FROM IS_FINISHED)
                        THEN CONCAT( 
                        (
                            SELECT
                                CONCAT(M.MGZN_NM, ' ', L.USER_NM,' 에서 ', (A.PHOTOGRF_DT at time zone 'utc' at time zone 'kst')::DATE,' 촬영 건 ')
                            FROM
                                SELECT_USER L INNER JOIN TB_MGZN M ON M.MGZN_ID=L.MGZN_ID AND M.DEL_YN='N'
                            ), '에서 모든 샘플을 수령했습니다.'
                        )
                    ELSE CONCAT( 
                        (
                            SELECT
                                CONCAT(M.MGZN_NM, ' ', L.USER_NM,' 에서 ', (A.PHOTOGRF_DT at time zone 'utc' at time zone 'kst')::DATE,' 촬영 건 ')
                            FROM
                                SELECT_USER L INNER JOIN TB_MGZN M ON M.MGZN_ID=L.MGZN_ID AND M.DEL_YN='N'
                        )
                        , (
                            SELECT L.SAMPLE_NM FROM TB_SAMPLE L WHERE L.SAMPLE_NO=#{sample_no} AND L.DEL_YN='N'
                        )
                        , '을(를) 수령했습니다.'
                    ) 
                END
                , 
                (
                    SELECT REQ_HIST_NO FROM INSERT_TB_REQ_HIST
                )
                , #{user_id}
                , A.USER_ID
                , false
                , 'magazine'
                , 'pickup'
            FROM 
            (
                SELECT 
                    A.sendout_userid as USER_ID, B.PHOTOGRF_DT
                FROM 
                    tb_new_req_sample A INNER JOIN tb_req as B on A.REQ_NO =  B.REQ_NO
                WHERE 
                    A.REQ_NO=#{req_no} AND A.SAMPLE_NO=#{sample_no} AND A.DEL_YN='N'
                LIMIT 1
            ) A            
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        SELECT
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE 
        FROM 
            INSERT_TB_REQ_HIST_NOTIFI A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </update>
    <!-- 
        샘플요청 상세조회
        /showroom-request/:req_no GET
        AND A.REQ_USER_ID=#{user_id} 맨아래 WHERE절에서 제거  by noh.sn 2021.11.16
        INNER JOIN TB_MGZN_USER H ON C.MGZN_ID=H.MGZN_ID AND H.USER_ID=#{user_id} AND H.DEL_YN='N'
    -->
    <select id="SELECT.REQUEST.004">
        SELECT 
            CASE 
                WHEN A.REQ_STATUS_CD='RS0001' AND A.PHOTOGRF_DT> (NOW() AT TIME ZONE 'Asia/Seoul') 
                    THEN true
                ELSE false
            END AS EDITABLE
            , B.USER_NM AS REQ_SEND_USERNAME
            , C.MGZN_NM
            , D.BRAND_NM
            , D.BRAND_ID
            , A.REQ_USER_ID
            , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1) || '/' || D.BRAND_LOGO_URL_ADRES AS BRAND_LOGO_URL_ADRES
            , E.USER_NM AS CONTACT_USERNAME
            , E.USER_ID AS CONTACT_USER_ID
            , E.PHONE_NO AS CONTACT_PHONE_NO
            , ((FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_PREARNGE_BEGIN_DT ))::BIGINT-FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT)/3600)::TEXT AS SHOOTING_START_TIME
            , ((FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_PREARNGE_END_DT ))::BIGINT-FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT)/3600)::TEXT AS SHOOTING_END_TIME
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_DT ))::BIGINT AS SHOOTING_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS PICKUP_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS RETURNING_DATE
            , F.DLVY_ADRES_NM
            , F.ADRES_DETAIL
            , A.DLVY_ATENT_MATTER
            , A.PHOTOGRF_CONCEPT
            , A.PHOTOGRF_MODL_SE_CD
            , A.MODEL_LIST
            , A.CELEB_LIST
            , A.OWN_PAID_PICTORIAL_YN
            , A.OWN_PAID_PICTORIAL_CONTENT
            , A.OTHER_PAID_PICTORIAL_YN
            , A.OTHER_PAID_PICTORIAL_CONTENT
            , A.LOC_YN
            , A.LOC_VALUE
            , A.TODAY_CONNECT_HOPE_POSBL_YN AS TODAY_CONNECT
            , A.PAGE_CNT
            , A.ETC_BRAND_INFO
            , A.req_status_cd
            , A.ADD_REQ_CNTENT AS MESSAGE
            , A.DLVY_ADRES_NO
            , Z.reservation_list
        FROM 
            TB_REQ A  INNER JOIN TB_MGZN_USER B ON B.USER_ID=A.REQ_USER_ID AND B.DEL_YN='N'
            INNER JOIN TB_MGZN C ON B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
            INNER JOIN TB_BRAND D ON A.BRAND_ID=D.BRAND_ID AND D.DEL_YN='N'
            INNER JOIN TB_MGZN_USER E ON A.CONTACT_USER_ID=E.USER_ID AND E.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES F ON A.DLVY_ADRES_NO=F.DLVY_ADRES_NO AND F.DEL_YN='N'
            INNER JOIN TB_COMM_CD G ON A.PHOTOGRF_MODL_SE_CD=G.CD_ID AND G.CD_TYP_ID='CT00000001'            
            LEFT JOIN (
                SELECT 
                    trs.req_no,
                    JSONB_AGG(JSONB_BUILD_OBJECT(
                        'photogrf_dt',(tr.photogrf_prearnge_begin_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE,
                        'duty_recpt_dt',(tr.duty_recpt_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE,
                        'return_prearnge_dt',(tr.return_prearnge_dt AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE
                    )) as reservation_list
                FROM 
                    tb_req_showroom trs 
                    INNER JOIN tb_req as tr on trs.req_no = tr.req_no and tr.del_yn  = 'N'
                WHERE 
                    tr.req_no = #{req_no} and trs.req_status_cd not IN ('RS0004') 
                    and trs.del_yn = 'N' AND tr.photogrf_prearnge_begin_dt > (NOW() AT TIME ZONE 'Asia/Seoul') 
                group by trs.req_no
            ) Z ON  A.REQ_NO = Z.REQ_NO
        WHERE 1=1            
            AND A.REQ_NO=#{req_no}
            AND A.DEL_YN='N'
    </select>

    <!-- 
        샘플요청 상세조회
        /showroom-request/:req_no GET
    -->
    <select id="SELECT.REQUEST.005">
        SELECT
            distinct on (A.SHOWROOM_NO) A.SHOWROOM_NO 
            , CASE WHEN A.REQ_STATUS_CD='RS0003' THEN 'selected' WHEN A.REQ_STATUS_CD='RS0004' THEN 'rejected' ELSE 'undecided' END AS SHOWROOM_STATUS
            , B.SHOWROOM_NM
            , B2.SHOWROOM_NO as REPLACEMENT_SHOWROOM_NO            
            , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', D.IMG_URL_ADRES) AS IMAGE_URL
        FROM 
        (
            SELECT A.SHOWROOM_NO, A.REQ_STATUS_CD
            FROM TB_REQ_SHOWROOM A
            WHERE A.REQ_NO=#{req_no} AND A.DEL_YN='N'
        ) A  INNER JOIN TB_SHOWROOM B ON A.SHOWROOM_NO=B.SHOWROOM_NO AND B.DEL_YN='N'
        LEFT JOIN TB_SHOWROOM B2 ON B.REPLACEMENT_SHOWROOM=B2.SHOWROOM_NO AND B.SHOW_YN = 'Y' AND B.DEL_YN = 'N' 
        INNER JOIN TB_SHOWROOM_SAMPLE C ON B.SHOWROOM_NO=C.SHOWROOM_NO AND C.DEL_YN='N'
        INNER JOIN TB_SAMPLE_IMG D ON C.SAMPLE_NO=D.SAMPLE_NO AND D.DEL_YN='N' and D.MAIN_YN = TRUE
    </select>

    <!-- 
        샘플요청 수정
        /showroom-request-update POST
        INSERT INTO TB_DLVY_ADRES
            (
                DLVY_ADRES_NO
                , USER_SE_CD
                , ADRES_REG_DT
                , DLVY_ADRES_NM
                , ADRES_DETAIL
                , USER_NO
                , DEL_YN
            )
            VALUES
            (
                DEFAULT
                , 'US0001'
                , DEFAULT
                , #{dlvy_adres_nm}
                , #{adres_detail}
                , (
                    SELECT MGZN_USER_NO FROM TB_MGZN_USER
                    WHERE USER_ID=#{user_id} AND DEL_YN='N'
                    LIMIT 1
                )
                , 'N'
            )
            RETURNING DLVY_ADRES_NO
    -->
    <update id="UPDATE.REQUEST.001">
        WITH
        TB_DLVY_ADRES_ADD AS
        (
            <choose>                
                <when test="dlvy_adres_no == '0'">
                    INSERT INTO TB_DLVY_ADRES
                    (
                        DLVY_ADRES_NO
                        , USER_SE_CD
                        , ADRES_REG_DT
                        , DLVY_ADRES_NM
                        , ADRES_DETAIL
                        , USER_NO
                        , DEL_YN
                    )
                    VALUES
                    (
                        DEFAULT
                        , 'US0001'
                        , DEFAULT
                        , #{dlvy_adres_nm}
                        , #{adres_detail}
                        , (
                            SELECT MGZN_USER_NO FROM TB_MGZN_USER  WHERE USER_ID=#{user_id} AND DEL_YN='N' LIMIT 1
                        )
                        , 'N'
                    )
                    RETURNING DLVY_ADRES_NO
                </when>
                <when test="dlvy_adres_no != '0'">
                    UPDATE TB_DLVY_ADRES
                    SET
                        ADRES_DETAIL =  #{adres_detail}, updt_dt =  CURRENT_TIMESTAMP
                    WHERE DLVY_ADRES_NO = #{dlvy_adres_no} 
                    RETURNING #{dlvy_adres_no} as DLVY_ADRES_NO
                </when>
                <otherwise>
                     RETURNING #{dlvy_adres_no} as DLVY_ADRES_NO
                </otherwise>
            </choose>
        )
        , USER_VERIFICATION AS
        (
            SELECT EXISTS 
            (
                SELECT 1
                FROM 
                (
                    SELECT A.REQ_USER_ID
                    FROM TB_REQ A
                    WHERE A.REQ_NO=#{req_no} AND A.REQ_STATUS_CD='RS0001' AND A.PHOTOGRF_DT> (NOW() AT TIME ZONE 'Asia/Seoul')  AND A.DEL_YN='N'
                ) A
                INNER JOIN TB_MGZN_USER B ON A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
                INNER JOIN TB_MGZN_USER C ON C.USER_ID=#{user_id} AND B.MGZN_ID=C.MGZN_ID AND C.DEL_YN='N'
            ) AS TF
        )
        , UPDATE_TB_REQ AS 
        (
            UPDATE TB_REQ
            SET
                DUTY_RECPT_DT=TO_TIMESTAMP(#{duty_recpt_dt})
                , PHOTOGRF_DT=TO_TIMESTAMP(#{photogrf_dt})
                , RETURN_PREARNGE_DT=TO_TIMESTAMP(#{return_prearnge_dt})
                , PHOTOGRF_CNTENT=#{photogrf_cntent}
                , OWN_PAID_PICTORIAL_YN=#{own_paid_pictorial_yn}
                , OWN_PAID_PICTORIAL_CONTENT=#{own_paid_pictorial_content}
                , OTHER_PAID_PICTORIAL_YN=#{other_paid_pictorial_yn}
                , OTHER_PAID_PICTORIAL_CONTENT=#{other_paid_pictorial_content}
                , PHOTOGRF_CONCEPT=#{photogrf_concept}
                , PHOTOGRF_PREARNGE_BEGIN_DT=TO_TIMESTAMP(#{photogrf_dt})+ #{begin_dt}*interval '1 hour'
                , PHOTOGRF_PREARNGE_END_DT=TO_TIMESTAMP(#{photogrf_dt})+#{end_dt}*interval '1 hour'
                , PHOTOGRF_MODL_SE_CD=#{modl_se_cd}
                , MODEL_LIST=ARRAY[<foreach collection="model_list" item="ID" separator=",">
                        #{ID}
                    </foreach>]::TEXT[]
                , CELEB_LIST=ARRAY[<foreach collection="celeb_list" item="ID" separator=",">
                        #{ID}
                    </foreach>]::TEXT[]
                , PCHRG_PICALBM_YN=#{picalbm_yn}
                , PAGE_CNT=#{page_cnt}
                , ETC_BRAND_INFO=#{etc_brand}
                , TODAY_CONNECT_HOPE_POSBL_YN=#{today_connect}
                , ADD_REQ_CNTENT=#{add_req_cntent}
                , DLVY_ADRES_NO=(SELECT DLVY_ADRES_NO FROM TB_DLVY_ADRES_ADD)
                , DLVY_ATENT_MATTER=#{dlvy_atent_matter}
                , CONTACT_USER_ID=#{contact_user_id}
                , REQ_USER_ID=#{req_user_id}
                , LOC_YN=#{loc_yn}
                , LOC_VALUE=#{loc_value}
            WHERE 1=1
                AND TB_REQ.DEL_YN='N'
                AND TB_REQ.REQ_NO=#{req_no}
                AND (SELECT TF FROM USER_VERIFICATION)=true
        )
        , UPDATE_TB_REQ_SHOWROOM AS
        (
            UPDATE TB_REQ_SHOWROOM
            SET
                DEL_YN='Y'
            WHERE 1=1
                AND REQ_NO=#{req_no}
                AND SHOWROOM_NO NOT IN (
                    <foreach collection="showroom_list" item="ID" separator=",">
                        #{ID}
                    </foreach>
                )
                AND (SELECT TF FROM USER_VERIFICATION)=true
        )
        UPDATE TB_NEW_REQ_SAMPLE
        SET DEL_YN='Y', pickup_userid = #{req_user_id}
        WHERE 1=1
            AND REQ_NO=#{req_no}
            AND SAMPLE_NO NOT IN
            (
                SELECT SAMPLE_NO
                FROM TB_SHOWROOM_SAMPLE
                WHERE 1=1
                    AND DEL_YN='N'
                    AND SHOWROOM_NO NOT IN
                    (
                        <foreach collection="showroom_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
            )
            AND (SELECT TF FROM USER_VERIFICATION)=true
    </update>

    <!-- 
        샘플요청 삭제
        /showroom-request-delete POST
    -->
    <delete id="DELETE.REQUEST.001">
        WITH USER_ID_LIST AS
        (
            SELECT
                B.USER_ID
            FROM
            (
                SELECT A.MGZN_ID
                FROM TB_MGZN_USER A
                WHERE 1=1
                    AND A.USER_ID=#{user_id}
                    AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_MGZN_USER B
            ON 1=1
                AND A.MGZN_ID=B.MGZN_ID
                AND B.DEL_YN='N'
        )
        , WHETHER_EXISTS AS
        (
            SELECT EXISTS 
            (
                SELECT 1
                FROM TB_REQ
                WHERE 1=1
                    AND REQ_NO IN
                    (
                        <foreach collection="req_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                    AND DEL_YN='N'
                    AND REQ_STATUS_CD='RS0001'
                    AND REQ_USER_ID IN (SELECT USER_ID FROM USER_ID_LIST)
            ) AS IF_EXIST
        )
        , UPDATE_TB_REQ AS
        (
            UPDATE TB_REQ
            SET
                DEL_YN='Y'
            WHERE 1=1
                AND TB_REQ.DEL_YN='N'
                AND TB_REQ.REQ_USER_ID IN (SELECT USER_ID FROM USER_ID_LIST)
                AND TB_REQ.REQ_NO IN 
                (
                    <foreach collection="req_list" item="ID" separator=",">
                        #{ID}
                    </foreach>
                )
                AND TB_REQ.REQ_STATUS_CD='RS0001'
        )
        , UPDATE_TB_REQ_SHOWROOM AS
        (
            UPDATE TB_REQ_SHOWROOM
            SET
                DEL_YN='Y'
            WHERE 1=1
                AND REQ_NO IN
                (
                    <foreach collection="req_list" item="ID" separator=",">
                        #{ID}
                    </foreach>
                )
                AND (SELECT IF_EXIST FROM WHETHER_EXISTS)
        )
        , UPDATE_TB_NEW_REQ_SAMPLE AS
        (
            UPDATE TB_NEW_REQ_SAMPLE
            SET DEL_YN='Y'
            WHERE 1=1
                AND REQ_NO IN
                    (
                        <foreach collection="req_list" item="ID" separator=",">
                            #{ID}
                        </foreach>
                    )
                    AND DEL_YN='N'
                    AND EXISTS 
                    (
                        SELECT 1
                        FROM TB_REQ
                        WHERE 1=1
                            AND REQ_NO IN
                            (
                                <foreach collection="req_list" item="ID" separator=",">
                                    #{ID}
                                </foreach>
                            )
                            AND DEL_YN='N'
                            AND REQ_STATUS_CD='RS0001'
                            AND REQ_USER_ID=#{user_id}
                    )
        )
        UPDATE TB_NEW_REQ_SAMPLE
        SET DEL_YN='Y'
        WHERE 1=1
            AND REQ_NO IN
            (
                <foreach collection="req_list" item="ID" separator=",">
                    #{ID}
                </foreach>
            )
            AND DEL_YN='N'
            AND (SELECT IF_EXIST FROM WHETHER_EXISTS)
    </delete>

    <!-- 
        사용자 홈페이지
        /home GET
        2021.11.22 고객사 요청으로 회사조직이 아닌 등록주와 연락자만 노출되도록 
    -->
    <select id="SELECT.HOME.001">
        SELECT
            A.REQ_NO
            , FLOOR(DATE_PART('epoch'::TEXT, A.BRAND_CNFIRM_DT ))::BIGINT AS BRAND_CNFIRM_DT
            , B.BRAND_NM
            , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', B.BRAND_LOGO_URL_ADRES) AS BRAND_LOGO_URL_ADRES
            , D.USER_NM AS EDITOR_NM
            , 
            (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=D.MGZN_POS_CD LIMIT 1) AS EDITOR_POSI
            , (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=C.BRAND_POS_CD LIMIT 1) AS BRAND_POSI
            , COUNT(A.REQ_NO) OVER() AS TOTAL_COUNT
        FROM
            TB_REQ A INNER JOIN TB_MGZN_USER D ON D.user_ID=A.req_user_id AND D.DEL_YN='N'
            INNER JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
            INNER JOIN TB_BRAND_USER C ON C.BRAND_USER_NO=CNFIRM_BRAND_USER_NO AND C.DEL_YN='N'
        WHERE 
            A.REQ_STATUS_CD='RS0003' AND A.DEL_YN='N'
            AND ( A.req_user_id = #{user_id} or  A.contact_user_id  = #{user_id} )
    </select>

    <!-- 
        사용자 홈페이지
        /home GET
    -->
    <select id="SELECT.HOME.002">
    SELECT
        JSONB_AGG(JSONB_BUILD_OBJECT(
            'req_no', A.REQ_NO
            ,'showroom_no',A.showroom_no
            , 'req_user_type', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN 'MAGAZINE' ELSE 'STYLIST' END
            , 'req_user_nm', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN B.USER_NM ELSE E.USER_NM END
            , 'req_user_position', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN C.CD_NM ELSE F.CD_NM END
            , 'contact_user_nm', CASE WHEN A.REQ_USER_SE_CD = 'RUS001' THEN G.USER_NM ELSE H.USER_NM END
            , 'mgzn_nm', CASE WHEN A.target_id_type = 'RUS001' THEN D1.MGZN_NM WHEN A.target_id_type = 'RUS002' THEN D2.MGZN_NM ELSE '' END
            , 'mgzn_logo_adres', CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', CASE WHEN A.target_id_type = 'RUS001' THEN D1.MGZN_LOGO_URL_ADRES WHEN A.target_id_type = 'RUS002' THEN D2.MGZN_LOGO_URL_ADRES ELSE '' END )
            , 'mgzn_color', CASE WHEN A.target_id_type = 'RUS001' THEN D1.COLOR WHEN A.target_id_type = 'RUS002' THEN D2.COLOR ELSE '' END
            , 'stylist_company_name', E.POSI_COMPY_NM
            , 'brand_nm', K.BRAND_NM                
            , 'brand_logo_adres', CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', K.BRAND_LOGO_URL_ADRES)
            , 'brand_color', K.COLOR
            , 'target_user_nm', CASE WHEN A.target_id_type = 'RUS001' THEN G.USER_NM WHEN A.target_id_type = 'RUS002' THEN H.USER_NM ELSE I.USER_NM END
            , 'target_user_position', CASE WHEN A.target_id_type = 'RUS001' THEN C3.CD_NM WHEN A.target_id_type = 'RUS002' THEN C4.CD_NM ELSE C2.CD_NM END
            ,'target_id_type',A.target_id_type
        ) ORDER BY A.showroom_no) AS EACH_LIST
        ,A.showroom_no 
        ,A.date
        , COUNT(A.REQ_NO) AS EACH_COUNT
    FROM
        (
        SELECT
            A.REQ_NO
            , A.REQ_USER_SE_CD
            , A.REQ_USER_ID
            <if test="type=='SENDOUT'">
            , (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.sendout_dt ))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE date
            </if>
            <if test="type=='RETURN'">
            , (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.return_dt ))::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE date
            </if>
            , A.CONTACT_USER_ID
            , A.CNFIRM_BRAND_USER_NO
            , A.BRAND_ID
            , TR.showroom_no 
            <if test="type=='SENDOUT'">
            ,TR.sendout_userid as target_id ,TR.sendout_userid_type as target_id_type
            </if>
            <if test="type=='RETURN'">
            ,TR.return_userid as target_id ,TR.return_userid_type as target_id_type
            </if>
        FROM 
            TB_NEW_REQ_SAMPLE AS TR 
            INNER JOIN TB_REQ A ON TR.REQ_NO = A.REQ_NO
        WHERE 1=1
            AND TR.DEL_YN = 'N'
            <if test="brand_id">
            AND A.BRAND_ID = #{brand_id}
            </if>
            <if test="mgzn_id">
            AND A.REQ_USER_ID IN (SELECT USER_ID FROM TB_MGZN_USER WHERE MGZN_ID = #{mgzn_id})
            </if>
            AND A.DEL_YN = 'N'
            <if test="type == 'SENDOUT' and date">
            AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.sendout_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
            AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005','RS0006')
            </if>
            <if test="type == 'RETURN' and date">
            AND (TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, TR.return_dt ))) AT TIME ZONE 'Asia/Seoul')::DATE = (TO_TIMESTAMP(#{date}::BIGINT) AT TIME ZONE 'Asia/Seoul')::DATE
            AND A.REQ_STATUS_CD IN ('RS0003', 'RS0005','RS0006')
            </if>
            ORDER BY A.REQ_NO ASC
        ) A
        INNER JOIN TB_BRAND K ON A.BRAND_ID = K.BRAND_ID
        LEFT JOIN TB_MGZN_USER B ON A.REQ_USER_SE_CD = 'RUS001' AND A.REQ_USER_ID = B.USER_ID AND B.DEL_YN = 'N'
        LEFT JOIN TB_COMM_CD C ON C.CD_TYP_ID = 'CT00000002' AND B.mgzn_pos_cd = C.CD_ID                    
        LEFT JOIN TB_STYLE_LIST_USER E ON A.REQ_USER_SE_CD = 'RUS002' AND A.REQ_USER_ID = E.USER_ID AND E.DEL_YN = 'N'
        LEFT JOIN TB_COMM_CD F ON F.CD_TYP_ID = 'CT00000019' AND E.STYLE_LIST_POS_CD = F.CD_ID
        LEFT JOIN TB_MGZN_USER G ON A.target_id_type = 'RUS001' AND A.target_id = G.USER_ID 
        LEFT JOIN TB_MGZN D1 ON G.MGZN_ID = D1.MGZN_ID AND D1.DEL_YN = 'N'
        LEFT JOIN TB_STYLE_LIST_USER H ON A.target_id_type = 'RUS002' AND A.target_id = H.USER_ID
        LEFT JOIN TB_MGZN D2 ON H.MGZN_ID = D2.MGZN_ID AND D2.DEL_YN = 'N'
        LEFT JOIN TB_BRAND_USER I ON A.target_id = I .USER_ID
        LEFT JOIN TB_COMM_CD C2 ON C2.CD_TYP_ID = 'CT00000012' AND I.brand_pos_cd = C2.CD_ID
        LEFT JOIN TB_COMM_CD C3 ON C3.CD_TYP_ID = 'CT00000002' AND G.MGZN_POS_CD = C3.CD_ID
        LEFT JOIN TB_COMM_CD C4 ON C4.CD_TYP_ID = 'CT00000019' AND H.STYLE_LIST_POS_CD = C4.CD_ID
    GROUP BY A.DATE,A.showroom_no 
    ORDER BY A.DATE,A.showroom_no 
    </select>

    <select id="SELECT.HOME.002_OLD">
        SELECT
            A.REQ_NO
            , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS DATE
            , B.BRAND_NM
            , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', B.BRAND_LOGO_URL_ADRES) AS BRAND_LOGO_URL_ADRES
            , D.USER_NM AS EDITOR_NM
            , (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=D.MGZN_POS_CD LIMIT 1) AS EDITOR_POSI
            , (SELECT CD_NM FROM TB_COMM_CD WHERE CD_ID=C.BRAND_POS_CD LIMIT 1) AS BRAND_POSI
            , A.TOTAL_COUNT
        FROM
        (
            SELECT 
                A.REQ_NO
                , A.DUTY_RECPT_DT
                , A.BRAND_ID
                , A.CNFIRM_BRAND_USER_NO
                , A.REQ_USER_ID
                , COUNT(1) OVER() AS TOTAL_COUNT 
            FROM TB_REQ A 
            WHERE A.DEL_YN='N'AND A.REQ_STATUS_CD='RS0003'
                AND A.REQ_USER_ID IN
                (
                    SELECT USER_ID
                    FROM TB_MGZN_USER
                    WHERE MGZN_ID = ( SELECT MGZN_ID FROM TB_MGZN_USER WHERE USER_ID=#{user_id}) AND TB_MGZN_USER.DEL_YN='N'
                )
                AND TO_CHAR(TO_TIMESTAMP(FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT))::BIGINT) AT TIME ZONE 'Asia/Seoul', 'DD') = TO_CHAR(TO_TIMESTAMP(#{date}::BIGINT)AT TIME ZONE 'Asia/Seoul', 'DD' ) 
        ) A
        LEFT JOIN TB_BRAND B ON A.BRAND_ID=B.BRAND_ID AND B.DEL_YN='N'
        LEFT JOIN TB_BRAND_USER C ON C.BRAND_USER_NO=A.CNFIRM_BRAND_USER_NO AND C.DEL_YN='N'
        LEFT JOIN TB_MGZN_USER D ON A.REQ_USER_ID=D.USER_ID AND D.DEL_YN='N'
    </select>

    <!-- 
        사용자 홈페이지
        /home GET
    -->
    <select id="SELECT.HOME.003">
        /* SELECT.HOME.003 */
        SELECT 
            TO_CHAR(i, 'YYYY') AS YEAR
            , TO_CHAR(i, 'MM') AS MONTH
            , COUNT(REQ_NO)
        FROM GENERATE_SERIES(NOW() - INTERVAL '1 year', NOW(), '1 month') AS I
        LEFT JOIN TB_REQ B
        ON 1=1
            AND TO_CHAR(I, 'YYYY') = TO_CHAR(B.INPUT_DT, 'YYYY') 
            AND TO_CHAR(I, 'MM') = TO_CHAR(B.INPUT_DT, 'MM') 
            AND ( B.req_user_id = #{user_id} OR  B.contact_user_id = #{user_id} )            
            AND 
            (
                B.REQ_STATUS_CD='RS0005'
                OR B.REQ_STATUS_CD='RS0006'
            )
        WHERE 1=1
             AND TO_CHAR(I,'YYYYMM')>=TO_CHAR((SELECT INPUT_DT FROM TB_MGZN WHERE MGZN_ID=#{mgzn_id} AND DEL_YN='N' LIMIT 1),'YYYYMM')
        GROUP BY YEAR,MONTH
        ORDER by YEAR,MONTH
    </select>

    <!-- 
        사용자 홈페이지
        /home GET
    -->
    <select id="SELECT.HOME.004">
        /* SELECT.HOME.004 */
        SELECT 
            TO_CHAR(A, 'YYYY') AS YEAR, TO_CHAR(A, 'MM') AS MONTH, COUNT(B.REQ_NO)
        FROM 
            GENERATE_SERIES(NOW() - INTERVAL '1 year', NOW(), '1 month') AS A
            LEFT JOIN TB_REQ B ON TO_CHAR(A, 'YYYY') = TO_CHAR(B.DUTY_RECPT_DT, 'YYYY')
            AND TO_CHAR(A, 'MM') = TO_CHAR(B.DUTY_RECPT_DT, 'MM') 
            AND ( B.req_user_id = #{user_id} OR  B.contact_user_id = #{user_id} )
        WHERE 1=1
             AND TO_CHAR(A,'YYYYMM')>=TO_CHAR((SELECT INPUT_DT FROM TB_MGZN WHERE MGZN_ID=#{mgzn_id} AND DEL_YN='N' LIMIT 1),'YYYYMM')
        GROUP BY YEAR,MONTH
        ORDER by YEAR,MONTH
    </select>

    <select id="SELECT.HOME.005">
        /* SELECT.HOME.005 */
        SELECT 
            D.BRAND_NM,
            C.BRAND_ID,
            COUNT(D.BRAND_ID)
        FROM 
        (
            SELECT 
                A.MGZN_ID
            FROM TB_MGZN_USER A
            WHERE 1=1
                AND A.USER_ID=#{user_id}
                AND A.DEL_YN='N'
        ) A
        INNER JOIN TB_MGZN_USER B
        ON 1=1
            AND A.MGZN_ID=B.MGZN_ID
            AND B.DEL_YN='N'
        INNER JOIN TB_REQ C
        ON 1=1
            AND B.USER_ID=C.REQ_USER_ID
            AND C.DEL_YN='N'
            AND INTERVAL '1 year'>NOW()-C.RETURN_PREARNGE_DT
        INNER JOIN TB_BRAND D
        ON 1=1
            AND C.BRAND_ID=D.BRAND_ID
            AND D.DEL_YN='N'
        GROUP BY D.BRAND_NM,C.BRAND_ID
        ORDER BY D.BRAND_NM
    </select>

    <!--
        쇼룸/샘플 검색
        /brand/search GET
    -->
    <select id="SELECT.SEARCH.SHOWROOM">
        /* SELECT.SEARCH.SHOWROOM */
        SELECT
            T2.SAMPLE_NM
            , T2.TITLE
            , T2.SHOWROOM_NO
            , T2.SUBTITLE
            , T2.IMG_URL_ADRES
            , T2.REG_DT
            , T2.BRAND_NM
            , T2.BRAND_ID
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM 
        (   SELECT DISTINCT ON (T.SHOWROOM_NM)
                T.SHOWROOM_NO
                , T.SAMPLE_NM
                , T.SHOWROOM_NM AS TITLE
                , T.SUBTITLE
                , T.IMG_URL_ADRES
                , T.REG_DT
                , T.BRAND_NM
                , T.BRAND_ID
            FROM
            (
                SELECT
                    A.SHOWROOM_NO
                    , A.SHOWROOM_NM
                    , A.BRAND_ID
                    , C.SAMPLE_NO
                    , C.SAMPLE_NM
                    , E.BRAND_NM
                    , FLOOR(DATE_PART('EPOCH'::TEXT, C.SAMPLE_REG_DT ))::BIGINT AS REG_DT
                    , CONCAT 
                    ( 
                        (
                            SELECT
                                FILE_ORIGIN_PATH
                            FROM
                                SYSTEM_INFO
                            LIMIT 1
                        )
                        , '/'
                        , D.IMG_URL_ADRES 
                    ) AS IMG_URL_ADRES
                    , D.IMG_URL_ADRES AS IMG_PATH
                    , C.PRICE
                    , C.SKU
                    , C.CAPTION_ENGLISH 
                    , C.CAPTION_KOREAN 
                    , C.ETC_MATTER 
                    , A.SEASON_YEAR 
                    , CONCAT 
                    (
                        A.SEASON_YEAR
                        , ' '
                        , F.CD_SIMPLE_NM
                    ) AS SUBTITLE
                    , 'SAMPLE' AS SEARCH_TYPE
                FROM
                (
                    SELECT
                        A.SHOWROOM_NO
                        , A.SEASON_YEAR
                        , A.BRAND_ID
                        , A.SEASON_SE_CD
                        , A.SHOWROOM_NM
                    FROM
                        TB_SHOWROOM A
                    WHERE
                        1 = 1
                        AND A.DEL_YN = 'N'
                ) A
                INNER JOIN TB_SHOWROOM_SAMPLE B ON
                    1 = 1
                    AND A.SHOWROOM_NO = B.SHOWROOM_NO
                    AND B.DEL_YN = 'N'
                INNER JOIN TB_SAMPLE C ON
                    1 = 1
                    AND B.SAMPLE_NO = C.SAMPLE_NO
                    AND C.DEL_YN = 'N'
                INNER JOIN TB_SAMPLE_IMG D ON
                    1 = 1
                    AND C.SAMPLE_NO = D.SAMPLE_NO
                    AND D.MAIN_YN = TRUE
                INNER JOIN TB_BRAND E ON
                    1 = 1
                    AND A.BRAND_ID = E.BRAND_ID
                    AND E.DEL_YN = 'N'
                INNER JOIN TB_COMM_CD F ON
                    1 = 1
                    AND A.SEASON_SE_CD = F.CD_ID
                    AND F.DEL_YN = 'N'
            ) T 
            WHERE
                1 = 1
                AND 
                ( 
                    T.SHOWROOM_NM ILIKE '%' || #{search_text} || '%' 
                    OR T.SAMPLE_NM ILIKE '%' || #{search_text} || '%' 
                    OR T.PRICE::TEXT=#{search_text}
                    OR T.SKU ILIKE '%' || #{search_text} || '%' 
                    OR T.CAPTION_ENGLISH ILIKE '%' || #{search_text} || '%'
                    OR T.CAPTION_KOREAN ILIKE '%' || #{search_text} || '%' 
                    OR T.ETC_MATTER ILIKE '%' || #{search_text} || '%'
                    OR T.BRAND_NM ILIKE '%' || #{search_text} || '%'
                    OR T.SEASON_YEAR::TEXT=#{search_text}
                )
        ) T2
        ORDER BY T2.TITLE ASC
        <if test="limit">
            OFFSET ${offset} 
            LIMIT ${limit}
        </if>
    </select>

    <!--
        샘플요청 검색
        /brand/search GET
    -->

    <select id="SELECT.SEARCH.REQ">
        /* SELECT.SEARCH.REQ */
        SELECT
            T.REQ_NO
            , T.CONTACT_USER_NM
            , T.REQ_DT
            , T.SHOWROOM_NM
            , T.IMG_URL_ADRES
            , T.BRAND_NM
            , T.BRAND_ID
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT DISTINCT ON (A.REQ_NO,B.SHOWROOM_NO)
                A.REQ_NO
                , FLOOR(DATE_PART('epoch'::TEXT, A.REQ_DT ))::BIGINT AS REQ_DT
                , B.SHOWROOM_NO
                , E.SHOWROOM_NM
                , CONCAT
                    (
                        (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                        , D.IMG_URL_ADRES
                    ) AS IMG_URL_ADRES
                , D.IMG_URL_ADRES AS IMG_PATH
                , F.USER_NM
                , I.USER_NM AS CONTACT_USER_NM
                , J.DLVY_ADRES_NM
                , A.DLVY_ATENT_MATTER
                , A.PHOTOGRF_CONCEPT
                , A.INPUT_DT
                , K.BRAND_NM
                , K.BRAND_ID
            FROM
            (
                SELECT
                    A.REQ_NO
                    , A.REQ_USER_ID
                    , A.REQ_DT
                    , A.REQ_USER_SE_CD
                    , A.CONTACT_USER_ID
                    , A.DLVY_ADRES_NO
                    , A.DLVY_ATENT_MATTER
                    , A.PHOTOGRF_CONCEPT
                    , A.INPUT_DT
                    , A.BRAND_ID
                FROM TB_REQ A
                WHERE 1=1
                    AND (A.REQ_STATUS_CD='RS0001' OR A.REQ_STATUS_CD='RS0002')
                    AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_REQ_SHOWROOM B
            ON 1=1
                AND A.REQ_NO=B.REQ_NO
                AND B.DEL_YN='N'
            INNER JOIN TB_SHOWROOM_SAMPLE C
            ON 1=1
                AND B.SHOWROOM_NO=C.SHOWROOM_NO
                AND C.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG D
            ON 1=1
                AND C.SAMPLE_NO=D.SAMPLE_NO
                AND D.DEL_YN='N'
                AND D.MAIN_YN=true
            INNER JOIN TB_SHOWROOM E
            ON 1=1
                AND B.SHOWROOM_NO=E.SHOWROOM_NO
                AND E.DEL_YN='N'
            INNER JOIN TB_MGZN_USER F
            ON 1=1
                AND A.REQ_USER_ID=F.USER_ID
                AND F.DEL_YN='N'
                AND F.MGZN_ID=#{mgzn_id}
            LEFT JOIN TB_MGZN_USER I
            ON 1=1
                AND A.CONTACT_USER_ID=F.USER_ID
                AND I.DEL_YN='N'
            LEFT JOIN TB_DLVY_ADRES J
            ON 1=1
                AND A.DLVY_ADRES_NO=J.DLVY_ADRES_NO
                AND J.DEL_YN='N'
            INNER JOIN TB_BRAND K
            ON 1=1
                AND A.BRAND_ID=K.BRAND_ID
                AND K.DEL_YN='N'
            ORDER BY A.REQ_NO,B.SHOWROOM_NO
        ) T
        WHERE 1=1
            AND
            (
                T.USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.BRAND_NM ILIKE '%' || #{search_text} || '%'
                OR T.CONTACT_USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.SHOWROOM_NM ILIKE '%' || #{search_text} || '%'
                OR T.DLVY_ADRES_NM ILIKE '%' || #{search_text} || '%'
                OR T.DLVY_ATENT_MATTER ILIKE '%' || #{search_text} || '%'
                OR T.PHOTOGRF_CONCEPT ILIKE '%' || #{search_text} || '%'
                OR (T.INPUT_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
            )
        ORDER BY REQ_DT DESC   
        <if test="limit">
            OFFSET ${offset} 
            LIMIT ${limit}
        </if>
    </select>

    <!--
        pickup 검색
        /brand/search/sendout GET
    -->

    <select id="SELECT.SEARCH.PICKUP">
        /* SELECT.SEARCH.PICKUP */
        SELECT 
            T.REQ_NO
            , T.IMG_URL_ADRES
            , T.CONTACT_USER_NM
            , T.RECPT_DT
            , T.BRAND_ID
            , T.BRAND_NM
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT
                A.REQ_NO
                , A.DUTY_RECPT_DT
                , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS RECPT_DT
                , A.RETURN_PREARNGE_DT
                , B.USER_NM
                , CONCAT
                    (
                        (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                        , I.BRAND_LOGO_URL_ADRES
                    ) AS IMG_URL_ADRES
                , G.USER_NM AS CONTACT_USER_NM
                , F.SHOWROOM_NM
                , H.DLVY_ADRES_NM
                , I.BRAND_ID
                , I.BRAND_NM
            FROM 
            (
                SELECT
                    A.REQ_NO
                    , A.DUTY_RECPT_DT
                    , A.RETURN_PREARNGE_DT
                    , A.REQ_USER_ID
                    , A.REQ_USER_SE_CD
                    , A.CONTACT_USER_ID
                    , A.DLVY_ADRES_NO
                    , A.BRAND_ID
                FROM TB_REQ A
                WHERE 1=1
                    AND (A.REQ_STATUS_CD='RS0003' OR A.REQ_STATUS_CD='RS0005' OR A.REQ_STATUS_CD='RS0006')
                    AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_MGZN_USER B
            ON 1=1
                AND A.REQ_USER_ID=B.USER_ID
                AND B.DEL_YN='N'
            INNER JOIN TB_MGZN C
            ON 1=1
                AND B.MGZN_ID=C.MGZN_ID
                AND C.DEL_YN='N'
                AND C.MGZN_ID=#{mgzn_id}
            INNER JOIN TB_REQ_SHOWROOM E
            ON 1=1
                AND A.REQ_NO=E.REQ_NO
                AND E.DEL_YN='N'
            INNER JOIN TB_SHOWROOM F
            ON 1=1
                AND E.SHOWROOM_NO=F.SHOWROOM_NO
                AND F.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER G
            ON 1=1
                AND A.CONTACT_USER_ID=G.USER_ID
                AND G.DEL_Yn='N'
            INNER JOIN TB_DLVY_ADRES H
            ON 1=1
                AND A.DLVY_ADRES_NO=H.DLVY_ADRES_NO
                AND H.DEL_YN='N'
            INNER JOIN TB_BRAND I
            ON 1=1
                AND A.BRAND_ID=I.BRAND_ID
                AND I.DEL_YN='N'
        ) T
        WHERE 1=1
            AND
            (
                T.BRAND_NM ILIKE '%' || #{search_text} || '%'
                OR T.USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.CONTACT_USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.SHOWROOM_NM ILIKE '%' || #{search_text} || '%'
                OR T.DLVY_ADRES_NM ILIKE '%' || #{search_text} || '%'
                OR (T.DUTY_RECPT_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
                OR (T.RETURN_PREARNGE_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
            )
        <if test="limit">
            OFFSET ${offset} 
            LIMIT ${limit}
        </if>
    </select>

    <!--
        return 검색
        /brand/search GET
    -->

    <select id="SELECT.SEARCH.RETURN">
        /* SELECT.SEARCH.RETURN */
        SELECT 
            T.REQ_NO
            , T.IMG_URL_ADRES
            , T.CONTACT_USER_NM
            , T.RETURN_DT
            , T.BRAND_ID
            , T.BRAND_NM
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT
                A.REQ_NO
                , A.DUTY_RECPT_DT
                , FLOOR(DATE_PART('epoch'::TEXT, A.RETURN_PREARNGE_DT ))::BIGINT AS RETURN_DT
                , A.RETURN_PREARNGE_DT
                , B.USER_NM
                , CONCAT
                    (
                        (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                        , I.BRAND_LOGO_URL_ADRES
                    ) AS IMG_URL_ADRES
                , G.USER_NM AS CONTACT_USER_NM
                , F.SHOWROOM_NM
                , H.DLVY_ADRES_NM
                , I.BRAND_ID
                , I.BRAND_NM
            FROM 
            (
                SELECT
                    A.REQ_NO
                    , A.DUTY_RECPT_DT
                    , A.RETURN_PREARNGE_DT
                    , A.REQ_USER_ID
                    , A.REQ_USER_SE_CD
                    , A.CONTACT_USER_ID
                    , A.DLVY_ADRES_NO
                    , A.BRAND_ID
                FROM TB_REQ A
                WHERE 1=1
                    AND (A.REQ_STATUS_CD='RS0003' OR A.REQ_STATUS_CD='RS0005' OR A.REQ_STATUS_CD='RS0006')
                    AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_MGZN_USER B
            ON 1=1
                AND A.REQ_USER_ID=B.USER_ID
                AND B.DEL_YN='N'
            INNER JOIN TB_MGZN C
            ON 1=1
                AND B.MGZN_ID=C.MGZN_ID
                AND C.DEL_YN='N'
                AND C.MGZN_ID=#{mgzn_id}
            INNER JOIN TB_REQ_SHOWROOM E
            ON 1=1
                AND A.REQ_NO=E.REQ_NO
                AND E.DEL_YN='N'
            INNER JOIN TB_SHOWROOM F
            ON 1=1
                AND E.SHOWROOM_NO=F.SHOWROOM_NO
                AND F.DEL_YN='N'
            LEFT JOIN TB_MGZN_USER G
            ON 1=1
                AND A.CONTACT_USER_ID=G.USER_ID
                AND G.DEL_Yn='N'
            INNER JOIN TB_DLVY_ADRES H
            ON 1=1
                AND A.DLVY_ADRES_NO=H.DLVY_ADRES_NO
                AND H.DEL_YN='N'
            INNER JOIN TB_BRAND I
            ON 1=1
                AND A.BRAND_ID=I.BRAND_ID
                AND I.DEL_YN='N'
        ) T
        WHERE 1=1
            AND
            (
                T.BRAND_NM ILIKE '%' || #{search_text} || '%'
                OR T.USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.CONTACT_USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.SHOWROOM_NM ILIKE '%' || #{search_text} || '%'
                OR T.DLVY_ADRES_NM ILIKE '%' || #{search_text} || '%'
                OR (T.DUTY_RECPT_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
                OR (T.RETURN_PREARNGE_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
            )
        <if test="limit">
            OFFSET ${offset} 
            LIMIT ${limit}
        </if>
    </select>

    <!--
        스케줄러 검색
        /brand/search GET
    -->

    <select id="SELECT.SEARCH.SCHEDULE">
        /* SELECT.SEARCH.SCHEDULE */
        SELECT 
            T.CONTACT_USER_NM
            , T.IMG_URL_ADRES
            , T.RECPT_DT
            , T.SHOWROOM_NM
            , T.BRAND_NM
            , T.BRAND_ID
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT DISTINCT ON (A.REQ_NO,B.SHOWROOM_NO)
                A.REQ_NO
                , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT ))::BIGINT AS RECPT_DT
                , B.SHOWROOM_NO
                , E.SHOWROOM_NM
                , CONCAT
                    (
                        (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/'
                        , D.IMG_URL_ADRES
                    ) AS IMG_URL_ADRES
                , D.IMG_URL_ADRES AS IMG_PATH
                , CASE
                    WHEN A.REQ_STATUS_CD='RS0005'
                        THEN true
                    ELSE FALSE
                END AS PICKED_UP
                , G.USER_NM
                , H.USER_NM AS CONTACT_USER_NM
                , J.DLVY_ADRES_NM
                , A.DUTY_RECPT_DT
                , A.RETURN_PREARNGE_DT
                , F.BRAND_NM
                , F.BRAND_ID
            FROM
            (
                SELECT 
                    A.REQ_NO
                    , A.DUTY_RECPT_DT
                    , A.REQ_USER_ID
                    , A.CONTACT_USER_ID
                    , A.DLVY_ADRES_NO
                    , A.RETURN_PREARNGE_DT
                    , A.REQ_STATUS_CD
                    , A.BRAND_ID
                FROM TB_REQ A
                WHERE 1=1
                    AND (A.REQ_STATUS_CD='RS0003' OR A.REQ_STATUS_CD='RS0005' OR A.REQ_STATUS_CD='RS0006')
                    AND A.DEL_YN='N'
            ) A
            INNER JOIN TB_REQ_SHOWROOM B
            ON 1=1
                AND A.REQ_NO=B.REQ_NO
                AND B.DEL_YN='N'
            INNER JOIN TB_SHOWROOM_SAMPLE C
            ON 1=1
                AND B.SHOWROOM_NO=C.SHOWROOM_NO
                AND C.DEL_YN='N'
            INNER JOIN TB_SAMPLE_IMG D
            ON 1=1
                AND C.SAMPLE_NO=D.SAMPLE_NO
                AND D.DEL_YN='N'
                AND D.MAIN_YN=true
            INNER JOIN TB_SHOWROOM E
            ON 1=1
                AND B.SHOWROOM_NO=E.SHOWROOM_NO
                AND E.DEL_YN='N'
            INNER JOIN TB_BRAND F
            ON 1=1
                AND A.BRAND_ID=F.BRAND_ID
                AND F.DEL_YN='N'
            INNER JOIN TB_MGZN_USER G
            ON 1=1
                AND A.REQ_USER_ID=G.USER_ID
                AND G.DEL_YN='N'
                AND G.MGZN_ID=#{mgzn_id}
            INNER JOIN TB_MGZN_USER H
            ON 1=1
                AND A.CONTACT_USER_ID=H.USER_ID
                AND H.DEL_YN='N'
            INNER JOIN TB_DLVY_ADRES J
            ON 1=1
                AND A.DLVY_ADRES_NO=J.DLVY_ADRES_NO
                AND J.DEL_YN='N'
        ) T
        WHERE 1=1
            AND
            (
                T.BRAND_NM ILIKE '%' || #{search_text} || '%'
                OR T.USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.CONTACT_USER_NM ILIKE '%' || #{search_text} || '%'
                OR T.SHOWROOM_NM ILIKE '%' || #{search_text} || '%'
                OR T.DLVY_ADRES_NM ILIKE '%' || #{search_text} || '%'
                OR (T.DUTY_RECPT_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
                OR (T.RETURN_PREARNGE_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
            )
        ORDER BY T.RECPT_DT DESC
        <if test="limit">
            OFFSET ${offset} 
            LIMIT ${limit}
        </if>
    </select>

    <!--
        보도자료 검색
        /brand/search GET
    -->

    <select id="SELECT.SEARCH.PRESS">
        /* SELECT.SEARCH.PRESS */
        SELECT 
            T.BRAND_PRESS_NO
            , T.PRESS_SUBJ
            , T.WORD_FILE_FULL_ADRES
            , T.INPUT_DT
            , T.IMG
            , T.BRAND_ID
            , T.BRAND_NM
            , COUNT(1) OVER() AS TOTAL_COUNT
        FROM
        (
            SELECT
                A.BRAND_PRESS_NO
                , A.WORD_FILE_FULL_ADRES
                , A.PRESS_SUBJ
                , CONCAT((SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO LIMIT 1),'/', A.MAIN_IMG_ADRES) AS IMG
                , A.INPUT_DT
                , B.BRAND_ID
                , B.BRAND_NM
                
            FROM 
            (
                SELECT
                    A.BRAND_PRESS_NO
                    , A.PRESS_SUBJ
                    , A.MAIN_IMG_ADRES
                    , A.INPUT_DT
                    , A.BRAND_ID
                    , (SELECT FILE_ORIGIN_PATH FROM SYSTEM_INFO) || '/' || A.WORD_FILE_ADRES AS WORD_FILE_FULL_ADRES
                FROM TB_BRAND_PRESS A
                WHERE 1=1
                    AND A.DEL_YN='N' AND A.SHOW_YN='Y'
                    AND 
                    (
                        A.PRESS_SUBJ ILIKE '%' || #{search_text} || '%'
                        OR A.PRESS_CNTENT ILIKE '%' || #{search_text} || '%'
                        OR (A.INPUT_DT AT TIME ZONE 'Asia/Seoul')::DATE::TEXT=#{search_text}
                    )
            ) A
            LEFT JOIN TB_BRAND B
            ON 1=1
                AND A.BRAND_ID=B.BRAND_ID
                AND B.DEL_YN='N'
        ) T
        ORDER BY INPUT_DT DESC
        <if test="limit">
            OFFSET ${offset} 
            LIMIT ${limit}
        </if>
    </select>

    
    
    <!-- 
        sendout 상세조회
        /brand/sendout-detail/:req_no
    -->
    <select id="SELECT.SENDOUT.PRINT.001">
        /* SELECT.SENDOUT.PRINT.001 */
        SELECT 
            A.REQ_NO
            , G.USER_NM AS REQ_USER_NM
            , J.USER_NM AS CONTACT_USER_NM
            , J.PHONE_NO AS CONTACT_USER_PHONE
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_PREARNGE_BEGIN_DT))::BIGINT AS LOANING_DATE
            , FLOOR(DATE_PART('epoch'::TEXT, A.PHOTOGRF_PREARNGE_BEGIN_DT))::BIGINT AS SHOOTING_DATE 
            , FLOOR(DATE_PART('epoch'::TEXT, A.DUTY_RECPT_DT))::BIGINT AS RETURNING_DATE
            , L.DLVY_ADRES_NM AS STUDIO
            , L.ADRES_DETAIL AS STUDIO_DETAIL
            , M.USER_NM AS FROM_USER_NM
            , M.PHONE_NO AS FROM_USER_PHONE
            , G.USER_NM
            , G.PHONE_NO AS TO_USER_PHONE
            , JSONB_AGG(JSONB_BUILD_OBJECT(
                'showroom_no'
                , C.SHOWROOM_NO 
                , 'showroom_nm'
                , C.SHOWROOM_NM
                , 'sample_list'
                , (
                    SELECT 
                        JSONB_AGG(JSONB_BUILD_OBJECT(
                            'sample_no'
                            , E.SAMPLE_NO 
                            , 'price'
                            , E.PRICE
                            , 'category'
                            , P.SAMPLE_CATGRY_MIDDLE_CL_NM
                            , 'image_list'
                            , (
                                SELECT ARRAY_AGG
                                (
                                    CONCAT
                                    (
                                        Z.FILE_ORIGIN_PATH,'/'
                                        , F.IMG_URL_ADRES
                                    )
                                )
                                FROM SYSTEM_INFO Z
                                WHERE 1=1
                            )
                            ,'placeholder'
                            , CASE WHEN 1=1 THEN NULL ELSE ZZ.FILE_ORIGIN_PATH END
                        ))
                    FROM 
                    SYSTEM_INFO ZZ
                    WHERE 1=1
                )
            )) AS SHOWROOM_LIST
        FROM 
        (
            SELECT 
                A.REQ_NO
                , A.REQ_USER_ID
                , A.REQ_USER_SE_CD
                , A.CONTACT_USER_ID
                , A.DLVY_ADRES_NO
                , A.BRAND_USER_NO
                , A.DUTY_RECPT_DT
                , A.PHOTOGRF_PREARNGE_BEGIN_DT
            FROM TB_REQ A 
            WHERE 1=1
                <if test="req_no">
                AND REQ_NO = #{req_no}
                </if>   
                <if test="type == 'SENDOUT' and date">
                AND A.DUTY_RECPT_DT::DATE = TO_TIMESTAMP(#{date}::BIGINT)::DATE
                AND REQ_STATUS_CD = 'RS0003'
                </if>   
                <if test="type == 'RETURN' and date">
                AND A.RETURN_PREARNGE_DT::DATE = TO_TIMESTAMP(#{date}::BIGINT)::DATE
                AND REQ_STATUS_CD = 'RS0005'
                </if>   
                AND A.DEL_YN = 'N'   
        ) A
        INNER JOIN TB_REQ_SHOWROOM B
        ON 1=1
            AND A.REQ_NO = B.REQ_NO
            AND B.DEL_YN = 'N'
        INNER JOIN TB_SHOWROOM C
        ON 1=1
            AND B.SHOWROOM_NO = C.SHOWROOM_NO
            AND C.DEL_YN = 'N'
        INNER JOIN TB_SHOWROOM_SAMPLE D
        ON 1=1
            AND C.SHOWROOM_NO=D.SHOWROOM_NO
            AND D.DEL_YN='N'
        INNER JOIN TB_SAMPLE E
        ON 1=1
            AND D.SAMPLE_NO=E.SAMPLE_NO
            AND E.DEL_YN='N'
        INNER JOIN TB_SAMPLE_IMG F
        ON 1=1
            AND E.SAMPLE_NO=F.SAMPLE_NO
            AND F.DEL_YN='N' and F.MAIN_YN = true
        INNER JOIN TB_DLVY_ADRES L <!-- 배송주소 -->
        ON 1=1
            AND A.DLVY_ADRES_NO = L.DLVY_ADRES_NO
            AND L.DEL_YN = 'N'
        LEFT JOIN TB_SAMPLE_CATGRY_MIDDL_CL P
        ON 1=1
            AND E.SAMPLE_CATGRY_MIDDLE_CL_CD = P.SAMPLE_CATGRY_MIDDLE_CL_CD
        INNER JOIN TB_MGZN_USER G <!-- 요청한 매거진 유저 -->
        ON 1=1
            AND A.REQ_USER_ID = G.USER_ID 
            AND A.REQ_USER_SE_CD = 'RUS001'
        LEFT JOIN TB_MGZN I <!-- 요청한 매거진 -->
        ON 1=1
            AND G.MGZN_ID = I.MGZN_ID
        INNER JOIN TB_MGZN_USER J <!-- 연락할 매거진 유저 -->
        ON 1=1
            AND A.CONTACT_USER_ID = J.USER_ID 
            AND A.REQ_USER_SE_CD = 'RUS001'
            AND A.CONTACT_USER_ID IS NOT NULL
        LEFT JOIN TB_BRAND_USER M 
        ON 1=1
            AND A.BRAND_USER_NO = M.BRAND_USER_NO
        GROUP BY 
            A.REQ_NO
            , A.REQ_USER_SE_CD
            , G.USER_NM
            , J.USER_NM
            , J.PHONE_NO
            , A.PHOTOGRF_PREARNGE_BEGIN_DT
            , A.DUTY_RECPT_DT
            , L.DLVY_ADRES_NM
            , L.ADRES_DETAIL
            , M.USER_NM
            , M.PHONE_NO
            , G.PHONE_NO
    </select>

<!-- 
        발송 푸시알림
        /magazine/sendout-push/:req_no POST
    -->
    <insert id="UPDATE.SENDOUT.PUSH">
        WITH 
        SELECT_REQ AS 
        (
            SELECT 
                A.REQ_NO, A.REQ_STATUS_CD
            FROM 
                TB_REQ A 
                INNER JOIN TB_MGZN_USER B ON B.MGZN_ID=#{mgzn_id} AND A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
            WHERE 
                A.REQ_NO = #{req_no} AND A.DEL_YN = 'N'
        )
        , INSERT_HISTORY AS 
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT 
                REQ_NO
                , SELECT_REQ.REQ_STATUS_CD
                , SELECT_REQ.REQ_STATUS_CD
            FROM SELECT_REQ
            RETURNING REQ_HIST_NO
        )
        , TB_REQ_HIST_NOTIFI_ADD AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI 
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOT_RECEIVE_YN
                , NOTICE_TYPE
            )
            SELECT 
                'RHNS05'
                ,(
                    SELECT
                        CONCAT('[반납/발송] ' , B.MGZN_NM, ' ', A.USER_NM, '님이 샘플을 반납(발송)했습니다.')
                    FROM
                        (
                            SELECT A.USER_NM, A.MGZN_ID FROM TB_MGZN_USER A WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N'
                        ) A LEFT JOIN TB_MGZN B ON B.MGZN_ID=A.MGZN_ID AND B.DEL_YN='N'
                ) 
                ,(
                    SELECT
                        CONCAT(B.MGZN_NM, ' ', A.USER_NM, '에서 ', (C.PHOTOGRF_DT at time zone 'utc' at time zone 'kst')::DATE, ' 촬영 건 ', #{len},'건의 샘플을 반납(발송) 완료했습니다.')
                    FROM
                        ( SELECT A.USER_NM, A.MGZN_ID FROM TB_MGZN_USER A WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N' ) A
                        LEFT JOIN TB_MGZN B ON B.MGZN_ID=A.MGZN_ID AND B.DEL_YN='N'
                        LEFT JOIN TB_REQ C ON C.REQ_NO=#{req_no} AND C.DEL_YN='N'
                )
                , ( SELECT REQ_HIST_NO FROM INSERT_HISTORY LIMIT 1 )
                , #{user_id}
                , T.USER_ID
                , 'magazine'
                , TRUE
                , 'recv'
            FROM 
            (
               SELECT 
                    A.return_userid as USER_ID
                FROM 
                    tb_new_req_sample A 
                WHERE 
                    A.REQ_NO=#{req_no} AND A.return_userid=#{return_userid} AND A.DEL_YN='N'
                    <if test="targetSampleList">
                        AND A.sample_no IN ( 
                        <foreach collection="targetSampleList" item="sno" separator=",">
                            #{sno}
                        </foreach>
                    ) 
                    </if>
                Group by A.return_userid
                LIMIT 1                    
            ) T
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , UPDATE_TB_NEW_REQ_SAMPLE_SAMEDATE AS
        (
            UPDATE TB_NEW_REQ_SAMPLE
                SET sendout_yn=true
            WHERE 
                sendout_userid = #{user_id} and sendout_userid_type = 'RUS001' 
                AND DEL_YN='N' 
                <if test="targetSampleList">
                    AND sample_no IN ( 
                    <foreach collection="targetSampleList" item="sno" separator=",">
                        #{sno}
                    </foreach>
                    ) 
                </if>
                AND sendout_dt = ( 
                    SELECT return_dt FROM TB_NEW_REQ_SAMPLE
                    WHERE  
                        REQ_NO=#{req_no} AND DEL_YN='N' 
                        <if test="targetSampleList">
                            AND sample_no IN ( 
                            <foreach collection="targetSampleList" item="sno" separator=",">
                                #{sno}
                            </foreach>
                            ) 
                        </if>
                    LIMIT 1
                )
        )
        , UPDATE_TB_NEW_REQ_SAMPLE AS
        (
            UPDATE 
                TB_NEW_REQ_SAMPLE
            SET 
                return_yn=true
            WHERE 
                REQ_NO=#{req_no} AND DEL_YN='N'
                <if test="targetSampleList">
                    AND sample_no IN ( 
                    <foreach collection="targetSampleList" item="sno" separator=",">
                        #{sno}
                    </foreach>
                    ) 
                </if>
        )
        SELECT
            B.TOKEN_VALUE , A.NOTIFI_SUBJ AS MESSAGE 
        FROM 
            TB_REQ_HIST_NOTIFI_ADD A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN
    </insert>

    <!-- 
        발송알림 개별전송
        /magazine/sendout-push-individual POST
    -->
    <insert id="UPDATE.SENDOUT.PUSH.INDIVIDUAL">
        WITH 
        SELECT_REQ AS 
        (
            SELECT 
                A.REQ_NO, A.REQ_STATUS_CD
            FROM 
                TB_REQ A 
                INNER JOIN TB_MGZN_USER B ON B.MGZN_ID=#{mgzn_id} AND A.REQ_USER_ID=B.USER_ID AND B.DEL_YN='N'
            WHERE A.REQ_NO = #{req_no} AND A.DEL_YN = 'N'
        )
        , INSERT_HISTORY AS 
        (
            INSERT INTO TB_REQ_HIST
            (
                REQ_NO
                , MODIFI_BFE_REQ_STATUS_CD
                , MODIFI_AFT_REQ_STATUS_CD
            )
            SELECT 
                REQ_NO
                , SELECT_REQ.REQ_STATUS_CD
                , SELECT_REQ.REQ_STATUS_CD
            FROM SELECT_REQ
            RETURNING REQ_HIST_NO
        )
        , TB_REQ_HIST_NOTIFI_ADD AS
        (
            INSERT INTO TB_REQ_HIST_NOTIFI 
            (
                REQ_HIST_NOTIFI_SE_CD
                , NOTIFI_SUBJ
                , NOTIFI_CNTENT
                , REQ_HIST_NO
                , SEND_USER_ID
                , RECV_USER_ID
                , SEND_MAN_USER_TYPE
                , NOT_RECEIVE_YN
                , NOTICE_TYPE
            )
            SELECT 
                'RHNS05'
                , 
                (
                    SELECT
                        CONCAT ('[반납] ' , B.MGZN_NM, ' ', A.USER_NM, '님이 샘플을 반납했습니다.')
                        FROM
                            (
                            SELECT A.USER_NM, A.MGZN_ID
                            FROM TB_MGZN_USER A
                            WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N'
                        ) A INNER JOIN TB_MGZN B ON B.MGZN_ID=A.MGZN_ID AND B.DEL_YN='N'
                )
                , CASE 
                    WHEN NOT EXISTS  <!-- #3 -->
                    (
                        SELECT 1 
                        FROM TB_NEW_REQ_SAMPLE
                        WHERE
                            REQ_NO=#{req_no} AND return_YN=FALSE AND DEL_YN='N' AND SAMPLE_NO != #{sample_no}
                        LIMIT 1
                    ) 
                    THEN 
                    ( 
                        SELECT 
                            CONCAT (B.MGZN_NM, ' ', A.USER_NM, '에서 ' , (C.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE, ' 촬영 건 ', #{len},'건의 샘플을 반납 했습니다.')
                        FROM
                            ( SELECT A.USER_NM, A.MGZN_ID FROM TB_MGZN_USER A WHERE A.USER_ID=#{user_id} AND A.DEL_YN='N' ) A
                            INNER JOIN TB_MGZN B ON B.MGZN_ID=A.MGZN_ID AND B.DEL_YN='N'
                            LEFT JOIN TB_REQ C ON C.REQ_NO=#{req_no} AND C.DEL_YN='N'
                    )
                    ELSE 
                    (
                        SELECT
                            CONCAT (B.MGZN_NM, ' ', A.USER_NM, '에서 ' , (C.PHOTOGRF_DT AT TIME ZONE 'utc' AT TIME ZONE 'kst')::DATE, ' 촬영 건 ', (SELECT SAMPLE_NM FROM TB_SAMPLE WHERE SAMPLE_NO=#{sample_no}),'을(를) 반납했습니다.')
                            FROM
                                ( SELECT A.USER_NM, A.MGZN_ID FROM TB_MGZN_USER AS A WHERE USER_ID=#{user_id} AND A.DEL_YN='N' ) A
                                LEFT JOIN TB_MGZN B ON B.MGZN_ID=A.MGZN_ID AND B.DEL_YN='N'
                                LEFT JOIN TB_REQ C ON C.REQ_NO=#{req_no} AND C.DEL_YN='N'
                    ) END
                , (SELECT REQ_HIST_NO FROM INSERT_HISTORY LIMIT 1)
                , #{user_id}
                , T.USER_ID
                , 'magazine'
                , TRUE
                , 'sendout'
            FROM 
            (     
                SELECT 
                    A.return_userid as USER_ID
                FROM 
                    tb_new_req_sample as A
                WHERE 
                    A.REQ_NO=#{req_no} AND A.SAMPLE_NO=#{sample_no} AND A.DEL_YN='N'
           
            ) T
            RETURNING NOTIFI_SUBJ, RECV_USER_ID
        )
        , UPDATE_TB_NEW_REQ_SAMPLE_SAMEDATE AS
        (
            UPDATE TB_NEW_REQ_SAMPLE
                SET sendout_yn=true
            WHERE 
                sendout_userid = #{user_id} and sendout_userid_type = 'RUS001' 
                AND DEL_YN='N' AND SAMPLE_NO=#{sample_no} and sendout_dt = ( 
                    SELECT return_dt FROM TB_NEW_REQ_SAMPLE
                    WHERE  REQ_NO=#{req_no} AND DEL_YN='N' AND SAMPLE_NO=#{sample_no}
                    LIMIT 1
                )
        )
        , UPDATE_TB_NEW_REQ_SAMPLE AS
        (
            UPDATE TB_NEW_REQ_SAMPLE
            SET return_YN=true
            WHERE REQ_NO=#{req_no} AND DEL_YN='N' AND SAMPLE_NO=#{sample_no}
        )
        SELECT 
            B.TOKEN_VALUE, A.NOTIFI_SUBJ AS MESSAGE 
        FROM 
            TB_REQ_HIST_NOTIFI_ADD A JOIN TB_FCM_PUSH_TOKEN B ON A.RECV_USER_ID = B.USER_ID AND B.USE_YN 
    </insert>

</mapper>